# in Haskell: main = head (map const [7,2,1]) 10 

nil = CON(Nil);
one = CON(I 1);
two = CON(I 2);
seven = CON(I 7);
ten = CON(I 10);

const = FUN(x y -> x);

head = FUN(xs -> case xs of { Cons hd tl -> hd });

map = FUN(f list ->
   case list of {
      Nil -> nil;
      Cons h t -> let { x = THUNK(f h); rec = THUNK(map f t); res = CON(Cons x rec) } in res
   });


list1 = CON(Cons one nil);
list2 = CON(Cons two list1);
list3 = CON(Cons seven list2);
main = THUNK(let { mc = THUNK(map const list3);
                   constSeven = THUNK(head mc)
                 } in constSeven ten);
