-- solves tower of hanoi puzzle
-- hanoi :: Int -> Tupl3 (List Int) -> Tupl3 (List Int) 
hanoi = FUN(x y ->
                let {
                  pred = THUNK(eqInt one x)}
                in case pred of
                     _scrt6 {
                       True -> case y of
                                 _scrt1 {
                                   TP3 a b c -> case a of
                                                  _scrt0 {
                                                    Cons h1 t1 -> let {
                                                                    f = THUNK(cons h1 c);
                                                                    g = CON(TP3 t1 b f)}
                                                                  in g } };
                       False -> case y of
                                  _scrt5 {
                                    TP3 a1 b1 c1 -> let {
                                                      k = THUNK(subInt x one);
                                                      j = CON(TP3 a1 c1 b1);
                                                      w = THUNK(hanoi k j)}
                                                    in case w of
                                                         _scrt4 {
                                                           TP3 a2 b2 c2 -> let {
                                                                             i = CON(TP3 a2 c2 b2);
                                                                             l = THUNK(hanoi one i)}
                                                                           in case l of
                                                                                _scrt3 {
                                                                                  TP3 a3 b3 c3 -> let {
                                                                                                    r = THUNK(subInt x one);
                                                                                                    s = CON(TP3 b3 a3 c3);
                                                                                                    t = THUNK(hanoi r s)}
                                                                                                  in case t of
                                                                                                       _scrt2 {
                                                                                                         TP3 a4 b4 c4 -> let {
                                                                                                                           q = CON(TP3 b4 a4 c4)}
                                                                                                                         in q } } } } });

eqTuple3 = FUN(x ->
                 case x of
                   _scrt10 {
                     TP3 a b c -> case a of
                                    _scrt9 {
                                      Nil -> case b of
                                               _scrt8 {
                                                 Nil -> let {
                                                          d = THUNK(eqList c list2)}
                                                        in case d of
                                                             _scrt7 {
                                                               True -> true } } } });

-- list5: [5,4,3,2,1]
list5 = CON(Cons one list4);

list4 = CON(Cons two list3);

list3 = CON(Cons three list2);

list2 = CON(Cons four list1);

list1 = CON(Cons five nil);

intermediate = CON(TP3 list2 nil nil);

result = THUNK(hanoi two intermediate);

main = THUNK(eqTuple3 result);

