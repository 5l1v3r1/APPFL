data BTree a = Leaf a | B (BTree a) a (BTree a);

--eqBTree :: BTree -> BTree -> Bool
eqBTree = FUN(x y -> case x of {
	  	     Leaf a1 -> case y of {
		    	 Leaf a2 -> case eqInt a1 a2 of {
			      True -> true;
			      False -> false};
			 B b3 a2 b4 -> false};
	             B b1 a1 b2 -> case y of {
		       	 Leaf a2 -> false;
			 B b3 a2 b4 -> let {q1 = THUNK(eqBTree b1 b3);
			       	     	  q2 = THUNK(eqBTree b2 b4);
					  q3 = THUNK(and q1 q2)} in q3}});

--and :: Bool -> Bool -> Bool
and = FUN(x y -> case x of {
      	      	      True -> case y of {
		      	      	   True -> true;
				   False -> false};
	              False -> case y of {
		      	       False -> false;
			       True -> false}});			  

--max :: Int -> Int -> Int 
max = FUN(x y -> case intLE x y of {
      	      	 True -> y;
		 False -> x}); 	

--tHeight :: BTree -> Int -> Int 
tHeight = FUN(x h -> case x of {
       	       	    	 Leaf a1 -> h;
       	       	    	 B b1 a2 b2 -> let {r1 = THUNK(plusInt one h);
			      	      	   r2 = THUNK(tHeight b1 r1);
					   r3 = THUNK(tHeight b2 r1);
					   r4 = THUNK(max r2 r3)} in r4});

--sinkRight :: BTree -> BTree
sinkRight = FUN(x -> case x of {
	   	    Leaf a1 -> x;
		    B b1 a2 b2 -> case b2 of {
		      	       	  Leaf a3 -> let {q1 = CON(Leaf a2);
				       	     	  q2 = CON(B b1 a3 q1)} in q2;
				  B b3 a4 b4 -> let {q3 = CON(B b3 a2 b4);
				       	     	     q4 = CON(B b1 a4 q3)} in q4}});

--sinkLeft :: BTree -> BTree
sinkLeft = FUN(x -> case x of {
	   	    Leaf a1 -> x;
		    B b1 a2 b2 -> case b1 of {
		      	       	  Leaf a3 -> let {q1 = CON(Leaf a2);
				       	     	  q2 = CON(B q1 a3 b2)} in q2;
				  B b3 a4 b4 -> let {q3 = CON(B b3 a2 b4);
				       	     	     q4 = CON(B q3 a4 b2)} in q4}});

--findHeight :: BTree -> Int 
findHeight = FUN(x -> tHeight x zero);

--canSinkLeft :: BTree -> Bool
canSinkLeft = FUN(x -> case x of {
	  	       Leaf a1 -> false;
		       B b1 a2 b2 -> case b1 of {
		       	       	     Leaf a3 -> intLT a2 a3;
				     B b3 a4 b4 -> intLT a2 a4}});

--canSinkRight :: BTree -> Bool
canSinkRight = FUN(x -> case x of {
	  	       Leaf a1 -> false;
		       B b1 a2 b2 -> case b2 of {
		       	       	     Leaf a3 -> intLT a2 a3;
				     B b3 a4 b4 -> intLT a2 a4}});

--canSink :: BTree -> Bool
canSink = FUN(x -> case canSinkLeft x of {
	  	        True -> true;
			False -> case canSinkRight x of {
			      	 True -> true;
				 False -> false}});
--getLeft :: BTree -> Int
getLeft = FUN(x -> case x of {
	    	     B b1 a1 b2 -> case b1 of {
		       	     	   Leaf a2 -> a2;
				   B b3 a3 b4 -> a3}});

--getRight :: BTree -> Int
getRight = FUN(x -> case x of {
	   	    B b1 a1 b2 -> case b2 of {
		      	       	  Leaf a2 -> a2;
				  B b3 a3 b4 -> a3}});

--sink :: BTree -> BTree 
sink = FUN(x -> case canSinkLeft x of {
       	     	False -> case canSinkRight x of {
		      	 False -> x;
			 True -> case sinkRight x of {
			      	 B b1 a1 b2 -> let{q4 = THUNK(sink b2);
				      	       	   q5 = CON(B b1 a1 q4)} in q5}};
	        True -> case canSinkRight x of {
		     	False -> case sinkLeft x of {
			      	 B b1 a1 b2 -> let {q6 = THUNK(sink b1);
				      	       	    q7 = CON(B q6 a1 b2)} in q7};
                 	True -> let {q1 = THUNK(getLeft x);
			     	     q2 = THUNK(getRight x);
				     q3 = THUNK(intLE q1 q2)} in case q3 of {
				     	  	      	      	 True -> case sinkRight x of {
								      	 B b1 a1 b2 -> let {q4 = THUNK(sink b2);
									      	       	    q5 = CON(B b1 a1 q4)} in q5};
								 False -> case sinkLeft x of {
								       	  B b1 a1 b2 -> let {q4 = THUNK(sink b1);
									       	     	     q5 = CON(B q4 a1 b2)} in q5}}}});

--isLeaf :: BTree -> Bool
isLeaf = FUN(x -> case x of {
       	       	  Leaf a -> true;
		  B b1 a1 b2 -> false});

--getLeaf :: BTree -> Int 
getLeaf = FUN(x -> case x of {
	  	   Leaf a -> a;
		   B b1 a1 b2 -> getLeaf b2});

--removeMax :: BTree -> BTree
removeMax = FUN(x -> case x of {
	    	     Leaf a1 -> let {q1 = CON(Leaf zero)} in q1;
		     B b1 a2 b2 -> let {q2 = CON(B b1 zero b2);
		       	     	       	q3 = THUNK(sink q2)} in q3});

top = FUN(x -> case x of {
      	       Leaf a1 -> a1;
	       B b1 a2 b2 -> a2});

--sortHeap :: BTree Int -> List Int
sortHeap = FUN(x -> let {q1 = THUNK(top x);
	   	    	 q2 = THUNK(eqInt q1 zero)} in case q2 of {
			      		     	       True -> nil;
						       False -> let {q3 = THUNK(removeMax x);
						       	     	     q4 = THUNK(sortHeap q3);
								     q5 = CON(Cons q1 q4)} in q5});

--Test
l1 = CON(Leaf one);
l2 = CON(Leaf two);
l3 = CON(Leaf three);
l4 = CON(Leaf four);
l5 = CON(B l1 five l2);
l6 = CON(B l3 six l4);
l7 = CON(B l5 seven l6);

k1 = CON(Leaf one);
k2 = CON(Leaf two);
k3 = CON(Leaf three);
k4 = CON(Leaf zero);
k5 = CON(B k1 five k2);
k6 = CON(B k3 four k4);
k7 = CON(B k5 six k6);

m1 = CON(Leaf one);
m2 = CON(Leaf two);
m3 = CON(Leaf three);
m4 = CON(Leaf four);
m5 = CON(B m1 five m2);
m6 = CON(B m3 seven m4);
m7 = CON(B m5 six m6);

j1 = CON(Cons one nil);
j2 = CON(Cons two j1);
j3 = CON(Cons three j2);
j4 = CON(Cons four j3);
j5 = CON(Cons five j4);
j6 = CON(Cons six j5);
j7 = CON(Cons seven j6);

output = THUNK(sortHeap l7);
main = THUNK(eqList output j7);
