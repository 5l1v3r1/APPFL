and.stg:--and :: Bool -> Bool -> Bool
and.stg:--Test
append2.stg:-- just test sum
append3.stg:-- just test sum
append.stg:-- just test sum
arrayCreation.stg:--Test
binaryST10.stg:-- or :: Bool -> Bool -> Bool 
binaryST10.stg:-- and :: Bool -> Bool -> Bool
binaryST10.stg:-- max :: Int -> Int -> Int
binaryST10.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST10.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST10.stg:-- size :: BSTree a -> Int
binaryST10.stg:-- height :: BSTree a -> Int
binaryST10.stg:-- getHeight :: BSTree a -> Int
binaryST10.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST10.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST10.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST10.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST10.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST10.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST10.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST10.stg:-- rootKey :: BSTree (TP2 Int Int) -> Int
binaryST10.stg:-- floor :: BSTree (TP2 Int Int) -> Int -> Int -> Int
binaryST10.stg:-- startFloor :: BSTree (TP2 Int Int) -> Int -> Int
binaryST10.stg:--Test 
binaryST10.stg:-- -------------------------------------------
binaryST11.stg:-- or :: Bool -> Bool -> Bool 
binaryST11.stg:-- and :: Bool -> Bool -> Bool
binaryST11.stg:-- max :: Int -> Int -> Int
binaryST11.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST11.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST11.stg:-- size :: BSTree a -> Int
binaryST11.stg:-- height :: BSTree a -> Int
binaryST11.stg:-- getHeight :: BSTree a -> Int
binaryST11.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST11.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST11.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST11.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST11.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST11.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST11.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST11.stg:-- rootKey :: BSTree (TP2 Int Int) -> Int
binaryST11.stg:-- floor :: BSTree (TP2 Int Int) -> Int -> Int -> Int
binaryST11.stg:-- startFloor :: BSTree (TP2 Int Int) -> Int -> Int
binaryST11.stg:--Test 
binaryST11.stg:-- -------------------------------------------
binaryST12.stg:-- or :: Bool -> Bool -> Bool 
binaryST12.stg:-- and :: Bool -> Bool -> Bool
binaryST12.stg:-- max :: Int -> Int -> Int
binaryST12.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST12.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST12.stg:-- size :: BSTree a -> Int
binaryST12.stg:-- height :: BSTree a -> Int
binaryST12.stg:-- getHeight :: BSTree a -> Int
binaryST12.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST12.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST12.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST12.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST12.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST12.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST12.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST12.stg:-- rootKey :: BSTree (TP2 Int Int) -> Int
binaryST12.stg:-- floor :: BSTree (TP2 Int Int) -> Int -> Int -> Int
binaryST12.stg:-- startFloor :: BSTree (TP2 Int Int) -> Int -> Int
binaryST12.stg:--Test 
binaryST12.stg:-- -------------------------------------------
binaryST13.stg:-- or :: Bool -> Bool -> Bool 
binaryST13.stg:-- and :: Bool -> Bool -> Bool
binaryST13.stg:-- max :: Int -> Int -> Int
binaryST13.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST13.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST13.stg:-- size :: BSTree a -> Int
binaryST13.stg:-- height :: BSTree a -> Int
binaryST13.stg:-- getHeight :: BSTree a -> Int
binaryST13.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST13.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST13.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST13.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST13.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST13.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST13.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST13.stg:-- rootKey :: BSTree (TP2 Int Int) -> Int
binaryST13.stg:-- floor :: BSTree (TP2 Int Int) -> Int -> Int -> Int
binaryST13.stg:-- startFloor :: BSTree (TP2 Int Int) -> Int -> Int
binaryST13.stg:-- ceiling :: BSTree (TP2 Int Int) -> Int
binaryST13.stg:-- startCeiling :: BSTree (TP2 Int Int) -> Int -> Int
binaryST13.stg:--Test 
binaryST13.stg:-- -------------------------------------------
binaryST14.stg:-- or :: Bool -> Bool -> Bool 
binaryST14.stg:-- and :: Bool -> Bool -> Bool
binaryST14.stg:-- max :: Int -> Int -> Int
binaryST14.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST14.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST14.stg:-- size :: BSTree a -> Int
binaryST14.stg:-- height :: BSTree a -> Int
binaryST14.stg:-- getHeight :: BSTree a -> Int
binaryST14.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST14.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST14.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST14.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST14.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST14.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST14.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST14.stg:-- rootKey :: BSTree (TP2 Int Int) -> Int
binaryST14.stg:-- floor :: BSTree (TP2 Int Int) -> Int -> Int -> Int
binaryST14.stg:-- startFloor :: BSTree (TP2 Int Int) -> Int -> Int
binaryST14.stg:-- ceiling :: BSTree (TP2 Int Int) -> Int
binaryST14.stg:-- startCeiling :: BSTree (TP2 Int Int) -> Int -> Int
binaryST14.stg:--Test 
binaryST14.stg:-- -------------------------------------------
binaryST15.stg:-- or :: Bool -> Bool -> Bool 
binaryST15.stg:-- and :: Bool -> Bool -> Bool
binaryST15.stg:-- max :: Int -> Int -> Int
binaryST15.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST15.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST15.stg:-- size :: BSTree a -> Int
binaryST15.stg:-- height :: BSTree a -> Int
binaryST15.stg:-- getHeight :: BSTree a -> Int
binaryST15.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST15.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST15.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST15.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST15.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST15.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST15.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST15.stg:-- rootKey :: BSTree (TP2 Int Int) -> Int
binaryST15.stg:-- floor :: BSTree (TP2 Int Int) -> Int -> Int -> Int
binaryST15.stg:-- startFloor :: BSTree (TP2 Int Int) -> Int -> Int
binaryST15.stg:-- ceiling :: BSTree (TP2 Int Int) -> Int
binaryST15.stg:-- startCeiling :: BSTree (TP2 Int Int) -> Int -> Int
binaryST15.stg:--Test 
binaryST15.stg:-- -------------------------------------------
binaryST16.stg:-- or :: Bool -> Bool -> Bool 
binaryST16.stg:-- and :: Bool -> Bool -> Bool
binaryST16.stg:-- max :: Int -> Int -> Int
binaryST16.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST16.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST16.stg:-- size :: BSTree a -> Int
binaryST16.stg:-- height :: BSTree a -> Int
binaryST16.stg:-- getHeight :: BSTree a -> Int
binaryST16.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST16.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST16.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST16.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST16.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST16.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST16.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST16.stg:-- rootKey :: BSTree (TP2 Int Int) -> Int
binaryST16.stg:-- floor :: BSTree (TP2 Int Int) -> Int -> Int -> Int
binaryST16.stg:-- startFloor :: BSTree (TP2 Int Int) -> Int -> Int
binaryST16.stg:-- ceiling :: BSTree (TP2 Int Int) -> Int
binaryST16.stg:-- startCeiling :: BSTree (TP2 Int Int) -> Int -> Int
binaryST16.stg:--deleteMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST16.stg:--Test 
binaryST17.stg:-- or :: Bool -> Bool -> Bool 
binaryST17.stg:-- and :: Bool -> Bool -> Bool
binaryST17.stg:-- max :: Int -> Int -> Int
binaryST17.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST17.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST17.stg:-- size :: BSTree a -> Int
binaryST17.stg:-- height :: BSTree a -> Int
binaryST17.stg:-- getHeight :: BSTree a -> Int
binaryST17.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST17.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST17.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST17.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST17.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST17.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST17.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST17.stg:-- rootKey :: BSTree (TP2 Int Int) -> Int
binaryST17.stg:-- floor :: BSTree (TP2 Int Int) -> Int -> Int -> Int
binaryST17.stg:-- startFloor :: BSTree (TP2 Int Int) -> Int -> Int
binaryST17.stg:-- ceiling :: BSTree (TP2 Int Int) -> Int
binaryST17.stg:-- startCeiling :: BSTree (TP2 Int Int) -> Int -> Int
binaryST17.stg:--deleteMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST17.stg:--deleteMax :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST17.stg:--Test 
binaryST1.stg:-- or :: Bool -> Bool -> Bool
binaryST1.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST1.stg:--Test 
binaryST2.stg:-- or :: Bool -> Bool -> Bool
binaryST2.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST2.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST2.stg:--Test 
binaryST3.stg:-- or :: Bool -> Bool -> Bool 
binaryST3.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST3.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST3.stg:-- size :: BSTree a -> Int
binaryST3.stg:--Test 
binaryST4.stg:-- or :: Bool -> Bool -> Bool 
binaryST4.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST4.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST4.stg:-- size :: BSTree a -> Int
binaryST4.stg:-- max :: Int -> Int -> Int
binaryST4.stg:-- height :: BSTree a -> Int
binaryST4.stg:--Test 
binaryST5.stg:-- or :: Bool -> Bool -> Bool 
binaryST5.stg:-- and :: Bool -> Bool -> Bool
binaryST5.stg:-- max :: Int -> Int -> Int
binaryST5.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST5.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST5.stg:-- size :: BSTree a -> Int
binaryST5.stg:-- height :: BSTree a -> Int
binaryST5.stg:-- getHeight :: BSTree a -> Int
binaryST5.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST5.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST5.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST5.stg:--Test 
binaryST6.stg:-- or :: Bool -> Bool -> Bool 
binaryST6.stg:-- and :: Bool -> Bool -> Bool
binaryST6.stg:-- max :: Int -> Int -> Int
binaryST6.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST6.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST6.stg:-- size :: BSTree a -> Int
binaryST6.stg:-- height :: BSTree a -> Int
binaryST6.stg:-- getHeight :: BSTree a -> Int
binaryST6.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST6.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST6.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST6.stg:--Test 
binaryST6.stg:-- -------------------------------------------
binaryST7.stg:-- or :: Bool -> Bool -> Bool 
binaryST7.stg:-- and :: Bool -> Bool -> Bool
binaryST7.stg:-- max :: Int -> Int -> Int
binaryST7.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST7.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST7.stg:-- size :: BSTree a -> Int
binaryST7.stg:-- height :: BSTree a -> Int
binaryST7.stg:-- getHeight :: BSTree a -> Int
binaryST7.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST7.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST7.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST7.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST7.stg:--Test 
binaryST7.stg:-- -------------------------------------------
binaryST8.stg:-- or :: Bool -> Bool -> Bool 
binaryST8.stg:-- and :: Bool -> Bool -> Bool
binaryST8.stg:-- max :: Int -> Int -> Int
binaryST8.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST8.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST8.stg:-- size :: BSTree a -> Int
binaryST8.stg:-- height :: BSTree a -> Int
binaryST8.stg:-- getHeight :: BSTree a -> Int
binaryST8.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST8.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST8.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST8.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST8.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST8.stg:--Test 
binaryST8.stg:-- -------------------------------------------
binaryST9.stg:-- or :: Bool -> Bool -> Bool 
binaryST9.stg:-- and :: Bool -> Bool -> Bool
binaryST9.stg:-- max :: Int -> Int -> Int
binaryST9.stg:-- searchTest :: BSTree (TP2 Int Int) -> Int -> Bool
binaryST9.stg:-- getKey :: BSTree (TP2 Int Int) -> Int -> Int
binaryST9.stg:-- size :: BSTree a -> Int
binaryST9.stg:-- height :: BSTree a -> Int
binaryST9.stg:-- getHeight :: BSTree a -> Int
binaryST9.stg:-- insert :: BSTree (TP2 Int Int) -> TP2 Int Int -> BSTree (TP2 Int Int)
binaryST9.stg:-- eqKV :: TP2 Int Int -> TP2 Int Int -> Bool
binaryST9.stg:-- eqBSTree :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> Bool
binaryST9.stg:-- min :: BSTree (TP2 Int Int) -> Int
binaryST9.stg:-- max1 :: BSTree (TP2 Int Int) -> Int 
binaryST9.stg:-- delete :: BSTree (TP2 Int Int) -> Int -> BSTree (TP2 Int Int)
binaryST9.stg:-- appendMin :: BSTree (TP2 Int Int) -> BSTree (TP2 Int Int) -> BSTree (TP2 Int Int)
binaryST9.stg:--Test 
binaryST9.stg:-- -------------------------------------------
compareInt.stg:--Test	 
cons.stg:-- just test sum
divide.stg:--test
elem.stg:-- checks if an element is in a list of ints
elem.stg:-- elem :: Int -> List Int -> Bool 
elem.stg:-- list5: [5,4,3,2,1]
elem.stg:-- Test
eqBool.stg:--eqBool :: Bool -> Bool -> Bool
eqList.stg:-- list5: [5,4,3,2,1]
eqList.stg:-- list10: [5,4,3,2,1]
eqList.stg:--test
error/adt1.stg:-- lowercase tycon
error/adt2.stg:-- lowercase datacon
error/comment.stg:-- mismatched comment
error/comment.stg:{-
error/freevar.stg:-- undefiend var
error/obj.stg:-- missing obj
error/polyUnboxed.stg:-- should fail typechecking. Can't use unboxed arg in polymorphic FUN
error/polyUnboxed.stg:-- expecting "*** Exception: cannot unify unboxed type UBInt with polymorphic type variable"
error/semi.stg:-- missing semicolon
error/thunk.stg:-- missing expr in thunk
evenArrayCreation1.stg:--Test
evenArrayCreation.stg:--Test
every1.stg:-- Sums every other element in a list starting with the first element
every1.stg:-- sumEveryOther :: Int -> List Int -> Int
every1.stg:-- list5: [5,4,3,2,1]
every1.stg:-- Test
every2.stg:-- Sums every other element in a list starting with the second element
every2.stg:-- sumEveryOther :: Int -> List Int -> Int
every2.stg:-- list5: [5,4,3,2,1]
every2.stg:-- Test
exp.stg:-- exponentiate boxed ints
exp.stg:-- exp :: Int -> Int -> Int
exp.stg:-- Test 
fac.stg:--Test
fibonacci.stg:-- creates array of specified size with fibonacci numbers in reverse order
fibonacci.stg:-- [?,.....,3,2,1,1,0,nil]
fibonacci.stg:-- createFibArray :: Int -> Int -> Int ->  List Int -> List Int
fibonacci.stg:-- initializes array creation
fibonacci.stg:-- cBFArr :: Int -> List Int
fibonacci.stg:--Test
fibs2.stg:-- classic fib
fibs.stg:-- fibs = 1 : 1 : zipWith (+) fibs (tail fibs)
fibs.stg:-- test sum
firstHalf.stg:-- firstHalf a list, rounding down
firstHalf.stg:-- firstHalf :: List a -> List a
firstHalf.stg:--list5: [5,4,3,2,1]
firstHalf.stg:--test
fourth.stg:--gets fourth element in a list
fourth.stg:--fourth :: List a -> a
fourth.stg:--list5: [5,4,3,2,1]
fourth.stg:--test   
gcd.stg:--GCD of unboxed ints
gcd.stg:--gcdNew# :: Int# -> Int# -> Int#
gcd.stg:--GCD of boxed ints
gcd.stg:--gcdNew :: Int -> Int -> Int
gcd.stg:--Test
graph10.stg:--Test
graph1.stg:--Test
graph2.stg:--Test
graph3.stg:--Test
graph4.stg:--Test
graph5.stg:--Test
graph6.stg:--Test
graph7.stg:--Test
graph8.stg:--Test
graph9.stg:--Test
hanoi.stg:-- solves tower of hanoi puzzle
hanoi.stg:-- hanoi :: Int -> Tupl3 (List Int) -> Tupl3 (List Int) 
hanoi.stg:-- list5: [5,4,3,2,1]
heapsort10.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort10.stg:--and :: Bool -> Bool -> Bool
heapsort10.stg:--max :: Int -> Int -> Int 
heapsort10.stg:--tHeight :: BTree -> Int -> Int 
heapsort10.stg:--sinkRight :: BTree -> BTree
heapsort10.stg:--sinkLeft :: BTree -> BTree
heapsort10.stg:--findHeight :: BTree -> Int 
heapsort10.stg:--canSinkLeft :: BTree -> Bool
heapsort10.stg:--canSinkRight :: BTree -> Bool
heapsort10.stg:--canSink :: BTree -> Bool
heapsort10.stg:--getLeft :: BTree -> Int
heapsort10.stg:--Test
heapsort11.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort11.stg:--and :: Bool -> Bool -> Bool
heapsort11.stg:--max :: Int -> Int -> Int 
heapsort11.stg:--tHeight :: BTree -> Int -> Int 
heapsort11.stg:--sinkRight :: BTree -> BTree
heapsort11.stg:--sinkLeft :: BTree -> BTree
heapsort11.stg:--findHeight :: BTree -> Int 
heapsort11.stg:--canSinkLeft :: BTree -> Bool
heapsort11.stg:--canSinkRight :: BTree -> Bool
heapsort11.stg:--canSink :: BTree -> Bool
heapsort11.stg:--getLeft :: BTree -> Int
heapsort11.stg:--getRight :: BTree -> Int
heapsort11.stg:--Test
heapsort12.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort12.stg:--and :: Bool -> Bool -> Bool
heapsort12.stg:--max :: Int -> Int -> Int 
heapsort12.stg:--tHeight :: BTree -> Int -> Int 
heapsort12.stg:--sinkRight :: BTree -> BTree
heapsort12.stg:--sinkLeft :: BTree -> BTree
heapsort12.stg:--findHeight :: BTree -> Int 
heapsort12.stg:--canSinkLeft :: BTree -> Bool
heapsort12.stg:--canSinkRight :: BTree -> Bool
heapsort12.stg:--canSink :: BTree -> Bool
heapsort12.stg:--getLeft :: BTree -> Int
heapsort12.stg:--getRight :: BTree -> Int
heapsort12.stg:--sink :: BTree -> BTree 
heapsort12.stg:--Test
heapsort13.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort13.stg:--and :: Bool -> Bool -> Bool
heapsort13.stg:--max :: Int -> Int -> Int 
heapsort13.stg:--tHeight :: BTree -> Int -> Int 
heapsort13.stg:--sinkRight :: BTree -> BTree
heapsort13.stg:--sinkLeft :: BTree -> BTree
heapsort13.stg:--findHeight :: BTree -> Int 
heapsort13.stg:--canSinkLeft :: BTree -> Bool
heapsort13.stg:--canSinkRight :: BTree -> Bool
heapsort13.stg:--canSink :: BTree -> Bool
heapsort13.stg:--getLeft :: BTree -> Int
heapsort13.stg:--getRight :: BTree -> Int
heapsort13.stg:--sink :: BTree -> BTree 
heapsort13.stg:--isLeaf :: BTree -> Bool
heapsort13.stg:--Test
heapsort14.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort14.stg:--and :: Bool -> Bool -> Bool
heapsort14.stg:--max :: Int -> Int -> Int 
heapsort14.stg:--tHeight :: BTree -> Int -> Int 
heapsort14.stg:--sinkRight :: BTree -> BTree
heapsort14.stg:--sinkLeft :: BTree -> BTree
heapsort14.stg:--findHeight :: BTree -> Int 
heapsort14.stg:--canSinkLeft :: BTree -> Bool
heapsort14.stg:--canSinkRight :: BTree -> Bool
heapsort14.stg:--canSink :: BTree -> Bool
heapsort14.stg:--getLeft :: BTree -> Int
heapsort14.stg:--getRight :: BTree -> Int
heapsort14.stg:--sink :: BTree -> BTree 
heapsort14.stg:--isLeaf :: BTree -> Bool
heapsort14.stg:--getLeaf :: BTree -> Int 
heapsort14.stg:--Test
heapsort15.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort15.stg:--and :: Bool -> Bool -> Bool
heapsort15.stg:--max :: Int -> Int -> Int 
heapsort15.stg:--tHeight :: BTree -> Int -> Int 
heapsort15.stg:--sinkRight :: BTree -> BTree
heapsort15.stg:--sinkLeft :: BTree -> BTree
heapsort15.stg:--findHeight :: BTree -> Int 
heapsort15.stg:--canSinkLeft :: BTree -> Bool
heapsort15.stg:--canSinkRight :: BTree -> Bool
heapsort15.stg:--canSink :: BTree -> Bool
heapsort15.stg:--getLeft :: BTree -> Int
heapsort15.stg:--getRight :: BTree -> Int
heapsort15.stg:--sink :: BTree -> BTree 
heapsort15.stg:--isLeaf :: BTree -> Bool
heapsort15.stg:--getLeaf :: BTree -> Int 
heapsort15.stg:--removeMax :: BTree -> BTree
heapsort15.stg:--Test
heapsort16.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort16.stg:--and :: Bool -> Bool -> Bool
heapsort16.stg:--max :: Int -> Int -> Int 
heapsort16.stg:--tHeight :: BTree -> Int -> Int 
heapsort16.stg:--sinkRight :: BTree -> BTree
heapsort16.stg:--sinkLeft :: BTree -> BTree
heapsort16.stg:--findHeight :: BTree -> Int 
heapsort16.stg:--canSinkLeft :: BTree -> Bool
heapsort16.stg:--canSinkRight :: BTree -> Bool
heapsort16.stg:--canSink :: BTree -> Bool
heapsort16.stg:--getLeft :: BTree -> Int
heapsort16.stg:--getRight :: BTree -> Int
heapsort16.stg:--sink :: BTree -> BTree 
heapsort16.stg:--isLeaf :: BTree -> Bool
heapsort16.stg:--getLeaf :: BTree -> Int 
heapsort16.stg:--removeMax :: BTree -> BTree
heapsort16.stg:--sortHeap :: BTree Int -> List Int
heapsort16.stg:--Test
heapsort17.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort17.stg:--and :: Bool -> Bool -> Bool
heapsort17.stg:--max :: Int -> Int -> Int 
heapsort17.stg:--tHeight :: BTree -> Int -> Int 
heapsort17.stg:--sinkRight :: BTree -> BTree
heapsort17.stg:--sinkLeft :: BTree -> BTree
heapsort17.stg:--findHeight :: BTree -> Int 
heapsort17.stg:--canSinkLeft :: BTree -> Bool
heapsort17.stg:--canSinkRight :: BTree -> Bool
heapsort17.stg:--canSink :: BTree -> Bool
heapsort17.stg:--getLeft :: BTree -> Int
heapsort17.stg:--getRight :: BTree -> Int
heapsort17.stg:--sink :: BTree -> BTree 
heapsort17.stg:--isLeaf :: BTree -> Bool
heapsort17.stg:--getLeaf :: BTree -> Int 
heapsort17.stg:--removeMax :: BTree -> BTree
heapsort17.stg:--sortHeap :: BTree Int -> List Int
heapsort17.stg:--insert1 :: BTree Int -> Int -> BTree Int 
heapsort17.stg:--Test
heapsort18.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort18.stg:--and :: Bool -> Bool -> Bool
heapsort18.stg:--max :: Int -> Int -> Int 
heapsort18.stg:--tHeight :: BTree -> Int -> Int 
heapsort18.stg:--sinkRight :: BTree -> BTree
heapsort18.stg:--sinkLeft :: BTree -> BTree
heapsort18.stg:--findHeight :: BTree -> Int 
heapsort18.stg:--canSinkLeft :: BTree -> Bool
heapsort18.stg:--canSinkRight :: BTree -> Bool
heapsort18.stg:--canSink :: BTree -> Bool
heapsort18.stg:--getLeft :: BTree -> Int
heapsort18.stg:--getRight :: BTree -> Int
heapsort18.stg:--sink :: BTree -> BTree 
heapsort18.stg:--isLeaf :: BTree -> Bool
heapsort18.stg:--getLeaf :: BTree -> Int 
heapsort18.stg:--removeMax :: BTree -> BTree
heapsort18.stg:--sortHeap :: BTree Int -> List Int
heapsort18.stg:--insert1 :: BTree Int -> Int -> BTree Int 
heapsort18.stg:--insertList :: List Int -> BTree Int -> BTree Int
heapsort18.stg:--heapSort :: List Int -> List Int 
heapsort18.stg:--Test
heapsort2.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort2.stg:--and :: Bool -> Bool -> Bool
heapsort2.stg:--max :: Int -> Int -> Int 
heapsort2.stg:--tHeight :: BTree -> Int -> Int 
heapsort2.stg:--findHeight :: BTree -> Int 		 
heapsort2.stg:--Test
heapsort3.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort3.stg:--and :: Bool -> Bool -> Bool
heapsort3.stg:--max :: Int -> Int -> Int 
heapsort3.stg:--tHeight :: BTree -> Int -> Int 
heapsort3.stg:--findHeight :: BTree -> Int 
heapsort3.stg:--Test
heapsort4.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort4.stg:--and :: Bool -> Bool -> Bool
heapsort4.stg:--max :: Int -> Int -> Int
heapsort4.stg:--tHeight :: BTree -> Int -> Int 
heapsort4.stg:--sinkLeft :: BTree -> BTree 
heapsort4.stg:--findHeight :: BTree -> Int 
heapsort4.stg:--Test
heapsort5.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort5.stg:--and :: Bool -> Bool -> Bool
heapsort5.stg:--max :: Int -> Int -> Int 
heapsort5.stg:--tHeight :: BTree -> Int -> Int 
heapsort5.stg:--sinkLeft :: BTree -> BTree
heapsort5.stg:--findHeight :: BTree -> Int 
heapsort5.stg:--Test
heapsort6.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort6.stg:--and :: Bool -> Bool -> Bool
heapsort6.stg:--max :: Int -> Int -> Int 
heapsort6.stg:--tHeight :: BTree -> Int -> Int 
heapsort6.stg:--sinkRight :: BTree -> BTree
heapsort6.stg:--sinkLeft :: BTree -> BTree
heapsort6.stg:--findHeight :: BTree -> Int 
heapsort6.stg:--Test
heapsort7.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort7.stg:--and :: Bool -> Bool -> Bool
heapsort7.stg:--max :: Int -> Int -> Int 
heapsort7.stg:--tHeight :: BTree -> Int -> Int 
heapsort7.stg:--sinkRight :: BTree -> BTree
heapsort7.stg:--sinkLeft :: BTree -> BTree
heapsort7.stg:--findHeight :: BTree -> Int 
heapsort7.stg:--canSinkLeft :: BTree -> Bool
heapsort7.stg:--Test
heapsort8.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort8.stg:--and :: Bool -> Bool -> Bool
heapsort8.stg:--max :: Int -> Int -> Int 
heapsort8.stg:--tHeight :: BTree -> Int -> Int 
heapsort8.stg:--sinkRight :: BTree -> BTree
heapsort8.stg:--sinkLeft :: BTree -> BTree
heapsort8.stg:--findHeight :: BTree -> Int 
heapsort8.stg:--canSinkLeft :: BTree -> Bool
heapsort8.stg:--canSinkRight :: BTree -> Bool
heapsort8.stg:--Test
heapsort9.stg:--eqBTree :: BTree -> BTree -> Bool
heapsort9.stg:--and :: Bool -> Bool -> Bool
heapsort9.stg:--max :: Int -> Int -> Int 
heapsort9.stg:--tHeight :: BTree -> Int -> Int 
heapsort9.stg:--sinkRight :: BTree -> BTree
heapsort9.stg:--sinkLeft :: BTree -> BTree
heapsort9.stg:--findHeight :: BTree -> Int 
heapsort9.stg:--canSinkLeft :: BTree -> Bool
heapsort9.stg:--canSinkRight :: BTree -> Bool
heapsort9.stg:--canSink :: BTree -> Bool
heapsort9.stg:--Test
id16.stg:-- type inference exponential in number of ids
id1.stg:-- type inference exponential in number of ids
id2.stg:-- type inference exponential in number of ids
insertionSort.stg:--Test
last.stg:--last element in a list
last.stg:--last :: List a -> a
last.stg:--list3: [3,2,1]	      	
last.stg:--test 
list.stg:-- test head
listSum.stg:--Sum of a list of integers
listSum.stg:--listSum :: List Int -> Int
listSum.stg:-- list5: [5,4,3,2,1]
listSum.stg:--Test
map_pap_simple.stg:-- in Haskell: main = head (map const [7,2,1]) 10 
map_pap.stg:-- in Haskell: main = head (map const [7,2,1]) 10 
mergeSort1.stg:-- secondHalf
mergeSort1.stg:-- secondHalf a list, rounding up
mergeSort1.stg:-- secondHalf :: List a -> List a
mergeSort1.stg:-- firstHalf
mergeSort1.stg:-- firstHalf a list, rounding up
mergeSort1.stg:-- firstHalf :: List a -> List a
mergeSort1.stg:--merge :: List a -> List a -> a
mergeSort1.stg:--Test
mergeSort2.stg:-- secondHalf
mergeSort2.stg:-- secondHalf a list, rounding up
mergeSort2.stg:-- secondHalf :: List a -> List a
mergeSort2.stg:-- firstHalf
mergeSort2.stg:-- firstHalf a list, rounding up
mergeSort2.stg:-- firstHalf :: List a -> List a
mergeSort2.stg:--merge :: List a -> List a -> a
mergeSort2.stg:--Test
mergeSort3.stg:-- secondHalf
mergeSort3.stg:-- secondHalf a list, rounding up
mergeSort3.stg:-- secondHalf :: List a -> List a
mergeSort3.stg:-- firstHalf
mergeSort3.stg:-- firstHalf a list, rounding up
mergeSort3.stg:-- firstHalf :: List a -> List a
mergeSort3.stg:--merge :: List a -> List a -> List a
mergeSort3.stg:--Test
mergeSort4.stg:-- secondHalf
mergeSort4.stg:-- secondHalf a list, rounding up
mergeSort4.stg:-- secondHalf :: List a -> List a
mergeSort4.stg:-- firstHalf
mergeSort4.stg:-- firstHalf a list, rounding up
mergeSort4.stg:-- firstHalf :: List a -> List a
mergeSort4.stg:--merge :: List a -> List a -> a
mergeSort4.stg:--Test
merge.stg:-- secondHalf
merge.stg:-- secondHalf a list, rounding down
merge.stg:-- secondHalf :: List a -> List a
merge.stg:--merge :: List a -> List a -> a 
merge.stg:--list5: [5,4,3,2,1]
merge.stg:--Test
msort.stg:-- secondHalf
msort.stg:-- secondHalf a list, rounding down
msort.stg:-- secondHalf :: List a -> List a
msort.stg:-- firstHalf
msort.stg:-- firstHalf a list, rounding down
msort.stg:-- firstHalf :: List a -> List a
msort.stg:--merge :: List a -> List a -> a 
msort.stg:-- msort :: Ord a => List a -> List a 
msort.stg:--list5: [5,4,3,2,1]
msort.stg:--Test
naturalArrayCreation1.stg:--Test
naturalArrayCreation.stg:--Test
noNil.stg:-- Check if neither one of two lists is Nil
noNil.stg:-- eqList :: List a -> List a -> Bool
noNil.stg:-- list5: [5,4,3,2,1]
noNil.stg:-- list10: [5,4,3,2,1]
noNil.stg:--Test
nonstrict/repminlist.stg:-- test head
nostrict2/e0ye1ye2n.stg:-- eval to PAP if not STRICT2
not.stg:--Test
nth.stg:-- select nth element of a list
nth.stg:-- numList :: List a -> Int -> a
nth.stg:-- list5: [5,4,3,2,1]
nth.stg:-- Test
oddArrayCreation1.stg:--Test
orderedST10.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST10.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST10.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST10.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST10.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST10.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST10.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST10.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST10.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST10.stg:-- elem :: List Int -> Int -> Bool 
orderedST10.stg:-- removeElem :: List Int -> Int -> List Int
orderedST10.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST10.stg:-- reverse :: List a -> List a -> List a
orderedST10.stg:-- startReverse :: List a -> List a
orderedST10.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST10.stg:-- min :: List (TP2 Int Int) -> Int
orderedST10.stg:-- max :: List (TP2 Int Int) -> Int
orderedST10.stg:-- length1 :: List a -> Int -> Int 
orderedST10.stg:-- getLength :: List a -> Int
orderedST10.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST10.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST10.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST10.stg:-- deleteMax :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST10.stg:-- size1 :: List (TP2 Int Int) -> Int -> Int -> Int 
orderedST10.stg:-- Test
orderedST11.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST11.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST11.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST11.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST11.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST11.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST11.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST11.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST11.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST11.stg:-- elem :: List Int -> Int -> Bool 
orderedST11.stg:-- removeElem :: List Int -> Int -> List Int
orderedST11.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST11.stg:-- reverse :: List a -> List a -> List a
orderedST11.stg:-- startReverse :: List a -> List a
orderedST11.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST11.stg:-- min :: List (TP2 Int Int) -> Int
orderedST11.stg:-- max :: List (TP2 Int Int) -> Int
orderedST11.stg:-- length1 :: List a -> Int -> Int 
orderedST11.stg:-- getLength :: List a -> Int
orderedST11.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST11.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST11.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST11.stg:-- deleteMax :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST11.stg:-- size1 :: List (TP2 Int Int) -> Int -> Int -> Int 
orderedST11.stg:-- half :: List (TP2 Int Int) -> Int
orderedST11.stg:-- Test
orderedST12.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
orderedST12.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST12.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST12.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST12.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST12.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST12.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST12.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST12.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST12.stg:-- elem :: List Int -> Int -> Bool 
orderedST12.stg:-- removeElem :: List Int -> Int -> List Int
orderedST12.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST12.stg:-- reverse :: List a -> List a -> List a
orderedST12.stg:-- startReverse :: List a -> List a
orderedST12.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST12.stg:-- min :: List (TP2 Int Int) -> Int
orderedST12.stg:-- max :: List (TP2 Int Int) -> Int
orderedST12.stg:-- length1 :: List a -> Int -> Int 
orderedST12.stg:-- getLength :: List a -> Int
orderedST12.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST12.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST12.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST12.stg:-- deleteMax :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST12.stg:-- size1 :: List (TP2 Int Int) -> Int -> Int -> Int 
orderedST12.stg:-- half :: List (TP2 Int Int) -> Int
orderedST12.stg:-- Test
orderedST13.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
orderedST13.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST13.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST13.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST13.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST13.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST13.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST13.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST13.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST13.stg:-- elem :: List Int -> Int -> Bool 
orderedST13.stg:-- removeElem :: List Int -> Int -> List Int
orderedST13.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST13.stg:-- reverse :: List a -> List a -> List a
orderedST13.stg:-- startReverse :: List a -> List a
orderedST13.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST13.stg:-- min :: List (TP2 Int Int) -> Int
orderedST13.stg:-- max :: List (TP2 Int Int) -> Int
orderedST13.stg:-- length1 :: List a -> Int -> Int 
orderedST13.stg:-- getLength :: List a -> Int
orderedST13.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST13.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST13.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST13.stg:-- deleteMax :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST13.stg:-- size1 :: List (TP2 Int Int) -> Int -> Int -> Int 
orderedST13.stg:-- half :: List (TP2 Int Int) -> Int
orderedST13.stg:-- Test
orderedST14.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
orderedST14.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST14.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST14.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST14.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST14.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST14.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST14.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST14.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST14.stg:-- elem :: List Int -> Int -> Bool 
orderedST14.stg:-- removeElem :: List Int -> Int -> List Int
orderedST14.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST14.stg:-- reverse :: List a -> List a -> List a
orderedST14.stg:-- startReverse :: List a -> List a
orderedST14.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST14.stg:-- min :: List (TP2 Int Int) -> Int
orderedST14.stg:-- max :: List (TP2 Int Int) -> Int
orderedST14.stg:-- length1 :: List a -> Int -> Int 
orderedST14.stg:-- getLength :: List a -> Int
orderedST14.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST14.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST14.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST14.stg:-- deleteMax :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST14.stg:-- size1 :: List (TP2 Int Int) -> Int -> Int -> Int 
orderedST14.stg:-- half :: List (TP2 Int Int) -> Int
orderedST14.stg:-- getPart :: List a -> Int -> List a
orderedST14.stg:-- firstHalf :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST14.stg:-- Test
orderedST15.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
orderedST15.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST15.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST15.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST15.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST15.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST15.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST15.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST15.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST15.stg:-- elem :: List Int -> Int -> Bool 
orderedST15.stg:-- removeElem :: List Int -> Int -> List Int
orderedST15.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST15.stg:-- reverse :: List a -> List a -> List a
orderedST15.stg:-- startReverse :: List a -> List a
orderedST15.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST15.stg:-- min :: List (TP2 Int Int) -> Int
orderedST15.stg:-- max :: List (TP2 Int Int) -> Int
orderedST15.stg:-- length1 :: List a -> Int -> Int 
orderedST15.stg:-- getLength :: List a -> Int
orderedST15.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST15.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST15.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST15.stg:-- deleteMax :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST15.stg:-- size1 :: List (TP2 Int Int) -> Int -> Int -> Int 
orderedST15.stg:-- half :: List (TP2 Int Int) -> Int
orderedST15.stg:-- getPart :: List a -> Int -> List a
orderedST15.stg:-- takePart :: List a -> Int -> List a
orderedST15.stg:-- firstHalf :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST15.stg:-- secondHalf :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST15.stg:-- Test
orderedST16.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
orderedST16.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST16.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST16.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST16.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST16.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST16.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST16.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST16.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST16.stg:-- elem :: List Int -> Int -> Bool 
orderedST16.stg:-- removeElem :: List Int -> Int -> List Int
orderedST16.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST16.stg:-- reverse :: List a -> List a -> List a
orderedST16.stg:-- startReverse :: List a -> List a
orderedST16.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST16.stg:-- min :: List (TP2 Int Int) -> Int
orderedST16.stg:-- max :: List (TP2 Int Int) -> Int
orderedST16.stg:-- length1 :: List a -> Int -> Int 
orderedST16.stg:-- getLength :: List a -> Int
orderedST16.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST16.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST16.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST16.stg:-- deleteMax :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST16.stg:-- size1 :: List (TP2 Int Int) -> Int -> Int -> Int 
orderedST16.stg:-- half :: List (TP2 Int Int) -> Int
orderedST16.stg:-- getPart :: List a -> Int -> List a
orderedST16.stg:-- takePart :: List a -> Int -> List a
orderedST16.stg:-- firstHalf :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST16.stg:-- secondHalf :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST16.stg:-- binarySearch :: List (TP2 Int Int) -> Int Int
orderedST16.stg:-- Test
orderedST1.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST1.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST1.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST1.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST1.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST1.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST1.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST1.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST1.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST1.stg:-- elem :: List Int -> Int -> Bool 
orderedST1.stg:-- removeElem :: List Int -> Int -> List Int
orderedST1.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST1.stg:-- Test
orderedST2.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST2.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST2.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST2.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST2.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST2.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST2.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST2.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST2.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST2.stg:-- elem :: List Int -> Int -> Bool 
orderedST2.stg:-- removeElem :: List Int -> Int -> List Int
orderedST2.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST2.stg:-- reverse :: List a -> List a -> List a
orderedST2.stg:-- startReverse :: List a -> List a
orderedST2.stg:--floor :: List (TP2 Int Int) -> Int -> Int 
orderedST2.stg:-- Test
orderedST3.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST3.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST3.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST3.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST3.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST3.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST3.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST3.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST3.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST3.stg:-- elem :: List Int -> Int -> Bool 
orderedST3.stg:-- removeElem :: List Int -> Int -> List Int
orderedST3.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST3.stg:-- reverse :: List a -> List a -> List a
orderedST3.stg:-- startReverse :: List a -> List a
orderedST3.stg:--floor :: List (TP2 Int Int) -> Int -> Int 
orderedST3.stg:--min :: List (TP2 Int Int) -> Int
orderedST3.stg:-- Test
orderedST4.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST4.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST4.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST4.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST4.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST4.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST4.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST4.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST4.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST4.stg:-- elem :: List Int -> Int -> Bool 
orderedST4.stg:-- removeElem :: List Int -> Int -> List Int
orderedST4.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST4.stg:-- reverse :: List a -> List a -> List a
orderedST4.stg:-- startReverse :: List a -> List a
orderedST4.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST4.stg:-- min :: List (TP2 Int Int) -> Int
orderedST4.stg:-- max :: List (TP2 Int Int) -> Int
orderedST4.stg:-- Test
orderedST5.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST5.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST5.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST5.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST5.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST5.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST5.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST5.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST5.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST5.stg:-- elem :: List Int -> Int -> Bool 
orderedST5.stg:-- removeElem :: List Int -> Int -> List Int
orderedST5.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST5.stg:-- reverse :: List a -> List a -> List a
orderedST5.stg:-- startReverse :: List a -> List a
orderedST5.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST5.stg:-- min :: List (TP2 Int Int) -> Int
orderedST5.stg:-- max :: List (TP2 Int Int) -> Int
orderedST5.stg:-- length1 :: List a -> Int -> Int 
orderedST5.stg:-- getLength :: List a -> Int
orderedST5.stg:-- Test
orderedST6.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST6.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST6.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST6.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST6.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST6.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST6.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST6.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST6.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST6.stg:-- elem :: List Int -> Int -> Bool 
orderedST6.stg:-- removeElem :: List Int -> Int -> List Int
orderedST6.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST6.stg:-- reverse :: List a -> List a -> List a
orderedST6.stg:-- startReverse :: List a -> List a
orderedST6.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST6.stg:-- min :: List (TP2 Int Int) -> Int
orderedST6.stg:-- max :: List (TP2 Int Int) -> Int
orderedST6.stg:-- length1 :: List a -> Int -> Int 
orderedST6.stg:-- getLength :: List a -> Int
orderedST6.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST6.stg:-- Test
orderedST7.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST7.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST7.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST7.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST7.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST7.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST7.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST7.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST7.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST7.stg:-- elem :: List Int -> Int -> Bool 
orderedST7.stg:-- removeElem :: List Int -> Int -> List Int
orderedST7.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST7.stg:-- reverse :: List a -> List a -> List a
orderedST7.stg:-- startReverse :: List a -> List a
orderedST7.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST7.stg:-- min :: List (TP2 Int Int) -> Int
orderedST7.stg:-- max :: List (TP2 Int Int) -> Int
orderedST7.stg:-- length1 :: List a -> Int -> Int 
orderedST7.stg:-- getLength :: List a -> Int
orderedST7.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST7.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST7.stg:-- Test
orderedST8.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST8.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST8.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST8.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST8.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST8.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST8.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST8.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST8.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST8.stg:-- elem :: List Int -> Int -> Bool 
orderedST8.stg:-- removeElem :: List Int -> Int -> List Int
orderedST8.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST8.stg:-- reverse :: List a -> List a -> List a
orderedST8.stg:-- startReverse :: List a -> List a
orderedST8.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST8.stg:-- min :: List (TP2 Int Int) -> Int
orderedST8.stg:-- max :: List (TP2 Int Int) -> Int
orderedST8.stg:-- length1 :: List a -> Int -> Int 
orderedST8.stg:-- getLength :: List a -> Int
orderedST8.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST8.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST8.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST8.stg:-- Test
orderedST9.stg:-- put :: List Int -> TP2 Int Int -> List Int 
orderedST9.stg:-- get :: List (TP2 Int Int) -> Int -> Int
orderedST9.stg:-- eqTP2 :: TP2 Int Int -> Bool
orderedST9.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
orderedST9.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
orderedST9.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
orderedST9.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
orderedST9.stg:-- size :: List (TP2 Int Int) -> Int 
orderedST9.stg:-- keys :: List (TP2 Int Int) -> List Int
orderedST9.stg:-- elem :: List Int -> Int -> Bool 
orderedST9.stg:-- removeElem :: List Int -> Int -> List Int
orderedST9.stg:-- ceiling :: List (TP2 Int Int) -> Int -> Int 
orderedST9.stg:-- reverse :: List a -> List a -> List a
orderedST9.stg:-- startReverse :: List a -> List a
orderedST9.stg:-- floor :: List (TP2 Int Int) -> Int -> Int 
orderedST9.stg:-- min :: List (TP2 Int Int) -> Int
orderedST9.stg:-- max :: List (TP2 Int Int) -> Int
orderedST9.stg:-- length1 :: List a -> Int -> Int 
orderedST9.stg:-- getLength :: List a -> Int
orderedST9.stg:-- rank :: List (TP2 Int Int) -> Int -> Int
orderedST9.stg:-- select :: List (TP2 Int Int) -> Int -> Int
orderedST9.stg:-- deleteMin :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST9.stg:-- deleteMax :: List (TP2 Int Int) -> List (TP2 Int Int)
orderedST9.stg:-- Test
or.stg:--or :: Bool -> Bool -> Bool
or.stg:--Test
priorityQ10.stg:--Test 
priorityQ4.stg:--Test 
priorityQ5.stg:--Test 
priorityQ6.stg:--Test 
priorityQ7.stg:--Test 
priorityQ8.stg:--Test 
priorityQ9.stg:--Test 
relPrime.stg:--determines if two ints are relatively prime
relPrime.stg:--relPrime :: Int -> Int -> Bool
relPrime.stg:--test
relPrime.stg:--GCD of unboxed ints
relPrime.stg:--gcdNew# :: Int# -> Int# -> Int#
relPrime.stg:--GCD of boxed ints
relPrime.stg:--gcdNew :: Int -> Int -> Int
remove.stg:--removes first occurrence of int from list
remove.stg:--remove :: Int -> List Int -> List Int 
remove.stg:--O(n) time
second2.stg:--second element of a list
second2.stg:--second :: List a -> a
second2.stg:--list3: [3,2,1]
second2.stg:--test second
secondHalf.stg:-- secondHalf
secondHalf.stg:-- secondHalf a list, rounding down
secondHalf.stg:-- secondHalf :: List a -> List a
secondHalf.stg:--list5: [5,4,3,2,1]
secondHalf.stg:--Test
second.stg:--second element in a list
second.stg:--second :: List a -> a
second.stg:--list3: [3,2,1]
second.stg:--test second
selectionSort1.stg:--finds smallest integer in list
selectionSort1.stg:--findSmallest :: List Int -> Int
selectionSort1.stg:--Test
shellSort1.stg:--Test
shellSort2.stg:--Test
shellSort3.stg:-- retrieves value at index of array 
shellSort3.stg:-- index1 :: List a -> Int -> a
shellSort3.stg:--switch1 :: List a -> Int -> Int -> List a
shellSort3.stg:--Test
stack1.stg:--Gets element at top of stack
stack1.stg:--top :: List a -> a
stack1.stg:--Test
stack2.stg:--Gets element at top of stack
stack2.stg:--top :: List a -> a
stack2.stg:--Checks if stack is empty
stack2.stg:--isEmpty :: List a -> Bool
stack2.stg:--Test
stack3.stg:--Gets element at top of stack
stack3.stg:--top :: List a -> a
stack3.stg:--Checks if stack is empty
stack3.stg:--isEmpty :: List a -> Bool
stack3.stg:--Pushes Int into stack
stack3.stg:--push :: List a -> a -> List a
stack3.stg:--Test
stack4.stg:--Gets element at top of stack
stack4.stg:--top :: List a -> a
stack4.stg:--Checks if stack is empty
stack4.stg:--isEmpty :: List a -> Bool
stack4.stg:--Pushes Int into stack
stack4.stg:--push :: List a -> a -> List a
stack4.stg:--Pops Int from stack
stack4.stg:--pop :: List a -> List a
stack4.stg:--Test
stack5.stg:--Gets element at top of stack
stack5.stg:--top :: List a -> a
stack5.stg:--Checks if stack is empty
stack5.stg:--isEmpty :: List a -> Bool
stack5.stg:--Pushes Int into stack
stack5.stg:--push :: List a -> a -> List a
stack5.stg:--Pops Int from stack
stack5.stg:--pop :: List a -> List a
stack5.stg:--Gets size of stack
stack5.stg:--size :: List a -> Int 
stack5.stg:--Test
stack6.stg:--Gets element at top of stack
stack6.stg:--top :: List a -> a
stack6.stg:--Checks if stack is empty
stack6.stg:--isEmpty :: List a -> Bool
stack6.stg:--Pushes Int into stack
stack6.stg:--push :: List a -> a -> List a
stack6.stg:--Pops Int from stack
stack6.stg:--pop :: List a -> List a
stack6.stg:--Gets size of stack
stack6.stg:--size :: List a -> Int 
stack6.stg:--Reverses Stack
stack6.stg:--reverse :: List a -> List a -> List a
stack6.stg:--Test
sum.stg:--Taking sum of a list of numbers with prelude 'sum' function.
sum.stg:-- list5: [5,4,3,2,1]
sum.stg:--Test
symbolT10.stg:-- put :: List Int -> TP2 Int Int -> List Int 
symbolT10.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT10.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT10.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT10.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
symbolT10.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
symbolT10.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
symbolT10.stg:-- size :: List (TP2 Int Int) -> Int 
symbolT10.stg:-- keys :: List (TP2 Int Int) -> List Int
symbolT10.stg:-- elem :: List Int -> Int -> Bool 
symbolT10.stg:-- removeElem :: List Int -> Int -> List Int
symbolT10.stg:-- eqSet :: List Int -> List Int -> Bool
symbolT10.stg:-- Test
symbolT1.stg:-- put :: List Int -> TP2 Int Int -> List Int 
symbolT1.stg:-- eqTP2 :: TP2 Int Int -> TP2 Int Int -> Bool
symbolT1.stg:-- eqKeyList :: List (TP2 Int Int) -> List (TP2 Int Int) -> Bool
symbolT1.stg:-- Test
symbolT2.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
symbolT2.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT2.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT2.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT2.stg:-- Test
symbolT3.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int) 
symbolT3.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT3.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT3.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT3.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
symbolT3.stg:-- Test
symbolT4.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
symbolT4.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT4.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT4.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT4.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
symbolT4.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
symbolT4.stg:-- Test
symbolT5.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
symbolT5.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT5.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT5.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT5.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
symbolT5.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
symbolT5.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
symbolT5.stg:-- Test
symbolT6.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int) 
symbolT6.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT6.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT6.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT6.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
symbolT6.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
symbolT6.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
symbolT6.stg:-- size :: List (TP2 Int Int) -> Int 
symbolT6.stg:-- Test
symbolT7.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int) 
symbolT7.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT7.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT7.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT7.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
symbolT7.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
symbolT7.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
symbolT7.stg:-- size :: List (TP2 Int Int) -> Int 
symbolT7.stg:-- keys :: List (TP2 Int Int) -> List Int
symbolT7.stg:-- Test
symbolT8.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int)
symbolT8.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT8.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT8.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT8.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
symbolT8.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
symbolT8.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
symbolT8.stg:-- size :: List (TP2 Int Int) -> Int 
symbolT8.stg:-- keys :: List (TP2 Int Int) -> List Int
symbolT8.stg:-- elem :: List Int -> Int -> Bool 
symbolT8.stg:-- Test
symbolT9.stg:-- put :: List (TP2 Int Int) -> TP2 Int Int -> List (TP2 Int Int) 
symbolT9.stg:-- get :: List (TP2 Int Int) -> Int -> Int
symbolT9.stg:-- eqTP2 :: TP2 Int Int -> Bool
symbolT9.stg:-- eqKeyList :: List (TP2 Int Int) -> Bool
symbolT9.stg:-- delete :: List (TP2 Int Int) -> Int -> List (TP2 Int Int)
symbolT9.stg:-- contains :: List (TP2 Int Int) -> Int -> Bool
symbolT9.stg:-- isEmpty :: List (TP2 Int Int) -> Bool
symbolT9.stg:-- size :: List (TP2 Int Int) -> Int 
symbolT9.stg:-- keys :: List (TP2 Int Int) -> List Int
symbolT9.stg:-- elem :: List Int -> Int -> Bool 
symbolT9.stg:-- removeElem :: List Int -> Int -> List Int
symbolT9.stg:-- Test
take.stg:-- test head
third.stg:--third element in a list
third.stg:--third :: List a -> a
third.stg:--list3: [3,2,1]
third.stg:--test 
threeSort.stg:--sort three integers in a triple
threeSort.stg:--threeSort :: Tupl3 Int Int Int -> Tupl3 Int Int Int 
threeSort.stg:--Test
tree.stg:-- test left
ubool.stg:-- this illustrates why either B = B Int# or having "deriving(Eq)" is a good idea
ufac.stg:-- unboxed fac 
ufac.stg:--Test
zipWith.stg:-- test sum
