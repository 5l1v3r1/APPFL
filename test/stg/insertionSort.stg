sort = FUN(xs ->
              case xs of
                _scrt0 {
                  Nil -> nil;
                  Cons h1 t1 -> let {
                                  q = THUNK(sort t1);
                                  s = CON(Cons h1 q);
                                  r = THUNK(sort1 s)}
                                in r });

sort1 = FUN(xs ->
               case xs of
                 _scrt3 {
                   Nil -> xs;
                   Cons h1 t1 -> case t1 of
                                   _scrt2 {
                                     Nil -> xs;
                                     Cons h2 t2 -> case intLE h1 h2 of
                                                     _scrt1 {
                                                       True -> xs;
                                                       False -> let {
                                                                  q = CON(Cons h1 t2);
                                                                  r = THUNK(sort1 q);
                                                                  s = CON(Cons h2 r)}
                                                                in s } } });

list0 = THUNK(nil);

list1 = CON(Cons two list0);

list2 = CON(Cons three list1);

list3 = CON(Cons one list2);

list4 = CON(Cons two list3);

list5 = CON(Cons five list4);

list6 = THUNK(nil);

list7 = CON(Cons five list6);

list8 = CON(Cons three list7);

list9 = CON(Cons two list8);

list10 = CON(Cons two list9);

list11 = CON(Cons one list10);

--Test
result = THUNK(list11);

output = THUNK(sort list5);

main = THUNK(eqList result output);

