-- secondHalf
-- secondHalf a list, rounding up
-- secondHalf :: List a -> List a
secondHalf = FUN(xs ->
                    let {
                      l = THUNK(length xs);
                      a = THUNK(divInt l two);
                      final = THUNK(drop a xs)}
                    in final);

-- firstHalf
-- firstHalf a list, rounding up
-- firstHalf :: List a -> List a
firstHalf = FUN(xs ->
                   let {
                     l = THUNK(length xs);
                     a = THUNK(divInt l two);
                     final = THUNK(take a xs)}
                   in final);

--merge :: List a -> List a -> a
merge = FUN(xs ys ->
                  case xs of
                    _scrt2 {
                      Nil -> ys;
                      Cons h1 t1 -> case ys of
                                      _scrt1 {
                                        Nil -> xs;
                                        Cons h2 t2 -> let {
                                                        a = THUNK(intLE h2 h1)}
                                                      in case a of
                                                           _scrt0 {
                                                             True -> let {
                                                                       b = THUNK(merge xs t2);
                                                                       c = CON(Cons h2 b)}
                                                                     in c;
                                                             False -> let {
                                                                        b = THUNK(merge t1 ys);
                                                                        c = CON(Cons h1 b)}
                                                                      in c } } });

mergeSort = FUN(xs ->
                   let {
                     w = THUNK(length xs)}
                   in case eqInt w one of
                        _scrt3 {
                          True -> xs;
                          False -> let {
                                     q = THUNK(firstHalf xs);
                                     q1 = THUNK(mergeSort q);
                                     r = THUNK(secondHalf xs);
                                     r1 = THUNK(mergeSort r);
                                     s = THUNK(merge q1 r1)}
                                   in s });

list7 = CON(Cons three list6);

list6 = CON(Cons one list5);

list5 = CON(Cons one list4);

list4 = CON(Cons two list3);

list3 = CON(Cons three list2);

list2 = CON(Cons four list1);

list1 = CON(Cons five nil);

list10 = CON(Cons one list11);

list11 = CON(Cons one list12);

list12 = CON(Cons two list13);

list13 = CON(Cons three list14);

list14 = CON(Cons three list15);

list15 = CON(Cons four list16);

list16 = CON(Cons five nil);

list21 = CON(Cons two list22);

list22 = CON(Cons three list23);

list23 = CON(Cons four list24);

list24 = CON(Cons five nil);

--Test
result = THUNK(secondHalf list7);

output = THUNK(list21);

main = THUNK(eqList result output);

