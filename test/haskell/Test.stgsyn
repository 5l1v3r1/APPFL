(StgNonRec)
  Test.main =
  (CONish) GHC.Types.True []
  Worker/Wrapper: GHC.Types.True
(StgNonRec)
  APPFL.Base.quotRemInt =
  (FUN)
  [ds ,ds1B]
    (Case) (App) ds = wildC
      (AlgAlt)
        (DataAlt) APPFL.Types.I# x1D
          -> (Case) (App) ds1B = wild1E
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# yF
                   -> (Case) (App) APPFL.Prim.quotRemInt# x1D yF = ds2G
                        (UbxTupAlt2)
                          (DataAlt) APPFL.Tuple.UTP2 ipvH ipv1I
                            -> (Case) (ConApp) APPFL.Tuple.UTP2 [ipvH ,ipv1I] = wild2J
                                 (UbxTupAlt2)
                                   (DataAlt) APPFL.Tuple.UTP2 qK rL
                                     -> (Let) let
                                          (StgNonRec)
                                            satM =
                                            (CONish) APPFL.Types.I# [rL]
                                            Worker/Wrapper: APPFL.Types.I#
                                        in (Let) let
                                             (StgNonRec)
                                               satN =
                                               (CONish) APPFL.Types.I# [qK]
                                               Worker/Wrapper: APPFL.Types.I#
                                           in (ConApp) APPFL.Tuple.TP2 [satN ,satM]
(StgNonRec)
  APPFL.Base.modInt =
  (FUN)
  [dsO ,ds1P]
    (Case) (App) dsO = wildQ
      (AlgAlt)
        (DataAlt) APPFL.Types.I# x1R
          -> (Case) (App) ds1P = wild1S
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# yT
                   -> (Case) (App) APPFL.Classes.modInt# x1R yT = wild2U
                        (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Types.I# [wild2U]
(StgNonRec)
  APPFL.Base.divInt =
  (FUN)
  [dsV ,ds1W]
    (Case) (App) dsV = wildX
      (AlgAlt)
        (DataAlt) APPFL.Types.I# x1Y
          -> (Case) (App) ds1W = wild1Z
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# ya
                   -> (Case) (App) APPFL.Classes.divInt# x1Y ya = wild2b
                        (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Types.I# [wild2b]
(StgNonRec)
  APPFL.Base.remInt =
  (FUN)
  [etac ,eta1d]
    (Case) (App) etac = wilde
      (AlgAlt)
        (DataAlt) APPFL.Types.I# x1f
          -> (Case) (App) eta1d = wild1g
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# yh
                   -> (Case) (App) APPFL.Prim.%# x1f yh = wild2i
                        (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Types.I# [wild2i]
(StgNonRec)
  APPFL.Base.quotInt =
  (FUN)
  [etaj ,eta1k]
    (Case) (App) etaj = wildl
      (AlgAlt)
        (DataAlt) APPFL.Types.I# x1m
          -> (Case) (App) eta1k = wild1n
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# yo
                   -> (Case) (App) APPFL.Prim./# x1m yo = wild2p
                        (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Types.I# [wild2p]
(StgNonRec)
  APPFL.Base.otherwise =
  (CONish) GHC.Types.True []
  Worker/Wrapper: GHC.Types.True
(StgNonRec)
  APPFL.Base.ifThenElse =
  (FUN)
  [bq ,tr ,es]
    (Case) (App) bq = wildt
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) es
        (DataAlt) GHC.Types.True -> (App) tr
(StgNonRec)
  APPFL.Base.divModInt# =
  (FUN)
  [x#u ,y#v]
    (Let) let
      (StgNonRec)
        satw =
        (THUNK)
          (Case) (Op) (Prim) <# [y#v ,(MachInt) 0] = satx
            (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# satx
    in (Let) let
         (StgNonRec)
           saty =
           (THUNK)
             (Case) (Op) (Prim) ># [x#u ,(MachInt) 0] = satz
               (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# satz
       in (Case) (App) APPFL.Classes.&& saty satw = wild0
            (AlgAlt)
              (DataAlt) GHC.Types.False
                -> (Let) let
                     (StgNonRec)
                       sat1 =
                       (THUNK)
                         (Case) (Op) (Prim) ># [y#v ,(MachInt) 0] = sat2
                           (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# sat2
                   in (Let) let
                        (StgNonRec)
                          sat3 =
                          (THUNK)
                            (Case) (Op) (Prim) <# [x#u ,(MachInt) 0] = sat4
                              (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# sat4
                      in (Case) (App) APPFL.Classes.&& sat3 sat1 = wild15
                           (AlgAlt)
                             (DataAlt) GHC.Types.False -> (App) APPFL.Prim.quotRemInt# x#u y#v
                             (DataAlt) GHC.Types.True
                               -> (Case) (Op) (Prim) +# [x#u ,(MachInt) 1] = sat6
                                    (PrimAlt)
                                      (DEFAULT) _
                                        -> (Case) (App) APPFL.Prim.quotRemInt# sat6 y#v = ds7
                                             (UbxTupAlt2)
                                               (DataAlt) APPFL.Tuple.UTP2 ipv8 ipv19
                                                 -> (Case) (ConApp) APPFL.Tuple.UTP2 [ipv8 ,ipv19] = wild2-
                                                      (UbxTupAlt2)
                                                        (DataAlt) APPFL.Tuple.UTP2 q_ rAB
                                                          -> (Case) (Op) (Prim) +# [rAB ,y#v] = satBB
                                                               (PrimAlt)
                                                                 (DEFAULT) _
                                                                   -> (Case) (Op) (Prim) -# [satBB ,(MachInt) 1] = satCB
                                                                        (PrimAlt)
                                                                          (DEFAULT) _
                                                                            -> (Case) (Op) (Prim) -# [q_ ,(MachInt) 1] = satDB
                                                                                 (PrimAlt)
                                                                                   (DEFAULT) _
                                                                                     -> (ConApp) APPFL.Tuple.UTP2 [satDB ,satCB]
              (DataAlt) GHC.Types.True
                -> (Case) (Op) (Prim) -# [x#u ,(MachInt) 1] = satEB
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) APPFL.Prim.quotRemInt# satEB y#v = dsFB
                              (UbxTupAlt2)
                                (DataAlt) APPFL.Tuple.UTP2 ipvGB ipv1HB
                                  -> (Case) (ConApp) APPFL.Tuple.UTP2 [ipvGB ,ipv1HB] = wild1IB
                                       (UbxTupAlt2)
                                         (DataAlt) APPFL.Tuple.UTP2 qJB rKB
                                           -> (Case) (Op) (Prim) +# [rKB ,y#v] = satLB
                                                (PrimAlt)
                                                  (DEFAULT) _
                                                    -> (Case) (Op) (Prim) +# [satLB ,(MachInt) 1] = satMB
                                                         (PrimAlt)
                                                           (DEFAULT) _
                                                             -> (Case) (Op) (Prim) -# [qJB ,(MachInt) 1] = satNB
                                                                  (PrimAlt)
                                                                    (DEFAULT) _
                                                                      -> (ConApp) APPFL.Tuple.UTP2 [satNB ,satMB]
(StgNonRec)
  APPFL.Base.divModInt =
  (FUN)
  [dsOB ,ds1PB]
    (Case) (App) dsOB = wildQB
      (AlgAlt)
        (DataAlt) APPFL.Types.I# x1RB
          -> (Case) (App) ds1PB = wild1SB
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# yTB
                   -> (Case) (App) APPFL.Base.divModInt# x1RB yTB = ds2UB
                        (UbxTupAlt2)
                          (DataAlt) APPFL.Tuple.UTP2 ipvVB ipv1WB
                            -> (Case) (ConApp) APPFL.Tuple.UTP2 [ipvVB ,ipv1WB] = wild2XB
                                 (UbxTupAlt2)
                                   (DataAlt) APPFL.Tuple.UTP2 qYB rZB
                                     -> (Let) let
                                          (StgNonRec)
                                            sataB =
                                            (CONish) APPFL.Types.I# [rZB]
                                            Worker/Wrapper: APPFL.Types.I#
                                        in (Let) let
                                             (StgNonRec)
                                               satbB =
                                               (CONish) APPFL.Types.I# [qYB]
                                               Worker/Wrapper: APPFL.Types.I#
                                           in (ConApp) APPFL.Tuple.TP2 [satbB ,sataB]
(StgRec)
  xcB =
  (THUNK) (App) xcB
(StgNonRec)
  APPFL.Base._dummy =
  (THUNK) (App) xcB
(StgNonRec)
  APPFL.Base.fromInteger =
  (THUNK) (App) xcB
(StgNonRec)
  APPFL.Num.mulInt =
  (FUN)
  [dsdB ,ds1eB]
    (Case) (App) dsdB = wildfB
      (AlgAlt)
        (DataAlt) APPFL.Types.I# a#gB
          -> (Case) (App) ds1eB = wild1hB
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# b#iB
                   -> (Case) (Op) (Prim) *# [a#gB ,b#iB] = satjB
                        (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Types.I# [satjB]
(StgNonRec)
  APPFL.Num.subInt =
  (FUN)
  [dskB ,ds1lB]
    (Case) (App) dskB = wildmB
      (AlgAlt)
        (DataAlt) APPFL.Types.I# a#nB
          -> (Case) (App) ds1lB = wild1oB
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# b#pB
                   -> (Case) (Op) (Prim) -# [a#nB ,b#pB] = satqB
                        (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Types.I# [satqB]
(StgNonRec)
  APPFL.Num.addInt =
  (FUN)
  [dsrB ,ds1sB]
    (Case) (App) dsrB = wildtB
      (AlgAlt)
        (DataAlt) APPFL.Types.I# a#uB
          -> (Case) (App) ds1sB = wild1vB
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# b#wB
                   -> (Case) (Op) (Prim) +# [a#uB ,b#wB] = satxB
                        (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Types.I# [satxB]
(StgNonRec)
  APPFL.Num.negate =
  (FUN)
  [dsyB]
    (Case) (App) dsyB = wildzB
      (AlgAlt)
        (DataAlt) APPFL.Types.I# i#0B
          -> (Case) (Op) (Prim) negateInt# [i#0B] = sat1B
               (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Types.I# [sat1B]
(StgNonRec)
  APPFL.Num.% =
  (THUNK) (App) APPFL.Base.remInt
(StgNonRec)
  APPFL.Num.mod =
  (THUNK) (App) APPFL.Base.remInt
(StgNonRec)
  APPFL.Num.* =
  (FUN)
  [eta2B ,eta3B]
    (App) APPFL.Num.mulInt eta2B eta3B
(StgNonRec)
  APPFL.Num./ =
  (THUNK) (App) APPFL.Base.quotInt
(StgNonRec)
  APPFL.Num.div =
  (THUNK) (App) APPFL.Base.quotInt
(StgNonRec)
  APPFL.Num.- =
  (FUN)
  [eta2B ,eta3B]
    (App) APPFL.Num.subInt eta2B eta3B
(StgNonRec)
  APPFL.Num.+ =
  (FUN)
  [eta2B ,eta3B]
    (App) APPFL.Num.addInt eta2B eta3B
(StgNonRec)
  APPFL.Types.isTrue# =
  (FUN)
  [ds4B]
    (Case) (App) ds4B = ds15B
      (PrimAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (LitAlt) (MachInt) 1 -> (ConApp) GHC.Types.True []
(StgNonRec)
  APPFL.Types.Cons =
  (FUN)
  [eta2B ,eta3B]
    (ConApp) APPFL.Types.Cons [eta2B ,eta3B]
(StgNonRec)
  APPFL.Types.Nil =
  (CONish) APPFL.Types.Nil []
  Worker/Wrapper: APPFL.Types.Nil
(StgNonRec)
  APPFL.Types.Unit =
  (CONish) APPFL.Types.Unit []
  Worker/Wrapper: APPFL.Types.Unit
(StgNonRec)
  APPFL.Types.I# =
  (FUN)
  [eta3B]
    (ConApp) APPFL.Types.I# [eta3B]
(StgNonRec)
  APPFL.Types.False =
  (CONish) APPFL.Types.False []
  Worker/Wrapper: APPFL.Types.False
(StgNonRec)
  APPFL.Types.True =
  (CONish) APPFL.Types.True []
  Worker/Wrapper: APPFL.Types.True
(StgRec)
  APPFL.Prim.imin# =
  (THUNK) (App) x6B
  x6B =
  (THUNK) (App) APPFL.Prim.imin#
(StgRec)
  APPFL.Prim.imax# =
  (THUNK) (App) x17B
  x17B =
  (THUNK) (App) APPFL.Prim.imax#
(StgNonRec)
  APPFL.Prim.ineg# =
  (FUN)
  [eta3B]
    (Op) (Prim) negateInt# [eta3B]
(StgNonRec)
  APPFL.Prim./# =
  (FUN)
  [eta2B ,eta3B]
    (Op) (Prim) quotInt# [eta2B ,eta3B]
(StgNonRec)
  APPFL.Prim.%# =
  (FUN)
  [eta2B ,eta3B]
    (Op) (Prim) remInt# [eta2B ,eta3B]
(StgNonRec)
  APPFL.Prim.quotRemInt# =
  (FUN)
  [a8B ,b9B]
    (Case) (Op) (Prim) quotInt# [a8B ,b9B] = q-B
      (PrimAlt)
        (DEFAULT) _
          -> (Case) (Op) (Prim) remInt# [a8B ,b9B] = r_B
               (PrimAlt) (DEFAULT) _ -> (ConApp) APPFL.Tuple.UTP2 [q-B ,r_B]
(StgNonRec)
  APPFL.Classes.not =
  (FUN)
  [dsAC]
    (Case) (App) dsAC = wildBC
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  APPFL.Classes.|| =
  (FUN)
  [dsCC ,ds1DC]
    (Case) (App) dsCC = wildEC
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) ds1DC
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.True []
(StgNonRec)
  APPFL.Classes.&& =
  (FUN)
  [dsFC ,xGC]
    (Case) (App) dsFC = wildHC
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.True -> (App) xGC
(StgNonRec)
  APPFL.Classes.divInt# =
  (FUN)
  [x#IC ,y#JC]
    (LetNE) let
      (StgNonRec)
        $jKC =
        (FUN)
        [wLC]
          (Case) (Op) (Prim) <# [x#IC ,(MachInt) 0] = satMC
            (PrimAlt)
              (DEFAULT) _
                -> (Case) (App) APPFL.Types.isTrue# satMC = wildNC
                     (AlgAlt)
                       (DataAlt) GHC.Types.False -> (Op) (Prim) quotInt# [x#IC ,y#JC]
                       (DataAlt) GHC.Types.True
                         -> (Case) (Op) (Prim) ># [y#JC ,(MachInt) 0] = satOC
                              (PrimAlt)
                                (DEFAULT) _
                                  -> (Case) (App) APPFL.Types.isTrue# satOC = wild1PC
                                       (AlgAlt)
                                         (DataAlt) GHC.Types.False
                                           -> (Op) (Prim) quotInt# [x#IC ,y#JC]
                                         (DataAlt) GHC.Types.True
                                           -> (Case) (Op) (Prim) +# [x#IC ,(MachInt) 1] = satQC
                                                (PrimAlt)
                                                  (DEFAULT) _
                                                    -> (Case) (Op) (Prim) quotInt# [satQC ,y#JC] = wild2RC
                                                         (PrimAlt)
                                                           (DEFAULT) _
                                                             -> (Op) (Prim) -# [wild2RC ,(MachInt) 1]
    in (Case) (Op) (Prim) ># [x#IC ,(MachInt) 0] = satSC
         (PrimAlt)
           (DEFAULT) _
             -> (Case) (App) APPFL.Types.isTrue# satSC = wildTC
                  (AlgAlt)
                    (DataAlt) GHC.Types.False -> (App) $jKC stg_case_not_exhaustive
                    (DataAlt) GHC.Types.True
                      -> (Case) (Op) (Prim) <# [y#JC ,(MachInt) 0] = satUC
                           (PrimAlt)
                             (DEFAULT) _
                               -> (Case) (App) APPFL.Types.isTrue# satUC = wild1VC
                                    (AlgAlt)
                                      (DataAlt) GHC.Types.False
                                        -> (App) $jKC stg_case_not_exhaustive
                                      (DataAlt) GHC.Types.True
                                        -> (Case) (Op) (Prim) -# [x#IC ,(MachInt) 1] = satWC
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (Case) (Op) (Prim) quotInt# [satWC ,y#JC] = wild2XC
                                                      (PrimAlt)
                                                        (DEFAULT) _
                                                          -> (Op) (Prim) -# [wild2XC ,(MachInt) 1]
(StgNonRec)
  APPFL.Classes.modInt# =
  (FUN)
  [x#YC ,y#ZC]
    (Case) (Op) (Prim) remInt# [x#YC ,y#ZC] = r#aC
      (PrimAlt)
        (DEFAULT) _
          -> (LetNE) let
               (StgNonRec)
                 $jbC =
                 (FUN)
                 [wcC]
                   (Case) (App) r#aC = wilddC
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) APPFL.Types.isTrue# (MachInt) 1 = wild1eC
                              (AlgAlt)
                                (DataAlt) GHC.Types.False -> (Lit) (MachInt) 0
                                (DataAlt) GHC.Types.True -> (Op) (Prim) +# [wilddC ,y#ZC]
                       (LitAlt) (MachInt) 0
                         -> (Case) (App) APPFL.Types.isTrue# (MachInt) 0 = wild1fC
                              (AlgAlt)
                                (DataAlt) GHC.Types.False -> (Lit) (MachInt) 0
                                (DataAlt) GHC.Types.True -> (App) y#ZC
             in (LetNE) let
                  (StgNonRec)
                    $j1gC =
                    (FUN)
                    [whC]
                      (Case) (Op) (Prim) <# [x#YC ,(MachInt) 0] = satiC
                        (PrimAlt)
                          (DEFAULT) _
                            -> (Case) (App) APPFL.Types.isTrue# satiC = wildjC
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (App) r#aC
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (Op) (Prim) ># [y#ZC ,(MachInt) 0] = satkC
                                          (PrimAlt)
                                            (DEFAULT) _
                                              -> (Case) (App) APPFL.Types.isTrue# satkC = wild1lC
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False -> (App) r#aC
                                                     (DataAlt) GHC.Types.True
                                                       -> (App) $jbC stg_case_not_exhaustive
                in (Case) (Op) (Prim) ># [x#YC ,(MachInt) 0] = satmC
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) APPFL.Types.isTrue# satmC = wildnC
                              (AlgAlt)
                                (DataAlt) GHC.Types.False -> (App) $j1gC stg_case_not_exhaustive
                                (DataAlt) GHC.Types.True
                                  -> (Case) (Op) (Prim) <# [y#ZC ,(MachInt) 0] = satoC
                                       (PrimAlt)
                                         (DEFAULT) _
                                           -> (Case) (App) APPFL.Types.isTrue# satoC = wild1pC
                                                (AlgAlt)
                                                  (DataAlt) GHC.Types.False
                                                    -> (App) $j1gC stg_case_not_exhaustive
                                                  (DataAlt) GHC.Types.True
                                                    -> (App) $jbC stg_case_not_exhaustive
(StgNonRec)
  APPFL.Classes.leInt =
  (FUN)
  [etaqC ,eta1rC]
    (Case) (App) etaqC = wildsC
      (AlgAlt)
        (DataAlt) APPFL.Types.I# xtC
          -> (Case) (App) eta1rC = wild1uC
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# yvC
                   -> (Case) (Op) (Prim) <=# [xtC ,yvC] = satwC
                        (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# satwC
(StgNonRec)
  APPFL.Classes.ltInt =
  (FUN)
  [etaxC ,eta1yC]
    (Case) (App) etaxC = wildzC
      (AlgAlt)
        (DataAlt) APPFL.Types.I# x0C
          -> (Case) (App) eta1yC = wild11C
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# y2C
                   -> (Case) (Op) (Prim) <# [x0C ,y2C] = sat3C
                        (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# sat3C
(StgNonRec)
  APPFL.Classes.geInt =
  (FUN)
  [eta4C ,eta15C]
    (Case) (App) eta4C = wild6C
      (AlgAlt)
        (DataAlt) APPFL.Types.I# x7C
          -> (Case) (App) eta15C = wild18C
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# y9C
                   -> (Case) (Op) (Prim) >=# [x7C ,y9C] = sat-C
                        (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# sat-C
(StgNonRec)
  APPFL.Classes.gtInt =
  (FUN)
  [eta_C ,eta1AD]
    (Case) (App) eta_C = wildBD
      (AlgAlt)
        (DataAlt) APPFL.Types.I# xCD
          -> (Case) (App) eta1AD = wild1DD
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# yED
                   -> (Case) (Op) (Prim) ># [xCD ,yED] = satFD
                        (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# satFD
(StgNonRec)
  APPFL.Classes.neInt =
  (FUN)
  [etaGD ,eta1HD]
    (Case) (App) etaGD = wildID
      (AlgAlt)
        (DataAlt) APPFL.Types.I# xJD
          -> (Case) (App) eta1HD = wild1KD
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# yLD
                   -> (Case) (Op) (Prim) /=# [xJD ,yLD] = satMD
                        (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# satMD
(StgNonRec)
  APPFL.Classes.eqInt =
  (FUN)
  [etaND ,eta1OD]
    (Case) (App) etaND = wildPD
      (AlgAlt)
        (DataAlt) APPFL.Types.I# xQD
          -> (Case) (App) eta1OD = wild1RD
               (AlgAlt)
                 (DataAlt) APPFL.Types.I# ySD
                   -> (Case) (Op) (Prim) ==# [xQD ,ySD] = satTD
                        (PrimAlt) (DEFAULT) _ -> (App) APPFL.Types.isTrue# satTD
(StgNonRec)
  APPFL.Classes.== =
  (FUN)
  [eta2B ,eta3B]
    (App) APPFL.Classes.eqInt eta2B eta3B