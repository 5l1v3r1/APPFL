(StgNonRec)
  (VanillaId) main =
  (THUNK)
    (App) (VanillaId) APPFL.CString.unpackCString# (LitArg) (MachStr)"a string"
(StgNonRec)
  (VanillaId) a =
  (CONish) GHC.Types.I# [(LitArg) (MachInt)2]
  Worker/Wrapper: (DCWorkerId) GHC.Types.I#
(StgNonRec)
  (VanillaId) a1B =
  (CONish) GHC.Types.C# [(LitArg) (MachChar)b]
  Worker/Wrapper: (DCWorkerId) GHC.Types.C#
(StgNonRec)
  (VanillaId) Test.myOtherPair =
  (CONish) GHC.Tuple.(,) [(VarArg) (VanillaId) a ,(VarArg) (VanillaId) a1B]
  Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,)
(StgNonRec)
  (VanillaId) a2C =
  (CONish) GHC.Types.I# [(LitArg) (MachInt)2]
  Worker/Wrapper: (DCWorkerId) GHC.Types.I#
(StgNonRec)
  (VanillaId) a3D =
  (CONish) GHC.Types.C# [(LitArg) (MachChar)b]
  Worker/Wrapper: (DCWorkerId) GHC.Types.C#
(StgNonRec)
  (VanillaId) Test.myPair =
  (CONish) GHC.Tuple.(,) [(VarArg) (VanillaId) a2C ,(VarArg) (VanillaId) a3D]
  Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,)
(StgNonRec)
  (VanillaId) APPFL.Prim.void# =
  (CONish) APPFL.VOID.VOID []
  Worker/Wrapper: (DCWorkerId) APPFL.VOID.VOID
(StgRec)
  (VanillaId) APPFL.Prim.imin# =
  (THUNK) (App) (VanillaId) xE
  (VanillaId) xE =
  (THUNK) (App) (VanillaId) APPFL.Prim.imin#
(StgRec)
  (VanillaId) APPFL.Prim.imax# =
  (THUNK) (App) (VanillaId) x1F
  (VanillaId) x1F =
  (THUNK) (App) (VanillaId) APPFL.Prim.imax#
(StgNonRec)
  (VanillaId) APPFL.Prim.ineg# =
  (FUN)
  [(VanillaId) etaG]
    (Op) (Prim) negateInt# [(VarArg) (VanillaId) etaG]
(StgNonRec)
  (VanillaId) APPFL.Prim./# =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (Op) (Prim) quotInt# [(VarArg) (VanillaId) etaH ,(VarArg) (VanillaId) etaG]
(StgNonRec)
  (VanillaId) APPFL.Prim.%# =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (Op) (Prim) remInt# [(VarArg) (VanillaId) etaH ,(VarArg) (VanillaId) etaG]
(StgNonRec)
  (VanillaId) APPFL.Prim.quotRemInt# =
  (FUN)
  [(VanillaId) aI ,(VanillaId) bJ]
    (Case) (Op) (Prim) quotInt# [(VarArg) (VanillaId) aI ,(VarArg) (VanillaId) bJ] = (VanillaId) qK
      (PrimAlt)
        (DEFAULT) _
          -> (Case) (Op) (Prim) remInt# [(VarArg) (VanillaId) aI ,(VarArg) (VanillaId) bJ] = (VanillaId) rL
               (PrimAlt)
                 (DEFAULT) _
                   -> (ConApp) GHC.Prim.(#,#) [(VarArg) (VanillaId) qK ,(VarArg) (VanillaId) rL]
(StgNonRec)
  (DCWorkerId) APPFL.VOID.VOID =
  (CONish) APPFL.VOID.VOID []
  Worker/Wrapper: (DCWorkerId) APPFL.VOID.VOID
(StgNonRec)
  (VanillaId) APPFL.Base.quotRemInt =
  (FUN)
  [(VanillaId) dsM ,(VanillaId) ds1N]
    (Case) (App) (VanillaId) dsM = (VanillaId) wildO
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) x1P
          -> (Case) (App) (VanillaId) ds1N = (VanillaId) wild1Q
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yR
                   -> (Case) (App) (VanillaId) APPFL.Prim.quotRemInt# (VarArg) (VanillaId) x1P (VarArg) (VanillaId) yR = (VanillaId) ds2S
                        (UbxTupAlt2)
                          (DataAlt) GHC.Prim.(#,#) (VanillaId) ipvT (VanillaId) ipv1U
                            -> (Case) (ConApp) GHC.Prim.(#,#) [(VarArg) (VanillaId) ipvT ,(VarArg) (VanillaId) ipv1U] = (VanillaId) wild2V
                                 (UbxTupAlt2)
                                   (DataAlt) GHC.Prim.(#,#) (VanillaId) qW (VanillaId) rX
                                     -> (Let) let
                                          (StgNonRec)
                                            (VanillaId) satY =
                                            (CONish) GHC.Types.I# [(VarArg) (VanillaId) rX]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.I#
                                        in (Let) let
                                             (StgNonRec)
                                               (VanillaId) satZ =
                                               (CONish) GHC.Types.I# [(VarArg) (VanillaId) qW]
                                               Worker/Wrapper: (DCWorkerId) GHC.Types.I#
                                           in (ConApp) GHC.Tuple.(,) [(VarArg) (VanillaId) satZ ,(VarArg) (VanillaId) satY]
(StgNonRec)
  (VanillaId) APPFL.Base.modInt =
  (FUN)
  [(VanillaId) dsa ,(VanillaId) ds1b]
    (Case) (App) (VanillaId) dsa = (VanillaId) wildc
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) x1d
          -> (Case) (App) (VanillaId) ds1b = (VanillaId) wild1e
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yf
                   -> (Case) (App) (VanillaId) APPFL.Classes.modInt# (VarArg) (VanillaId) x1d (VarArg) (VanillaId) yf = (VanillaId) wild2g
                        (PrimAlt)
                          (DEFAULT) _ -> (ConApp) GHC.Types.I# [(VarArg) (VanillaId) wild2g]
(StgNonRec)
  (VanillaId) APPFL.Base.divInt =
  (FUN)
  [(VanillaId) dsh ,(VanillaId) ds1i]
    (Case) (App) (VanillaId) dsh = (VanillaId) wildj
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) x1k
          -> (Case) (App) (VanillaId) ds1i = (VanillaId) wild1l
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) ym
                   -> (Case) (App) (VanillaId) APPFL.Classes.divInt# (VarArg) (VanillaId) x1k (VarArg) (VanillaId) ym = (VanillaId) wild2n
                        (PrimAlt)
                          (DEFAULT) _ -> (ConApp) GHC.Types.I# [(VarArg) (VanillaId) wild2n]
(StgNonRec)
  (VanillaId) APPFL.Base.remInt =
  (FUN)
  [(VanillaId) etao ,(VanillaId) eta1p]
    (Case) (App) (VanillaId) etao = (VanillaId) wildq
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) x1r
          -> (Case) (App) (VanillaId) eta1p = (VanillaId) wild1s
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yt
                   -> (Case) (App) (VanillaId) APPFL.Prim.%# (VarArg) (VanillaId) x1r (VarArg) (VanillaId) yt = (VanillaId) wild2u
                        (PrimAlt)
                          (DEFAULT) _ -> (ConApp) GHC.Types.I# [(VarArg) (VanillaId) wild2u]
(StgNonRec)
  (VanillaId) APPFL.Base.quotInt =
  (FUN)
  [(VanillaId) etav ,(VanillaId) eta1w]
    (Case) (App) (VanillaId) etav = (VanillaId) wildx
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) x1y
          -> (Case) (App) (VanillaId) eta1w = (VanillaId) wild1z
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) y0
                   -> (Case) (App) (VanillaId) APPFL.Prim./# (VarArg) (VanillaId) x1y (VarArg) (VanillaId) y0 = (VanillaId) wild21
                        (PrimAlt)
                          (DEFAULT) _ -> (ConApp) GHC.Types.I# [(VarArg) (VanillaId) wild21]
(StgNonRec)
  (VanillaId) APPFL.Base.$ =
  (FUN)
  [(VanillaId) f2 ,(VanillaId) x13]
    (App) (VanillaId) f2 (VarArg) (VanillaId) x13
(StgNonRec)
  (VanillaId) APPFL.Base.flip =
  (FUN)
  [(VanillaId) f4 ,(VanillaId) x15 ,(VanillaId) y6]
    (App) (VanillaId) f4 (VarArg) (VanillaId) y6 (VarArg) (VanillaId) x15
(StgNonRec)
  (VanillaId) APPFL.Base.. =
  (FUN)
  [(VanillaId) f7 ,(VanillaId) g8 ,(VanillaId) x19]
    (Let) let
      (StgNonRec)
        (VanillaId) sat- =
        (THUNK) (App) (VanillaId) g8 (VarArg) (VanillaId) x19
    in (App) (VanillaId) f7 (VarArg) (VanillaId) sat-
(StgNonRec)
  (VanillaId) APPFL.Base.const =
  (FUN)
  [(VanillaId) x1_ ,(VanillaId) dsAB]
    (App) (VanillaId) x1_
(StgNonRec)
  (VanillaId) APPFL.Base.id =
  (FUN)
  [(VanillaId) x1BB]
    (App) (VanillaId) x1BB
(StgNonRec)
  (VanillaId) APPFL.Base.otherwise =
  (CONish) GHC.Types.True []
  Worker/Wrapper: (DCWorkerId) GHC.Types.True
(StgNonRec)
  (VanillaId) APPFL.Base.ifThenElse =
  (FUN)
  [(VanillaId) bCB ,(VanillaId) tDB ,(VanillaId) eEB]
    (Case) (App) (VanillaId) bCB = (VanillaId) wildFB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) eEB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) tDB
(StgNonRec)
  (VanillaId) APPFL.Base.divModInt# =
  (FUN)
  [(VanillaId) x#GB ,(VanillaId) y#HB]
    (Let) let
      (StgNonRec)
        (VanillaId) satIB =
        (THUNK)
          (Case) (Op) (Prim) <# [(VarArg) (VanillaId) y#HB ,(LitArg) (MachInt)0] = (VanillaId) satJB
            (PrimAlt)
              (DEFAULT) _
                -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satJB
    in (Let) let
         (StgNonRec)
           (VanillaId) satKB =
           (THUNK)
             (Case) (Op) (Prim) ># [(VarArg) (VanillaId) x#GB ,(LitArg) (MachInt)0] = (VanillaId) satLB
               (PrimAlt)
                 (DEFAULT) _
                   -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satLB
       in (Case) (App) (VanillaId) APPFL.Classes.&& (VarArg) (VanillaId) satKB (VarArg) (VanillaId) satIB = (VanillaId) wildMB
            (AlgAlt)
              (DataAlt) GHC.Types.False
                -> (Let) let
                     (StgNonRec)
                       (VanillaId) satNB =
                       (THUNK)
                         (Case) (Op) (Prim) ># [(VarArg) (VanillaId) y#HB ,(LitArg) (MachInt)0] = (VanillaId) satOB
                           (PrimAlt)
                             (DEFAULT) _
                               -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satOB
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satPB =
                          (THUNK)
                            (Case) (Op) (Prim) <# [(VarArg) (VanillaId) x#GB ,(LitArg) (MachInt)0] = (VanillaId) satQB
                              (PrimAlt)
                                (DEFAULT) _
                                  -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satQB
                      in (Case) (App) (VanillaId) APPFL.Classes.&& (VarArg) (VanillaId) satPB (VarArg) (VanillaId) satNB = (VanillaId) wild1RB
                           (AlgAlt)
                             (DataAlt) GHC.Types.False
                               -> (App) (VanillaId) APPFL.Prim.quotRemInt# (VarArg) (VanillaId) x#GB (VarArg) (VanillaId) y#HB
                             (DataAlt) GHC.Types.True
                               -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) x#GB ,(LitArg) (MachInt)1] = (VanillaId) satSB
                                    (PrimAlt)
                                      (DEFAULT) _
                                        -> (Case) (App) (VanillaId) APPFL.Prim.quotRemInt# (VarArg) (VanillaId) satSB (VarArg) (VanillaId) y#HB = (VanillaId) dsTB
                                             (UbxTupAlt2)
                                               (DataAlt) GHC.Prim.(#,#) (VanillaId) ipvUB (VanillaId) ipv1VB
                                                 -> (Case) (ConApp) GHC.Prim.(#,#) [(VarArg) (VanillaId) ipvUB ,(VarArg) (VanillaId) ipv1VB] = (VanillaId) wild2WB
                                                      (UbxTupAlt2)
                                                        (DataAlt) GHC.Prim.(#,#) (VanillaId) qXB (VanillaId) rYB
                                                          -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) rYB ,(VarArg) (VanillaId) y#HB] = (VanillaId) satZB
                                                               (PrimAlt)
                                                                 (DEFAULT) _
                                                                   -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satZB ,(LitArg) (MachInt)1] = (VanillaId) sataB
                                                                        (PrimAlt)
                                                                          (DEFAULT) _
                                                                            -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) qXB ,(LitArg) (MachInt)1] = (VanillaId) satbB
                                                                                 (PrimAlt)
                                                                                   (DEFAULT) _
                                                                                     -> (ConApp) GHC.Prim.(#,#) [(VarArg) (VanillaId) satbB ,(VarArg) (VanillaId) sataB]
              (DataAlt) GHC.Types.True
                -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) x#GB ,(LitArg) (MachInt)1] = (VanillaId) satcB
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) (VanillaId) APPFL.Prim.quotRemInt# (VarArg) (VanillaId) satcB (VarArg) (VanillaId) y#HB = (VanillaId) dsdB
                              (UbxTupAlt2)
                                (DataAlt) GHC.Prim.(#,#) (VanillaId) ipveB (VanillaId) ipv1fB
                                  -> (Case) (ConApp) GHC.Prim.(#,#) [(VarArg) (VanillaId) ipveB ,(VarArg) (VanillaId) ipv1fB] = (VanillaId) wild1gB
                                       (UbxTupAlt2)
                                         (DataAlt) GHC.Prim.(#,#) (VanillaId) qhB (VanillaId) riB
                                           -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) riB ,(VarArg) (VanillaId) y#HB] = (VanillaId) satjB
                                                (PrimAlt)
                                                  (DEFAULT) _
                                                    -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) satjB ,(LitArg) (MachInt)1] = (VanillaId) satkB
                                                         (PrimAlt)
                                                           (DEFAULT) _
                                                             -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) qhB ,(LitArg) (MachInt)1] = (VanillaId) satlB
                                                                  (PrimAlt)
                                                                    (DEFAULT) _
                                                                      -> (ConApp) GHC.Prim.(#,#) [(VarArg) (VanillaId) satlB ,(VarArg) (VanillaId) satkB]
(StgNonRec)
  (VanillaId) APPFL.Base.divModInt =
  (FUN)
  [(VanillaId) dsmB ,(VanillaId) ds1nB]
    (Case) (App) (VanillaId) dsmB = (VanillaId) wildoB
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) x1pB
          -> (Case) (App) (VanillaId) ds1nB = (VanillaId) wild1qB
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yrB
                   -> (Case) (App) (VanillaId) APPFL.Base.divModInt# (VarArg) (VanillaId) x1pB (VarArg) (VanillaId) yrB = (VanillaId) ds2sB
                        (UbxTupAlt2)
                          (DataAlt) GHC.Prim.(#,#) (VanillaId) ipvtB (VanillaId) ipv1uB
                            -> (Case) (ConApp) GHC.Prim.(#,#) [(VarArg) (VanillaId) ipvtB ,(VarArg) (VanillaId) ipv1uB] = (VanillaId) wild2vB
                                 (UbxTupAlt2)
                                   (DataAlt) GHC.Prim.(#,#) (VanillaId) qwB (VanillaId) rxB
                                     -> (Let) let
                                          (StgNonRec)
                                            (VanillaId) satyB =
                                            (CONish) GHC.Types.I# [(VarArg) (VanillaId) rxB]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.I#
                                        in (Let) let
                                             (StgNonRec)
                                               (VanillaId) satzB =
                                               (CONish) GHC.Types.I# [(VarArg) (VanillaId) qwB]
                                               Worker/Wrapper: (DCWorkerId) GHC.Types.I#
                                           in (ConApp) GHC.Tuple.(,) [(VarArg) (VanillaId) satzB ,(VarArg) (VanillaId) satyB]
(StgRec)
  (VanillaId) x0B =
  (THUNK) (App) (VanillaId) x0B
(StgNonRec)
  (VanillaId) APPFL.Base._dummy =
  (THUNK) (App) (VanillaId) x0B
(StgNonRec)
  (VanillaId) APPFL.Base.fromInteger =
  (THUNK) (App) (VanillaId) x0B
(StgNonRec)
  (VanillaId) APPFL.Num.mulInt =
  (FUN)
  [(VanillaId) ds1B ,(VanillaId) ds12B]
    (Case) (App) (VanillaId) ds1B = (VanillaId) wild3B
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) a#4B
          -> (Case) (App) (VanillaId) ds12B = (VanillaId) wild15B
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) b#6B
                   -> (Case) (Op) (Prim) *# [(VarArg) (VanillaId) a#4B ,(VarArg) (VanillaId) b#6B] = (VanillaId) sat7B
                        (PrimAlt)
                          (DEFAULT) _ -> (ConApp) GHC.Types.I# [(VarArg) (VanillaId) sat7B]
(StgNonRec)
  (VanillaId) APPFL.Num.subInt =
  (FUN)
  [(VanillaId) ds8B ,(VanillaId) ds19B]
    (Case) (App) (VanillaId) ds8B = (VanillaId) wild-B
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) a#_B
          -> (Case) (App) (VanillaId) ds19B = (VanillaId) wild1AC
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) b#BC
                   -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) a#_B ,(VarArg) (VanillaId) b#BC] = (VanillaId) satCC
                        (PrimAlt)
                          (DEFAULT) _ -> (ConApp) GHC.Types.I# [(VarArg) (VanillaId) satCC]
(StgNonRec)
  (VanillaId) APPFL.Num.addInt =
  (FUN)
  [(VanillaId) dsDC ,(VanillaId) ds1EC]
    (Case) (App) (VanillaId) dsDC = (VanillaId) wildFC
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) a#GC
          -> (Case) (App) (VanillaId) ds1EC = (VanillaId) wild1HC
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) b#IC
                   -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) a#GC ,(VarArg) (VanillaId) b#IC] = (VanillaId) satJC
                        (PrimAlt)
                          (DEFAULT) _ -> (ConApp) GHC.Types.I# [(VarArg) (VanillaId) satJC]
(StgNonRec)
  (VanillaId) APPFL.Num.negate =
  (FUN)
  [(VanillaId) dsKC]
    (Case) (App) (VanillaId) dsKC = (VanillaId) wildLC
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) i#MC
          -> (Case) (Op) (Prim) negateInt# [(VarArg) (VanillaId) i#MC] = (VanillaId) satNC
               (PrimAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.I# [(VarArg) (VanillaId) satNC]
(StgNonRec)
  (VanillaId) APPFL.Num.% =
  (THUNK) (App) (VanillaId) APPFL.Base.remInt
(StgNonRec)
  (VanillaId) APPFL.Num.mod =
  (THUNK) (App) (VanillaId) APPFL.Base.remInt
(StgNonRec)
  (VanillaId) APPFL.Num.* =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (App) (VanillaId) APPFL.Num.mulInt (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) APPFL.Num./ =
  (THUNK) (App) (VanillaId) APPFL.Base.quotInt
(StgNonRec)
  (VanillaId) APPFL.Num.div =
  (THUNK) (App) (VanillaId) APPFL.Base.quotInt
(StgNonRec)
  (VanillaId) APPFL.Num.- =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (App) (VanillaId) APPFL.Num.subInt (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) APPFL.Num.+ =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (App) (VanillaId) APPFL.Num.addInt (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
(StgRec)
  (VanillaId) APPFL.List.zipWith3 =
  (FUN)
  [(VanillaId) zOC ,(VanillaId) dsPC ,(VanillaId) ds1QC ,(VanillaId) ds2RC]
    (Case) (App) (VanillaId) dsPC = (VanillaId) wildSC
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) Nil []
        (DataAlt) Cons (VanillaId) a8TC (VanillaId) asUC
          -> (Case) (App) (VanillaId) ds1QC = (VanillaId) wild1VC
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) Nil []
                 (DataAlt) Cons (VanillaId) b1WC (VanillaId) bsXC
                   -> (Case) (App) (VanillaId) ds2RC = (VanillaId) wild2YC
                        (AlgAlt)
                          (DataAlt) Nil -> (ConApp) Nil []
                          (DataAlt) Cons (VanillaId) c1ZC (VanillaId) csaC
                            -> (Let) let
                                 (StgNonRec)
                                   (VanillaId) satbC =
                                   (THUNK)
                                     (App) (VanillaId) APPFL.List.zipWith3 (VarArg) (VanillaId) zOC (VarArg) (VanillaId) asUC (VarArg) (VanillaId) bsXC (VarArg) (VanillaId) csaC
                               in (Let) let
                                    (StgNonRec)
                                      (VanillaId) satcC =
                                      (THUNK)
                                        (App) (VanillaId) zOC (VarArg) (VanillaId) a8TC (VarArg) (VanillaId) b1WC (VarArg) (VanillaId) c1ZC
                                  in (ConApp) Cons [(VarArg) (VanillaId) satcC ,(VarArg) (VanillaId) satbC]
(StgRec)
  (VanillaId) APPFL.List.zip3 =
  (FUN)
  [(VanillaId) dsdC ,(VanillaId) ds1eC ,(VanillaId) ds2fC]
    (Case) (App) (VanillaId) dsdC = (VanillaId) wildgC
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) Nil []
        (DataAlt) Cons (VanillaId) a8hC (VanillaId) asiC
          -> (Case) (App) (VanillaId) ds1eC = (VanillaId) wild1jC
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) Nil []
                 (DataAlt) Cons (VanillaId) b1kC (VanillaId) bslC
                   -> (Case) (App) (VanillaId) ds2fC = (VanillaId) wild2mC
                        (AlgAlt)
                          (DataAlt) Nil -> (ConApp) Nil []
                          (DataAlt) Cons (VanillaId) c1nC (VanillaId) csoC
                            -> (Let) let
                                 (StgNonRec)
                                   (VanillaId) satpC =
                                   (THUNK)
                                     (App) (VanillaId) APPFL.List.zip3 (VarArg) (VanillaId) asiC (VarArg) (VanillaId) bslC (VarArg) (VanillaId) csoC
                               in (Let) let
                                    (StgNonRec)
                                      (VanillaId) satqC =
                                      (CONish) GHC.Tuple.(,,) [(VarArg) (VanillaId) a8hC ,(VarArg) (VanillaId) b1kC ,(VarArg) (VanillaId) c1nC]
                                      Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,,)
                                  in (ConApp) Cons [(VarArg) (VanillaId) satqC ,(VarArg) (VanillaId) satpC]
(StgRec)
  (VanillaId) APPFL.List.!! =
  (FUN)
  [(VanillaId) dsrC ,(VanillaId) ds1sC]
    (Case) (App) (VanillaId) dsrC = (VanillaId) wildtC
      (AlgAlt)
        (DataAlt) Nil
          -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(913,1)-(914,34)|function !!"
        (DataAlt) Cons (VanillaId) xuC (VanillaId) ds2vC
          -> (Case) (App) (VanillaId) ds1sC = (VanillaId) wild1wC
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) ds3xC
                   -> (Case) (App) (VanillaId) ds3xC = (VanillaId) ds4yC
                        (PrimAlt)
                          (DEFAULT) _
                            -> (Let) let
                                 (StgNonRec)
                                   (VanillaId) satzC =
                                   (THUNK)
                                     (Let) let
                                       (StgNonRec)
                                         (VanillaId) sat0C =
                                         (CONish) GHC.Types.I# [(LitArg) (MachInt)1]
                                         Worker/Wrapper: (DCWorkerId) GHC.Types.I#
                                     in (App) (VanillaId) APPFL.Num.- (VarArg) (VanillaId) wild1wC (VarArg) (VanillaId) sat0C
                               in (App) (VanillaId) APPFL.List.!! (VarArg) (VanillaId) ds2vC (VarArg) (VanillaId) satzC
                          (LitAlt) (MachInt)0 -> (App) (VanillaId) xuC
(StgNonRec)
  (VanillaId) APPFL.List.lookup =
  (FUN)
  [(VanillaId) $dEq1C ,(VanillaId) eta2C ,(VanillaId) eta13C]
    (LetNE) let
      (StgRec)
        (VanillaId) lookup14C =
        (FUN)
        [(VanillaId) _key5C ,(VanillaId) ds6C]
          (Case) (App) (VanillaId) ds6C = (VanillaId) wild7C
            (AlgAlt)
              (DataAlt) Nil -> (ConApp) GHC.Base.Nothing []
              (DataAlt) Cons (VanillaId) ds18C (VanillaId) xys9C
                -> (Case) (App) (VanillaId) ds18C = (VanillaId) wild1-C
                     (AlgAlt)
                       (DataAlt) GHC.Tuple.(,) (VanillaId) x_C (VanillaId) yAD
                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq1C (VarArg) (VanillaId) _key5C (VarArg) (VanillaId) x_C = (VanillaId) wild2BD
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (Case) (App) (VanillaId) APPFL.Base.otherwise = (VanillaId) wild3CD
                                       (AlgAlt)
                                         (DataAlt) GHC.Types.False
                                           -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(875,1)-(878,41)|function lookup"
                                         (DataAlt) GHC.Types.True
                                           -> (App) (VanillaId) lookup14C (VarArg) (VanillaId) _key5C (VarArg) (VanillaId) xys9C
                                (DataAlt) GHC.Types.True
                                  -> (ConApp) GHC.Base.Just [(VarArg) (VanillaId) yAD]
    in (App) (VanillaId) lookup14C (VarArg) (VanillaId) eta2C (VarArg) (VanillaId) eta13C
(StgRec)
  (VanillaId) APPFL.List.span =
  (FUN)
  [(VanillaId) dsDD ,(VanillaId) xsED]
    (Case) (App) (VanillaId) xsED = (VanillaId) wildFD
      (AlgAlt)
        (DataAlt) Nil
          -> (ConApp) GHC.Tuple.(,) [(VarArg) (DCWorkerId) GHC.Types.[] ,(VarArg) (DCWorkerId) GHC.Types.[]]
        (DataAlt) Cons (VanillaId) xGD (VanillaId) xs'HD
          -> (Case) (App) (VanillaId) dsDD (VarArg) (VanillaId) xGD = (VanillaId) wild1ID
               (AlgAlt)
                 (DataAlt) GHC.Types.False
                   -> (Case) (App) (VanillaId) APPFL.Base.otherwise = (VanillaId) wild2JD
                        (AlgAlt)
                          (DataAlt) GHC.Types.False
                            -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(730,1)-(733,34)|function span"
                          (DataAlt) GHC.Types.True
                            -> (ConApp) GHC.Tuple.(,) [(VarArg) (DCWorkerId) GHC.Types.[] ,(VarArg) (VanillaId) wildFD]
                 (DataAlt) GHC.Types.True
                   -> (Let) let
                        (StgNonRec)
                          (VanillaId) ds1KD =
                          (THUNK)
                            (App) (VanillaId) APPFL.List.span (VarArg) (VanillaId) dsDD (VarArg) (VanillaId) xs'HD
                      in (Let) let
                           (StgNonRec)
                             (VanillaId) zsLD =
                             (THUNK)
                               (Case) (App) (VanillaId) ds1KD = (VanillaId) wild2MD
                                 (AlgAlt)
                                   (DataAlt) GHC.Tuple.(,) (VanillaId) ysND (VanillaId) zs1OD
                                     -> (App) (VanillaId) zs1OD
                         in (Let) let
                              (StgNonRec)
                                (VanillaId) ysPD =
                                (THUNK)
                                  (Case) (App) (VanillaId) ds1KD = (VanillaId) wild2QD
                                    (AlgAlt)
                                      (DataAlt) GHC.Tuple.(,) (VanillaId) ys1RD (VanillaId) zs1SD
                                        -> (App) (VanillaId) ys1RD
                            in (Let) let
                                 (StgNonRec)
                                   (VanillaId) ds2TD =
                                   (CONish) GHC.Tuple.(,) [(VarArg) (VanillaId) ysPD ,(VarArg) (VanillaId) zsLD]
                                   Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,)
                               in (Let) let
                                    (StgNonRec)
                                      (VanillaId) satUD =
                                      (THUNK)
                                        (Case) (App) (VanillaId) ds2TD = (VanillaId) ds3VD
                                          (AlgAlt)
                                            (DataAlt) GHC.Tuple.(,) (VanillaId) ys1WD (VanillaId) zs1XD
                                              -> (App) (VanillaId) zs1XD
                                  in (Let) let
                                       (StgNonRec)
                                         (VanillaId) satYD =
                                         (THUNK)
                                           (Case) (App) (VanillaId) ds2TD = (VanillaId) ds3ZD
                                             (AlgAlt)
                                               (DataAlt) GHC.Tuple.(,) (VanillaId) ys1aD (VanillaId) zs1bD
                                                 -> (App) (VanillaId) ys1aD
                                     in (Let) let
                                          (StgNonRec)
                                            (VanillaId) satcD =
                                            (CONish) Cons [(VarArg) (VanillaId) xGD ,(VarArg) (VanillaId) satYD]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.:
                                        in (ConApp) GHC.Tuple.(,) [(VarArg) (VanillaId) satcD ,(VarArg) (VanillaId) satUD]
(StgNonRec)
  (VanillaId) APPFL.List.break =
  (FUN)
  [(VanillaId) pdD]
    (Let) let
      (StgNonRec)
        (VanillaId) sateD =
        (THUNK)
          (App) (VanillaId) APPFL.Base.. (VarArg) (VanillaId) APPFL.Classes.not (VarArg) (VanillaId) pdD
    in (App) (VanillaId) APPFL.List.span (VarArg) (VanillaId) sateD
(StgRec)
  (VanillaId) APPFL.List.drop =
  (FUN)
  [(VanillaId) nfD ,(VanillaId) xsgD]
    (Let) let
      (StgNonRec)
        (VanillaId) sathD =
        (CONish) GHC.Types.I# [(LitArg) (MachInt)0]
        Worker/Wrapper: (DCWorkerId) GHC.Types.I#
    in (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: GHC.Classes.Ord typs: [Int] GHC.Classes.$fOrdInt (VarArg) (VanillaId) nfD (VarArg) (VanillaId) sathD = (VanillaId) wildiD
         (AlgAlt)
           (DataAlt) GHC.Types.False
             -> (Case) (App) (VanillaId) xsgD = (VanillaId) wild1jD
                  (AlgAlt)
                    (DataAlt) Nil -> (ConApp) Nil []
                    (DataAlt) Cons (VanillaId) dskD (VanillaId) xs1lD
                      -> (Let) let
                           (StgNonRec)
                             (VanillaId) satmD =
                             (THUNK)
                               (Let) let
                                 (StgNonRec)
                                   (VanillaId) satnD =
                                   (CONish) GHC.Types.I# [(LitArg) (MachInt)1]
                                   Worker/Wrapper: (DCWorkerId) GHC.Types.I#
                               in (App) (VanillaId) APPFL.Num.- (VarArg) (VanillaId) nfD (VarArg) (VanillaId) satnD
                         in (App) (VanillaId) APPFL.List.drop (VarArg) (VanillaId) satmD (VarArg) (VanillaId) xs1lD
           (DataAlt) GHC.Types.True -> (App) (VanillaId) xsgD
(StgRec)
  (VanillaId) APPFL.List.take =
  (FUN)
  [(VanillaId) noD ,(VanillaId) dspD]
    (Let) let
      (StgNonRec)
        (VanillaId) satqD =
        (CONish) GHC.Types.I# [(LitArg) (MachInt)0]
        Worker/Wrapper: (DCWorkerId) GHC.Types.I#
    in (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: GHC.Classes.Ord typs: [Int] GHC.Classes.$fOrdInt (VarArg) (VanillaId) noD (VarArg) (VanillaId) satqD = (VanillaId) wildrD
         (AlgAlt)
           (DataAlt) GHC.Types.False
             -> (Case) (App) (VanillaId) dspD = (VanillaId) wild1sD
                  (AlgAlt)
                    (DataAlt) Nil -> (ConApp) Nil []
                    (DataAlt) Cons (VanillaId) xtD (VanillaId) xsuD
                      -> (Let) let
                           (StgNonRec)
                             (VanillaId) satvD =
                             (THUNK)
                               (Let) let
                                 (StgNonRec)
                                   (VanillaId) satwD =
                                   (THUNK)
                                     (Let) let
                                       (StgNonRec)
                                         (VanillaId) satxD =
                                         (CONish) GHC.Types.I# [(LitArg) (MachInt)1]
                                         Worker/Wrapper: (DCWorkerId) GHC.Types.I#
                                     in (App) (VanillaId) APPFL.Num.- (VarArg) (VanillaId) noD (VarArg) (VanillaId) satxD
                               in (App) (VanillaId) APPFL.List.take (VarArg) (VanillaId) satwD (VarArg) (VanillaId) xsuD
                         in (ConApp) Cons [(VarArg) (VanillaId) xtD ,(VarArg) (VanillaId) satvD]
           (DataAlt) GHC.Types.True -> (ConApp) Nil []
(StgNonRec)
  (VanillaId) APPFL.List.splitAt =
  (FUN)
  [(VanillaId) nyD ,(VanillaId) xszD]
    (Let) let
      (StgNonRec)
        (VanillaId) sat0D =
        (THUNK)
          (App) (VanillaId) APPFL.List.drop (VarArg) (VanillaId) nyD (VarArg) (VanillaId) xszD
    in (Let) let
         (StgNonRec)
           (VanillaId) sat1D =
           (THUNK)
             (App) (VanillaId) APPFL.List.take (VarArg) (VanillaId) nyD (VarArg) (VanillaId) xszD
       in (ConApp) GHC.Tuple.(,) [(VarArg) (VanillaId) sat1D ,(VarArg) (VanillaId) sat0D]
(StgRec)
  (VanillaId) APPFL.List.dropWhile =
  (FUN)
  [(VanillaId) ds2D ,(VanillaId) ds13D]
    (Case) (App) (VanillaId) ds13D = (VanillaId) wild4D
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) Nil []
        (DataAlt) Cons (VanillaId) x5D (VanillaId) xs'6D
          -> (Case) (App) (VanillaId) ds2D (VarArg) (VanillaId) x5D = (VanillaId) wild17D
               (AlgAlt)
                 (DataAlt) GHC.Types.False
                   -> (Case) (App) (VanillaId) APPFL.Base.otherwise = (VanillaId) wild28D
                        (AlgAlt)
                          (DataAlt) GHC.Types.False
                            -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(583,1)-(586,29)|function dropWhile"
                          (DataAlt) GHC.Types.True -> (App) (VanillaId) wild4D
                 (DataAlt) GHC.Types.True
                   -> (App) (VanillaId) APPFL.List.dropWhile (VarArg) (VanillaId) ds2D (VarArg) (VanillaId) xs'6D
(StgRec)
  (VanillaId) APPFL.List.takeWhile =
  (FUN)
  [(VanillaId) ds9D ,(VanillaId) ds1-D]
    (Case) (App) (VanillaId) ds1-D = (VanillaId) wild_D
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) Nil []
        (DataAlt) Cons (VanillaId) xAE (VanillaId) xsBE
          -> (Case) (App) (VanillaId) ds9D (VarArg) (VanillaId) xAE = (VanillaId) wild1CE
               (AlgAlt)
                 (DataAlt) GHC.Types.False
                   -> (Case) (App) (VanillaId) APPFL.Base.otherwise = (VanillaId) wild2DE
                        (AlgAlt)
                          (DataAlt) GHC.Types.False
                            -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(550,1)-(553,29)|function takeWhile"
                          (DataAlt) GHC.Types.True -> (ConApp) Nil []
                 (DataAlt) GHC.Types.True
                   -> (Let) let
                        (StgNonRec)
                          (VanillaId) satEE =
                          (THUNK)
                            (App) (VanillaId) APPFL.List.takeWhile (VarArg) (VanillaId) ds9D (VarArg) (VanillaId) xsBE
                      in (ConApp) Cons [(VarArg) (VanillaId) xAE ,(VarArg) (VanillaId) satEE]
(StgNonRec)
  (VanillaId) APPFL.List.repeat =
  (FUN)
  [(VanillaId) xFE]
    (Let) let
      (StgRec)
        (VanillaId) xsGE =
        (CONish) Cons [(VarArg) (VanillaId) xFE ,(VarArg) (VanillaId) xsGE]
        Worker/Wrapper: (DCWorkerId) GHC.Types.:
    in (App) (VanillaId) xsGE
(StgNonRec)
  (VanillaId) APPFL.List.replicate =
  (FUN)
  [(VanillaId) nHE ,(VanillaId) xIE]
    (Let) let
      (StgNonRec)
        (VanillaId) satJE =
        (THUNK)
          (Let) let
            (StgRec)
              (VanillaId) xsKE =
              (CONish) Cons [(VarArg) (VanillaId) xIE ,(VarArg) (VanillaId) xsKE]
              Worker/Wrapper: (DCWorkerId) GHC.Types.:
          in (App) (VanillaId) xsKE
    in (App) (VanillaId) APPFL.List.take (VarArg) (VanillaId) nHE (VarArg) (VanillaId) satJE
(StgRec)
  (VanillaId) APPFL.List.iterate =
  (FUN)
  [(VanillaId) fLE ,(VanillaId) xME]
    (Let) let
      (StgNonRec)
        (VanillaId) satNE =
        (THUNK)
          (Let) let
            (StgNonRec)
              (VanillaId) satOE =
              (THUNK) (App) (VanillaId) fLE (VarArg) (VanillaId) xME
          in (App) (VanillaId) APPFL.List.iterate (VarArg) (VanillaId) fLE (VarArg) (VanillaId) satOE
    in (ConApp) Cons [(VarArg) (VanillaId) xME ,(VarArg) (VanillaId) satNE]
(StgRec)
  (VanillaId) APPFL.List.scanr1 =
  (FUN)
  [(VanillaId) dsPE ,(VanillaId) ds1QE]
    (Case) (App) (VanillaId) ds1QE = (VanillaId) wildRE
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) Nil []
        (DataAlt) Cons (VanillaId) xSE (VanillaId) ds2TE
          -> (Case) (App) (VanillaId) ds2TE = (VanillaId) wild1UE
               (AlgAlt)
                 (DataAlt) Nil
                   -> (ConApp) Cons [(VarArg) (VanillaId) xSE ,(VarArg) (DCWorkerId) GHC.Types.[]]
                 (DataAlt) Cons (VanillaId) ipvVE (VanillaId) ipv1WE
                   -> (Let) let
                        (StgNonRec)
                          (VanillaId) ds3XE =
                          (THUNK)
                            (Case) (App) (VanillaId) APPFL.List.scanr1 (VarArg) (VanillaId) dsPE (VarArg) (VanillaId) wild1UE = (VanillaId) wild2YE
                              (AlgAlt)
                                (DataAlt) Nil
                                  -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:438:34-55|qs@(q : _)"
                                (DataAlt) Cons (VanillaId) qZE (VanillaId) ds4aE
                                  -> (ConApp) GHC.Tuple.(,) [(VarArg) (VanillaId) wild2YE ,(VarArg) (VanillaId) qZE]
                      in (Let) let
                           (StgNonRec)
                             (VanillaId) qbE =
                             (THUNK)
                               (Case) (App) (VanillaId) ds3XE = (VanillaId) ds4cE
                                 (AlgAlt)
                                   (DataAlt) GHC.Tuple.(,) (VanillaId) qsdE (VanillaId) q1eE
                                     -> (App) (VanillaId) q1eE
                         in (Let) let
                              (StgNonRec)
                                (VanillaId) qsfE =
                                (THUNK)
                                  (Case) (App) (VanillaId) ds3XE = (VanillaId) ds4gE
                                    (AlgAlt)
                                      (DataAlt) GHC.Tuple.(,) (VanillaId) qs1hE (VanillaId) q1iE
                                        -> (App) (VanillaId) qs1hE
                            in (Let) let
                                 (StgNonRec)
                                   (VanillaId) ds4jE =
                                   (CONish) GHC.Tuple.(,) [(VarArg) (VanillaId) qsfE ,(VarArg) (VanillaId) qbE]
                                   Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,)
                               in (Let) let
                                    (StgNonRec)
                                      (VanillaId) satkE =
                                      (THUNK)
                                        (Case) (App) (VanillaId) ds4jE = (VanillaId) ds5lE
                                          (AlgAlt)
                                            (DataAlt) GHC.Tuple.(,) (VanillaId) qs1mE (VanillaId) q1nE
                                              -> (App) (VanillaId) qs1mE
                                  in (Let) let
                                       (StgNonRec)
                                         (VanillaId) satoE =
                                         (THUNK)
                                           (Let) let
                                             (StgNonRec)
                                               (VanillaId) satpE =
                                               (THUNK)
                                                 (Case) (App) (VanillaId) ds4jE = (VanillaId) ds5qE
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Tuple.(,) (VanillaId) qs1rE (VanillaId) q1sE
                                                       -> (App) (VanillaId) q1sE
                                           in (App) (VanillaId) dsPE (VarArg) (VanillaId) xSE (VarArg) (VanillaId) satpE
                                     in (ConApp) Cons [(VarArg) (VanillaId) satoE ,(VarArg) (VanillaId) satkE]
(StgRec)
  (VanillaId) APPFL.List.scanr =
  (FUN)
  [(VanillaId) dstE ,(VanillaId) q0uE ,(VanillaId) ds1vE]
    (Case) (App) (VanillaId) ds1vE = (VanillaId) wildwE
      (AlgAlt)
        (DataAlt) Nil
          -> (ConApp) Cons [(VarArg) (VanillaId) q0uE ,(VarArg) (DCWorkerId) GHC.Types.[]]
        (DataAlt) Cons (VanillaId) xxE (VanillaId) xsyE
          -> (Let) let
               (StgNonRec)
                 (VanillaId) ds2zE =
                 (THUNK)
                   (Case) (App) (VanillaId) APPFL.List.scanr (VarArg) (VanillaId) dstE (VarArg) (VanillaId) q0uE (VarArg) (VanillaId) xsyE = (VanillaId) wild10E
                     (AlgAlt)
                       (DataAlt) Nil
                         -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:414:34-57|qs@(q : _)"
                       (DataAlt) Cons (VanillaId) q1E (VanillaId) ds32E
                         -> (ConApp) GHC.Tuple.(,) [(VarArg) (VanillaId) wild10E ,(VarArg) (VanillaId) q1E]
             in (Let) let
                  (StgNonRec)
                    (VanillaId) q3E =
                    (THUNK)
                      (Case) (App) (VanillaId) ds2zE = (VanillaId) ds34E
                        (AlgAlt)
                          (DataAlt) GHC.Tuple.(,) (VanillaId) qs5E (VanillaId) q16E
                            -> (App) (VanillaId) q16E
                in (Let) let
                     (StgNonRec)
                       (VanillaId) qs7E =
                       (THUNK)
                         (Case) (App) (VanillaId) ds2zE = (VanillaId) ds38E
                           (AlgAlt)
                             (DataAlt) GHC.Tuple.(,) (VanillaId) qs19E (VanillaId) q1-E
                               -> (App) (VanillaId) qs19E
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) ds3_E =
                          (CONish) GHC.Tuple.(,) [(VarArg) (VanillaId) qs7E ,(VarArg) (VanillaId) q3E]
                          Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,)
                      in (Let) let
                           (StgNonRec)
                             (VanillaId) satAF =
                             (THUNK)
                               (Case) (App) (VanillaId) ds3_E = (VanillaId) ds4BF
                                 (AlgAlt)
                                   (DataAlt) GHC.Tuple.(,) (VanillaId) qs1CF (VanillaId) q1DF
                                     -> (App) (VanillaId) qs1CF
                         in (Let) let
                              (StgNonRec)
                                (VanillaId) satEF =
                                (THUNK)
                                  (Let) let
                                    (StgNonRec)
                                      (VanillaId) satFF =
                                      (THUNK)
                                        (Case) (App) (VanillaId) ds3_E = (VanillaId) ds4GF
                                          (AlgAlt)
                                            (DataAlt) GHC.Tuple.(,) (VanillaId) qs1HF (VanillaId) q1IF
                                              -> (App) (VanillaId) q1IF
                                  in (App) (VanillaId) dstE (VarArg) (VanillaId) xxE (VarArg) (VanillaId) satFF
                            in (ConApp) Cons [(VarArg) (VanillaId) satEF ,(VarArg) (VanillaId) satAF]
(StgNonRec)
  (VanillaId) APPFL.List.foldr1 =
  (FUN)
  [(VanillaId) fJF ,(VanillaId) etaKF]
    (Let) let
      (StgRec)
        (VanillaId) goLF =
        (FUN)
        [(VanillaId) dsMF]
          (Case) (App) (VanillaId) dsMF = (VanillaId) wildNF
            (AlgAlt)
              (DataAlt) Nil
                -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(401,9)-(402,40)|function go"
              (DataAlt) Cons (VanillaId) xOF (VanillaId) ds1PF
                -> (Case) (App) (VanillaId) ds1PF = (VanillaId) wild1QF
                     (AlgAlt)
                       (DataAlt) Nil -> (App) (VanillaId) xOF
                       (DataAlt) Cons (VanillaId) ipvRF (VanillaId) ipv1SF
                         -> (Let) let
                              (StgNonRec)
                                (VanillaId) satTF =
                                (THUNK) (App) (VanillaId) goLF (VarArg) (VanillaId) wild1QF
                            in (App) (VanillaId) fJF (VarArg) (VanillaId) xOF (VarArg) (VanillaId) satTF
    in (App) (VanillaId) goLF (VarArg) (VanillaId) etaKF
(StgRec)
  (VanillaId) scanlGo'UF =
  (FUN)
  [(VanillaId) fVF ,(VanillaId) qWF ,(VanillaId) lsXF]
    (Case) (App) (VanillaId) qWF = (VanillaId) q1YF
      (PolyAlt)
        (DEFAULT) _
          -> (Let) let
               (StgNonRec)
                 (VanillaId) satZF =
                 (THUNK)
                   (Case) (App) (VanillaId) lsXF = (VanillaId) wildaF
                     (AlgAlt)
                       (DataAlt) Nil -> (ConApp) Nil []
                       (DataAlt) Cons (VanillaId) xbF (VanillaId) xscF
                         -> (Let) let
                              (StgNonRec)
                                (VanillaId) satdF =
                                (THUNK)
                                  (App) (VanillaId) fVF (VarArg) (VanillaId) q1YF (VarArg) (VanillaId) xbF
                            in (App) (VanillaId) scanlGo'UF (VarArg) (VanillaId) fVF (VarArg) (VanillaId) satdF (VarArg) (VanillaId) xscF
             in (ConApp) Cons [(VarArg) (VanillaId) q1YF ,(VarArg) (VanillaId) satZF]
(StgNonRec)
  (VanillaId) APPFL.List.scanl' =
  (FUN)
  [(VanillaId) etaeF ,(VanillaId) etaH ,(VanillaId) etaG]
    (App) (VanillaId) scanlGo'UF (VarArg) (VanillaId) etaeF (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
(StgRec)
  (VanillaId) scanlGofF =
  (FUN)
  [(VanillaId) fgF ,(VanillaId) qhF ,(VanillaId) lsiF]
    (Let) let
      (StgNonRec)
        (VanillaId) satjF =
        (THUNK)
          (Case) (App) (VanillaId) lsiF = (VanillaId) wildkF
            (AlgAlt)
              (DataAlt) Nil -> (ConApp) Nil []
              (DataAlt) Cons (VanillaId) xlF (VanillaId) xsmF
                -> (Let) let
                     (StgNonRec)
                       (VanillaId) satnF =
                       (THUNK)
                         (App) (VanillaId) fgF (VarArg) (VanillaId) qhF (VarArg) (VanillaId) xlF
                   in (App) (VanillaId) scanlGofF (VarArg) (VanillaId) fgF (VarArg) (VanillaId) satnF (VarArg) (VanillaId) xsmF
    in (ConApp) Cons [(VarArg) (VanillaId) qhF ,(VarArg) (VanillaId) satjF]
(StgNonRec)
  (VanillaId) APPFL.List.scanl =
  (FUN)
  [(VanillaId) etaeF ,(VanillaId) etaH ,(VanillaId) etaG]
    (App) (VanillaId) scanlGofF (VarArg) (VanillaId) etaeF (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) APPFL.List.scanl1 =
  (FUN)
  [(VanillaId) foF ,(VanillaId) dspF]
    (Case) (App) (VanillaId) dspF = (VanillaId) wildqF
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) Nil []
        (DataAlt) Cons (VanillaId) xrF (VanillaId) xssF
          -> (App) (VanillaId) scanlGofF (VarArg) (VanillaId) foF (VarArg) (VanillaId) xrF (VarArg) (VanillaId) xssF
(StgRec)
  (VanillaId) APPFL.List.foldr =
  (FUN)
  [(VanillaId) ftF ,(VanillaId) suF ,(VanillaId) dsvF]
    (Case) (App) (VanillaId) dsvF = (VanillaId) wildwF
      (AlgAlt)
        (DataAlt) Nil -> (App) (VanillaId) suF
        (DataAlt) Cons (VanillaId) xxF (VanillaId) xsyF
          -> (Let) let
               (StgNonRec)
                 (VanillaId) satzF =
                 (THUNK)
                   (App) (VanillaId) APPFL.List.foldr (VarArg) (VanillaId) ftF (VarArg) (VanillaId) suF (VarArg) (VanillaId) xsyF
             in (App) (VanillaId) ftF (VarArg) (VanillaId) xxF (VarArg) (VanillaId) satzF
(StgNonRec)
  (VanillaId) APPFL.List.++ =
  (FUN)
  [(VanillaId) xs0F ,(VanillaId) ys1F]
    (App) (VanillaId) APPFL.List.foldr (VarArg) (DCWorkerId) GHC.Types.: (VarArg) (VanillaId) ys1F (VarArg) (VanillaId) xs0F
(StgNonRec)
  (VanillaId) APPFL.List.cycle =
  (FUN)
  [(VanillaId) xs2F]
    (Let) let
      (StgRec)
        (VanillaId) xs'3F =
        (THUNK)
          (App) (VanillaId) APPFL.List.foldr (VarArg) (DCWorkerId) GHC.Types.: (VarArg) (VanillaId) xs'3F (VarArg) (VanillaId) xs2F
    in (App) (VanillaId) xs'3F
(StgNonRec)
  (VanillaId) APPFL.List.and =
  (FUN)
  [(VanillaId) etaG]
    (App) (VanillaId) APPFL.List.foldr (VarArg) (VanillaId) APPFL.Classes.&& (VarArg) (DCWorkerId) GHC.Types.True (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) APPFL.List.or =
  (FUN)
  [(VanillaId) etaG]
    (App) (VanillaId) APPFL.List.foldr (VarArg) (VanillaId) APPFL.Classes.|| (VarArg) (DCWorkerId) GHC.Types.False (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) APPFL.List.concatMap =
  (FUN)
  [(VanillaId) f4F]
    (Let) let
      (StgNonRec)
        (VanillaId) sat5F =
        (THUNK)
          (App) (VanillaId) APPFL.Base.. (VarArg) (VanillaId) APPFL.List.++ (VarArg) (VanillaId) f4F
    in (App) (VanillaId) APPFL.List.foldr (VarArg) (VanillaId) sat5F (VarArg) (DCWorkerId) GHC.Types.[]
(StgNonRec)
  (VanillaId) APPFL.List.concat =
  (FUN)
  [(VanillaId) etaG]
    (App) (VanillaId) APPFL.List.foldr (VarArg) (VanillaId) APPFL.List.++ (VarArg) (DCWorkerId) GHC.Types.[] (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) a6F =
  (FUN)
  [(VanillaId) ds7F ,(VanillaId) ds18F]
    (Case) (App) (VanillaId) ds7F = (VanillaId) wild9F
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,) (VanillaId) a8-F (VanillaId) b1_F
          -> (Let) let
               (StgNonRec)
                 (VanillaId) satAG =
                 (THUNK)
                   (Case) (App) (VanillaId) ds18F = (VanillaId) wild1BG
                     (AlgAlt)
                       (DataAlt) GHC.Tuple.(,) (VanillaId) asCG (VanillaId) bsDG
                         -> (App) (VanillaId) bsDG
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satEG =
                    (CONish) Cons [(VarArg) (VanillaId) b1_F ,(VarArg) (VanillaId) satAG]
                    Worker/Wrapper: (DCWorkerId) GHC.Types.:
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satFG =
                       (THUNK)
                         (Case) (App) (VanillaId) ds18F = (VanillaId) wild1GG
                           (AlgAlt)
                             (DataAlt) GHC.Tuple.(,) (VanillaId) asHG (VanillaId) bsIG
                               -> (App) (VanillaId) asHG
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satJG =
                          (CONish) Cons [(VarArg) (VanillaId) a8-F ,(VarArg) (VanillaId) satFG]
                          Worker/Wrapper: (DCWorkerId) GHC.Types.:
                      in (ConApp) GHC.Tuple.(,) [(VarArg) (VanillaId) satJG ,(VarArg) (VanillaId) satEG]
(StgNonRec)
  (VanillaId) a1KG =
  (CONish) GHC.Tuple.(,) [(VarArg) (DCWorkerId) GHC.Types.[] ,(VarArg) (DCWorkerId) GHC.Types.[]]
  Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,)
(StgNonRec)
  (VanillaId) APPFL.List.unzip =
  (FUN)
  [(VanillaId) etaG]
    (App) (VanillaId) APPFL.List.foldr (VarArg) (VanillaId) a6F (VarArg) (VanillaId) a1KG (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) a2LG =
  (FUN)
  [(VanillaId) dsMG ,(VanillaId) ds1NG]
    (Case) (App) (VanillaId) dsMG = (VanillaId) wildOG
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,) (VanillaId) a8PG (VanillaId) b1QG (VanillaId) c1RG
          -> (Let) let
               (StgNonRec)
                 (VanillaId) satSG =
                 (THUNK)
                   (Case) (App) (VanillaId) ds1NG = (VanillaId) wild1TG
                     (AlgAlt)
                       (DataAlt) GHC.Tuple.(,,) (VanillaId) asUG (VanillaId) bsVG (VanillaId) csWG
                         -> (App) (VanillaId) csWG
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satXG =
                    (CONish) Cons [(VarArg) (VanillaId) c1RG ,(VarArg) (VanillaId) satSG]
                    Worker/Wrapper: (DCWorkerId) GHC.Types.:
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satYG =
                       (THUNK)
                         (Case) (App) (VanillaId) ds1NG = (VanillaId) wild1ZG
                           (AlgAlt)
                             (DataAlt) GHC.Tuple.(,,) (VanillaId) asaG (VanillaId) bsbG (VanillaId) cscG
                               -> (App) (VanillaId) bsbG
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satdG =
                          (CONish) Cons [(VarArg) (VanillaId) b1QG ,(VarArg) (VanillaId) satYG]
                          Worker/Wrapper: (DCWorkerId) GHC.Types.:
                      in (Let) let
                           (StgNonRec)
                             (VanillaId) sateG =
                             (THUNK)
                               (Case) (App) (VanillaId) ds1NG = (VanillaId) wild1fG
                                 (AlgAlt)
                                   (DataAlt) GHC.Tuple.(,,) (VanillaId) asgG (VanillaId) bshG (VanillaId) csiG
                                     -> (App) (VanillaId) asgG
                         in (Let) let
                              (StgNonRec)
                                (VanillaId) satjG =
                                (CONish) Cons [(VarArg) (VanillaId) a8PG ,(VarArg) (VanillaId) sateG]
                                Worker/Wrapper: (DCWorkerId) GHC.Types.:
                            in (ConApp) GHC.Tuple.(,,) [(VarArg) (VanillaId) satjG ,(VarArg) (VanillaId) satdG ,(VarArg) (VanillaId) satXG]
(StgNonRec)
  (VanillaId) a3kG =
  (CONish) GHC.Tuple.(,,) [(VarArg) (DCWorkerId) GHC.Types.[] ,(VarArg) (DCWorkerId) GHC.Types.[] ,(VarArg) (DCWorkerId) GHC.Types.[]]
  Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,,)
(StgNonRec)
  (VanillaId) APPFL.List.unzip3 =
  (FUN)
  [(VanillaId) etaG]
    (App) (VanillaId) APPFL.List.foldr (VarArg) (VanillaId) a2LG (VarArg) (VanillaId) a3kG (VarArg) (VanillaId) etaG
(StgRec)
  (VanillaId) APPFL.List.foldl =
  (FUN)
  [(VanillaId) flG ,(VanillaId) smG ,(VanillaId) dsnG]
    (Case) (App) (VanillaId) dsnG = (VanillaId) wildoG
      (AlgAlt)
        (DataAlt) Nil -> (App) (VanillaId) smG
        (DataAlt) Cons (VanillaId) xpG (VanillaId) xsqG
          -> (Let) let
               (StgNonRec)
                 (VanillaId) satrG =
                 (THUNK)
                   (App) (VanillaId) flG (VarArg) (VanillaId) smG (VarArg) (VanillaId) xpG
             in (App) (VanillaId) APPFL.List.foldl (VarArg) (VanillaId) flG (VarArg) (VanillaId) satrG (VarArg) (VanillaId) xsqG
(StgNonRec)
  (VanillaId) APPFL.List.foldl1 =
  (FUN)
  [(VanillaId) fsG ,(VanillaId) dstG]
    (Case) (App) (VanillaId) dstG = (VanillaId) wilduG
      (AlgAlt)
        (DataAlt) Nil
          -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:264:1-39|function foldl1"
        (DataAlt) Cons (VanillaId) xvG (VanillaId) xswG
          -> (App) (VanillaId) APPFL.List.foldl (VarArg) (VanillaId) fsG (VarArg) (VanillaId) xvG (VarArg) (VanillaId) xswG
(StgNonRec)
  (VanillaId) APPFL.List.maximum =
  (FUN)
  [(VanillaId) $dOrdxG ,(VanillaId) xsyG]
    (Let) let
      (StgNonRec)
        (VanillaId) satzG =
        (THUNK)
          (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.max (VarArg) (VanillaId) $dOrdxG
    in (App) (VanillaId) APPFL.List.foldl1 (VarArg) (VanillaId) satzG (VarArg) (VanillaId) xsyG
(StgNonRec)
  (VanillaId) APPFL.List.minimum =
  (FUN)
  [(VanillaId) $dOrd0G ,(VanillaId) xs1G]
    (Let) let
      (StgNonRec)
        (VanillaId) sat2G =
        (THUNK)
          (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.min (VarArg) (VanillaId) $dOrd0G
    in (App) (VanillaId) APPFL.List.foldl1 (VarArg) (VanillaId) sat2G (VarArg) (VanillaId) xs1G
(StgNonRec)
  (VanillaId) a43G =
  (CONish) GHC.Types.I# [(LitArg) (MachInt)0]
  Worker/Wrapper: (DCWorkerId) GHC.Types.I#
(StgNonRec)
  (VanillaId) APPFL.List.sum =
  (FUN)
  [(VanillaId) etaG]
    (App) (VanillaId) APPFL.List.foldl (VarArg) (VanillaId) APPFL.Num.+ (VarArg) (VanillaId) a43G (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) a54G =
  (CONish) GHC.Types.I# [(LitArg) (MachInt)1]
  Worker/Wrapper: (DCWorkerId) GHC.Types.I#
(StgNonRec)
  (VanillaId) APPFL.List.product =
  (FUN)
  [(VanillaId) etaG]
    (App) (VanillaId) APPFL.List.foldl (VarArg) (VanillaId) APPFL.Num.* (VarArg) (VanillaId) a54G (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) a65G =
  (THUNK)
    (App) (VanillaId) APPFL.Base.flip (VarArg) (DCWorkerId) GHC.Types.:
(StgNonRec)
  (VanillaId) APPFL.List.reverse =
  (FUN)
  [(VanillaId) etaG]
    (App) (VanillaId) APPFL.List.foldl (VarArg) (VanillaId) a65G (VarArg) (DCWorkerId) GHC.Types.[] (VarArg) (VanillaId) etaG
(StgRec)
  (VanillaId) APPFL.List.filter =
  (FUN)
  [(VanillaId) _pred6G ,(VanillaId) ds7G]
    (Case) (App) (VanillaId) ds7G = (VanillaId) wild8G
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) Nil []
        (DataAlt) Cons (VanillaId) x9G (VanillaId) xs-G
          -> (Case) (App) (VanillaId) _pred6G (VarArg) (VanillaId) x9G = (VanillaId) wild1_G
               (AlgAlt)
                 (DataAlt) GHC.Types.False
                   -> (Case) (App) (VanillaId) APPFL.Base.otherwise = (VanillaId) wild2AH
                        (AlgAlt)
                          (DataAlt) GHC.Types.False
                            -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(175,1)-(178,35)|function filter"
                          (DataAlt) GHC.Types.True
                            -> (App) (VanillaId) APPFL.List.filter (VarArg) (VanillaId) _pred6G (VarArg) (VanillaId) xs-G
                 (DataAlt) GHC.Types.True
                   -> (Let) let
                        (StgNonRec)
                          (VanillaId) satBH =
                          (THUNK)
                            (App) (VanillaId) APPFL.List.filter (VarArg) (VanillaId) _pred6G (VarArg) (VanillaId) xs-G
                      in (ConApp) Cons [(VarArg) (VanillaId) x9G ,(VarArg) (VanillaId) satBH]
(StgRec)
  (VanillaId) APPFL.List.length =
  (FUN)
  [(VanillaId) dsCH]
    (Case) (App) (VanillaId) dsCH = (VanillaId) wildDH
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) GHC.Types.I# [(LitArg) (MachInt)0]
        (DataAlt) Cons (VanillaId) xEH (VanillaId) xsFH
          -> (Let) let
               (StgNonRec)
                 (VanillaId) satGH =
                 (THUNK)
                   (App) (VanillaId) APPFL.List.length (VarArg) (VanillaId) xsFH
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satHH =
                    (CONish) GHC.Types.I# [(LitArg) (MachInt)1]
                    Worker/Wrapper: (DCWorkerId) GHC.Types.I#
                in (App) (VanillaId) APPFL.Num.+ (VarArg) (VanillaId) satHH (VarArg) (VanillaId) satGH
(StgNonRec)
  (VanillaId) APPFL.List.null =
  (FUN)
  [(VanillaId) dsIH]
    (Case) (App) (VanillaId) dsIH = (VanillaId) wildJH
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) GHC.Types.True []
        (DataAlt) Cons (VanillaId) ds1KH (VanillaId) ds2LH
          -> (ConApp) GHC.Types.False []
(StgRec)
  (VanillaId) APPFL.List.init =
  (FUN)
  [(VanillaId) dsMH]
    (Case) (App) (VanillaId) dsMH = (VanillaId) wildNH
      (AlgAlt)
        (DataAlt) Nil
          -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(122,1)-(123,38)|function init"
        (DataAlt) Cons (VanillaId) xOH (VanillaId) ds1PH
          -> (Case) (App) (VanillaId) ds1PH = (VanillaId) wild1QH
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) Nil []
                 (DataAlt) Cons (VanillaId) ipvRH (VanillaId) ipv1SH
                   -> (Let) let
                        (StgNonRec)
                          (VanillaId) satTH =
                          (THUNK)
                            (App) (VanillaId) APPFL.List.init (VarArg) (VanillaId) wild1QH
                      in (ConApp) Cons [(VarArg) (VanillaId) xOH ,(VarArg) (VanillaId) satTH]
(StgRec)
  (VanillaId) APPFL.List.last =
  (FUN)
  [(VanillaId) dsUH]
    (Case) (App) (VanillaId) dsUH = (VanillaId) wildVH
      (AlgAlt)
        (DataAlt) Nil
          -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:(103,1)-(104,34)|function last"
        (DataAlt) Cons (VanillaId) xWH (VanillaId) ds1XH
          -> (Case) (App) (VanillaId) ds1XH = (VanillaId) wild1YH
               (AlgAlt)
                 (DataAlt) Nil -> (App) (VanillaId) xWH
                 (DataAlt) Cons (VanillaId) ipvZH (VanillaId) ipv1aH
                   -> (App) (VanillaId) APPFL.List.last (VarArg) (VanillaId) wild1YH
(StgNonRec)
  (VanillaId) APPFL.List.tail =
  (FUN)
  [(VanillaId) dsbH]
    (Case) (App) (VanillaId) dsbH = (VanillaId) wildcH
      (AlgAlt)
        (DataAlt) Nil
          -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:97:1-29|function tail"
        (DataAlt) Cons (VanillaId) ds1dH (VanillaId) xseH
          -> (App) (VanillaId) xseH
(StgNonRec)
  (VanillaId) APPFL.List.head =
  (FUN)
  [(VanillaId) dsfH]
    (Case) (App) (VanillaId) dsfH = (VanillaId) wildgH
      (AlgAlt)
        (DataAlt) Nil
          -> (App) (VanillaId) stg_case_not_exhaustive (LitArg) (MachStr)"../prelude/APPFL/List.hs:68:1-28|function head"
        (DataAlt) Cons (VanillaId) xhH (VanillaId) ds1iH
          -> (App) (VanillaId) xhH
(StgRec)
  (VanillaId) APPFL.List.map =
  (FUN)
  [(VanillaId) dsjH ,(VanillaId) ds1kH]
    (Case) (App) (VanillaId) ds1kH = (VanillaId) wildlH
      (AlgAlt)
        (DataAlt) Nil -> (ConApp) Nil []
        (DataAlt) Cons (VanillaId) xmH (VanillaId) xsnH
          -> (Let) let
               (StgNonRec)
                 (VanillaId) satoH =
                 (THUNK)
                   (App) (VanillaId) APPFL.List.map (VarArg) (VanillaId) dsjH (VarArg) (VanillaId) xsnH
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satpH =
                    (THUNK) (App) (VanillaId) dsjH (VarArg) (VanillaId) xmH
                in (ConApp) Cons [(VarArg) (VanillaId) satpH ,(VarArg) (VanillaId) satoH]
(StgNonRec)
  (VanillaId) APPFL.List.any =
  (FUN)
  [(VanillaId) pqH]
    (Let) let
      (StgNonRec)
        (VanillaId) satrH =
        (FUN)
        [(VanillaId) etaG]
          (App) (VanillaId) APPFL.List.map (VarArg) (VanillaId) pqH (VarArg) (VanillaId) etaG
    in (App) (VanillaId) APPFL.Base.. (VarArg) (VanillaId) APPFL.List.or (VarArg) (VanillaId) satrH
(StgNonRec)
  (VanillaId) APPFL.List.elem =
  (FUN)
  [(VanillaId) $dEqsH ,(VanillaId) xtH]
    (Let) let
      (StgNonRec)
        (VanillaId) satuH =
        (FUN)
        [(VanillaId) dsvH]
          (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEqsH (VarArg) (VanillaId) dsvH (VarArg) (VanillaId) xtH
    in (Let) let
         (StgNonRec)
           (VanillaId) satwH =
           (FUN)
           [(VanillaId) etaG]
             (App) (VanillaId) APPFL.List.map (VarArg) (VanillaId) satuH (VarArg) (VanillaId) etaG
       in (App) (VanillaId) APPFL.Base.. (VarArg) (VanillaId) APPFL.List.or (VarArg) (VanillaId) satwH
(StgNonRec)
  (VanillaId) APPFL.List.all =
  (FUN)
  [(VanillaId) pxH]
    (Let) let
      (StgNonRec)
        (VanillaId) satyH =
        (FUN)
        [(VanillaId) etaG]
          (App) (VanillaId) APPFL.List.map (VarArg) (VanillaId) pxH (VarArg) (VanillaId) etaG
    in (App) (VanillaId) APPFL.Base.. (VarArg) (VanillaId) APPFL.List.and (VarArg) (VanillaId) satyH
(StgNonRec)
  (VanillaId) APPFL.List.notElem =
  (FUN)
  [(VanillaId) $dEqzH ,(VanillaId) x0H]
    (Let) let
      (StgNonRec)
        (VanillaId) sat1H =
        (FUN)
        [(VanillaId) ds2H]
          (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes./= (VarArg) (VanillaId) $dEqzH (VarArg) (VanillaId) ds2H (VarArg) (VanillaId) x0H
    in (Let) let
         (StgNonRec)
           (VanillaId) sat3H =
           (FUN)
           [(VanillaId) etaG]
             (App) (VanillaId) APPFL.List.map (VarArg) (VanillaId) sat1H (VarArg) (VanillaId) etaG
       in (App) (VanillaId) APPFL.Base.. (VarArg) (VanillaId) APPFL.List.and (VarArg) (VanillaId) sat3H
(StgNonRec)
  (VanillaId) APPFL.Tuple.uncurry =
  (FUN)
  [(VanillaId) f4H ,(VanillaId) ds5H]
    (Case) (App) (VanillaId) ds5H = (VanillaId) wild6H
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,) (VanillaId) x7H (VanillaId) y8H
          -> (App) (VanillaId) f4H (VarArg) (VanillaId) x7H (VarArg) (VanillaId) y8H
(StgNonRec)
  (VanillaId) APPFL.Tuple.curry =
  (FUN)
  [(VanillaId) f9H ,(VanillaId) x-H ,(VanillaId) y_H]
    (Let) let
      (StgNonRec)
        (VanillaId) satAI =
        (CONish) GHC.Tuple.(,) [(VarArg) (VanillaId) x-H ,(VarArg) (VanillaId) y_H]
        Worker/Wrapper: (DCWorkerId) GHC.Tuple.(,)
    in (App) (VanillaId) f9H (VarArg) (VanillaId) satAI
(StgNonRec)
  (VanillaId) APPFL.Tuple.snd =
  (FUN)
  [(VanillaId) dsBI]
    (Case) (App) (VanillaId) dsBI = (VanillaId) wildCI
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,) (VanillaId) aDI (VanillaId) bEI
          -> (App) (VanillaId) bEI
(StgNonRec)
  (VanillaId) APPFL.Tuple.fst =
  (FUN)
  [(VanillaId) dsFI]
    (Case) (App) (VanillaId) dsFI = (VanillaId) wildGI
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,) (VanillaId) aHI (VanillaId) bII
          -> (App) (VanillaId) aHI
(StgNonRec)
  (VanillaId) APPFL.Types.isTrue# =
  (FUN)
  [(VanillaId) dsJI]
    (Case) (App) (VanillaId) dsJI = (VanillaId) ds1KI
      (PrimAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (LitAlt) (MachInt)1 -> (ConApp) GHC.Types.True []
(StgNonRec)
  (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.$p1Ord =
  (FUN)
  [(VanillaId) tplLI]
    (Case) (App) (VanillaId) tplLI = (VanillaId) tplMI
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Ord (VanillaId) tplNI (VanillaId) tplOI (VanillaId) tplPI (VanillaId) tplQI (VanillaId) tplRI (VanillaId) tplSI (VanillaId) tplTI (VanillaId) tplUI
          -> (App) (VanillaId) tplNI
(StgNonRec)
  (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare =
  (FUN)
  [(VanillaId) tplVI]
    (Case) (App) (VanillaId) tplVI = (VanillaId) tplWI
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Ord (VanillaId) tplXI (VanillaId) tplYI (VanillaId) tplZI (VanillaId) tplaI (VanillaId) tplbI (VanillaId) tplcI (VanillaId) tpldI (VanillaId) tpleI
          -> (App) (VanillaId) tplYI
(StgNonRec)
  (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.< =
  (FUN)
  [(VanillaId) tplfI]
    (Case) (App) (VanillaId) tplfI = (VanillaId) tplgI
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Ord (VanillaId) tplhI (VanillaId) tpliI (VanillaId) tpljI (VanillaId) tplkI (VanillaId) tpllI (VanillaId) tplmI (VanillaId) tplnI (VanillaId) tploI
          -> (App) (VanillaId) tpljI
(StgNonRec)
  (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= =
  (FUN)
  [(VanillaId) tplpI]
    (Case) (App) (VanillaId) tplpI = (VanillaId) tplqI
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Ord (VanillaId) tplrI (VanillaId) tplsI (VanillaId) tpltI (VanillaId) tpluI (VanillaId) tplvI (VanillaId) tplwI (VanillaId) tplxI (VanillaId) tplyI
          -> (App) (VanillaId) tpluI
(StgNonRec)
  (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.> =
  (FUN)
  [(VanillaId) tplzI]
    (Case) (App) (VanillaId) tplzI = (VanillaId) tpl0I
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Ord (VanillaId) tpl1I (VanillaId) tpl2I (VanillaId) tpl3I (VanillaId) tpl4I (VanillaId) tpl5I (VanillaId) tpl6I (VanillaId) tpl7I (VanillaId) tpl8I
          -> (App) (VanillaId) tpl5I
(StgNonRec)
  (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.>= =
  (FUN)
  [(VanillaId) tpl9I]
    (Case) (App) (VanillaId) tpl9I = (VanillaId) tpl-I
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Ord (VanillaId) tpl_I (VanillaId) tplAJ (VanillaId) tplBJ (VanillaId) tplCJ (VanillaId) tplDJ (VanillaId) tplEJ (VanillaId) tplFJ (VanillaId) tplGJ
          -> (App) (VanillaId) tplEJ
(StgNonRec)
  (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.max =
  (FUN)
  [(VanillaId) tplHJ]
    (Case) (App) (VanillaId) tplHJ = (VanillaId) tplIJ
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Ord (VanillaId) tplJJ (VanillaId) tplKJ (VanillaId) tplLJ (VanillaId) tplMJ (VanillaId) tplNJ (VanillaId) tplOJ (VanillaId) tplPJ (VanillaId) tplQJ
          -> (App) (VanillaId) tplPJ
(StgNonRec)
  (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.min =
  (FUN)
  [(VanillaId) tplRJ]
    (Case) (App) (VanillaId) tplRJ = (VanillaId) tplSJ
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Ord (VanillaId) tplTJ (VanillaId) tplUJ (VanillaId) tplVJ (VanillaId) tplWJ (VanillaId) tplXJ (VanillaId) tplYJ (VanillaId) tplZJ (VanillaId) tplaJ
          -> (App) (VanillaId) tplaJ
(StgNonRec)
  (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== =
  (FUN)
  [(VanillaId) tplbJ]
    (Case) (App) (VanillaId) tplbJ = (VanillaId) tplcJ
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Eq (VanillaId) tpldJ (VanillaId) tpleJ
          -> (App) (VanillaId) tpldJ
(StgNonRec)
  (ClassOpId) Selectors: [== ,/=] APPFL.Classes./= =
  (FUN)
  [(VanillaId) tplfJ]
    (Case) (App) (VanillaId) tplfJ = (VanillaId) tplgJ
      (AlgAlt)
        (DataAlt) APPFL.Classes.D:Eq (VanillaId) tplhJ (VanillaId) tpliJ
          -> (App) (VanillaId) tpliJ
(StgNonRec)
  (VanillaId) APPFL.Classes.$dmmin =
  (FUN)
  [(VanillaId) $dOrd7jJ ,(VanillaId) xkJ ,(VanillaId) ylJ]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd7jJ (VarArg) (VanillaId) xkJ (VarArg) (VanillaId) ylJ = (VanillaId) wildmJ
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) ylJ
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xkJ
(StgNonRec)
  (VanillaId) APPFL.Classes.$dmmax =
  (FUN)
  [(VanillaId) $dOrd7nJ ,(VanillaId) xoJ ,(VanillaId) ypJ]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd7nJ (VarArg) (VanillaId) xoJ (VarArg) (VanillaId) ypJ = (VanillaId) wildqJ
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) xoJ
        (DataAlt) GHC.Types.True -> (App) (VanillaId) ypJ
(StgNonRec)
  (VanillaId) APPFL.Classes.$dm>= =
  (FUN)
  [(VanillaId) $dOrd7rJ ,(VanillaId) xsJ ,(VanillaId) ytJ]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7rJ (VarArg) (VanillaId) xsJ (VarArg) (VanillaId) ytJ = (VanillaId) wilduJ
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) APPFL.Classes.$dm> =
  (FUN)
  [(VanillaId) $dOrd7vJ ,(VanillaId) xwJ ,(VanillaId) yxJ]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7vJ (VarArg) (VanillaId) xwJ (VarArg) (VanillaId) yxJ = (VanillaId) wildyJ
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
(StgNonRec)
  (VanillaId) APPFL.Classes.$dm<= =
  (FUN)
  [(VanillaId) $dOrd7zJ ,(VanillaId) x0J ,(VanillaId) y1J]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7zJ (VarArg) (VanillaId) x0J (VarArg) (VanillaId) y1J = (VanillaId) wild2J
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) APPFL.Classes.$dm< =
  (FUN)
  [(VanillaId) $dOrd73J ,(VanillaId) x4J ,(VanillaId) y5J]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd73J (VarArg) (VanillaId) x4J (VarArg) (VanillaId) y5J = (VanillaId) wild6J
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
(StgNonRec)
  (VanillaId) APPFL.Classes.$dmcompare =
  (FUN)
  [(VanillaId) $dOrd77J ,(VanillaId) eta8J ,(VanillaId) eta19J]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.$p1Ord (VarArg) (VanillaId) $dOrd77J = (VanillaId) sat-J
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) sat-J (VarArg) (VanillaId) eta8J (VarArg) (VanillaId) eta19J = (VanillaId) wild_J
               (AlgAlt)
                 (DataAlt) GHC.Types.False
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd77J (VarArg) (VanillaId) eta8J (VarArg) (VanillaId) eta19J = (VanillaId) wild1AK
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.GT []
                          (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.LT []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.EQ []
(StgNonRec)
  (VanillaId) APPFL.Classes.not =
  (FUN)
  [(VanillaId) dsBK]
    (Case) (App) (VanillaId) dsBK = (VanillaId) wildCK
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) APPFL.Classes.$dm== =
  (FUN)
  [(VanillaId) $dEq5DK ,(VanillaId) xEK ,(VanillaId) yFK]
    (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes./= (VarArg) (VanillaId) $dEq5DK (VarArg) (VanillaId) xEK (VarArg) (VanillaId) yFK = (VanillaId) wildGK
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) APPFL.Classes.$dm/= =
  (FUN)
  [(VanillaId) $dEq5HK ,(VanillaId) xIK ,(VanillaId) yJK]
    (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5HK (VarArg) (VanillaId) xIK (VarArg) (VanillaId) yJK = (VanillaId) wildKK
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) APPFL.Classes.|| =
  (FUN)
  [(VanillaId) dsLK ,(VanillaId) ds1MK]
    (Case) (App) (VanillaId) dsLK = (VanillaId) wildNK
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) ds1MK
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.True []
(StgNonRec)
  (VanillaId) APPFL.Classes.&& =
  (FUN)
  [(VanillaId) dsOK ,(VanillaId) xPK]
    (Case) (App) (VanillaId) dsOK = (VanillaId) wildQK
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xPK
(StgNonRec)
  (VanillaId) APPFL.Classes.divInt# =
  (FUN)
  [(VanillaId) x#RK ,(VanillaId) y#SK]
    (LetNE) let
      (StgNonRec)
        (VanillaId) $jTK =
        (FUN)
        [(VanillaId) wUK]
          (Case) (Op) (Prim) <# [(VarArg) (VanillaId) x#RK ,(LitArg) (MachInt)0] = (VanillaId) satVK
            (PrimAlt)
              (DEFAULT) _
                -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satVK = (VanillaId) wildWK
                     (AlgAlt)
                       (DataAlt) GHC.Types.False
                         -> (Op) (Prim) quotInt# [(VarArg) (VanillaId) x#RK ,(VarArg) (VanillaId) y#SK]
                       (DataAlt) GHC.Types.True
                         -> (Case) (Op) (Prim) ># [(VarArg) (VanillaId) y#SK ,(LitArg) (MachInt)0] = (VanillaId) satXK
                              (PrimAlt)
                                (DEFAULT) _
                                  -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satXK = (VanillaId) wild1YK
                                       (AlgAlt)
                                         (DataAlt) GHC.Types.False
                                           -> (Op) (Prim) quotInt# [(VarArg) (VanillaId) x#RK ,(VarArg) (VanillaId) y#SK]
                                         (DataAlt) GHC.Types.True
                                           -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) x#RK ,(LitArg) (MachInt)1] = (VanillaId) satZK
                                                (PrimAlt)
                                                  (DEFAULT) _
                                                    -> (Case) (Op) (Prim) quotInt# [(VarArg) (VanillaId) satZK ,(VarArg) (VanillaId) y#SK] = (VanillaId) wild2aK
                                                         (PrimAlt)
                                                           (DEFAULT) _
                                                             -> (Op) (Prim) -# [(VarArg) (VanillaId) wild2aK ,(LitArg) (MachInt)1]
    in (Case) (Op) (Prim) ># [(VarArg) (VanillaId) x#RK ,(LitArg) (MachInt)0] = (VanillaId) satbK
         (PrimAlt)
           (DEFAULT) _
             -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satbK = (VanillaId) wildcK
                  (AlgAlt)
                    (DataAlt) GHC.Types.False
                      -> (App) (VanillaId) $jTK (VarArg) (VanillaId) APPFL.Prim.void#
                    (DataAlt) GHC.Types.True
                      -> (Case) (Op) (Prim) <# [(VarArg) (VanillaId) y#SK ,(LitArg) (MachInt)0] = (VanillaId) satdK
                           (PrimAlt)
                             (DEFAULT) _
                               -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satdK = (VanillaId) wild1eK
                                    (AlgAlt)
                                      (DataAlt) GHC.Types.False
                                        -> (App) (VanillaId) $jTK (VarArg) (VanillaId) APPFL.Prim.void#
                                      (DataAlt) GHC.Types.True
                                        -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) x#RK ,(LitArg) (MachInt)1] = (VanillaId) satfK
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (Case) (Op) (Prim) quotInt# [(VarArg) (VanillaId) satfK ,(VarArg) (VanillaId) y#SK] = (VanillaId) wild2gK
                                                      (PrimAlt)
                                                        (DEFAULT) _
                                                          -> (Op) (Prim) -# [(VarArg) (VanillaId) wild2gK ,(LitArg) (MachInt)1]
(StgNonRec)
  (VanillaId) APPFL.Classes.modInt# =
  (FUN)
  [(VanillaId) x#hK ,(VanillaId) y#iK]
    (Case) (Op) (Prim) remInt# [(VarArg) (VanillaId) x#hK ,(VarArg) (VanillaId) y#iK] = (VanillaId) r#jK
      (PrimAlt)
        (DEFAULT) _
          -> (LetNE) let
               (StgNonRec)
                 (VanillaId) $jkK =
                 (FUN)
                 [(VanillaId) wlK]
                   (Case) (App) (VanillaId) r#jK = (VanillaId) wildmK
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)1 = (VanillaId) wild1nK
                              (AlgAlt)
                                (DataAlt) GHC.Types.False -> (Lit) (MachInt)0
                                (DataAlt) GHC.Types.True
                                  -> (Op) (Prim) +# [(VarArg) (VanillaId) wildmK ,(VarArg) (VanillaId) y#iK]
                       (LitAlt) (MachInt)0
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)0 = (VanillaId) wild1oK
                              (AlgAlt)
                                (DataAlt) GHC.Types.False -> (Lit) (MachInt)0
                                (DataAlt) GHC.Types.True -> (App) (VanillaId) y#iK
             in (LetNE) let
                  (StgNonRec)
                    (VanillaId) $j1pK =
                    (FUN)
                    [(VanillaId) wqK]
                      (Case) (Op) (Prim) <# [(VarArg) (VanillaId) x#hK ,(LitArg) (MachInt)0] = (VanillaId) satrK
                        (PrimAlt)
                          (DEFAULT) _
                            -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satrK = (VanillaId) wildsK
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (App) (VanillaId) r#jK
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (Op) (Prim) ># [(VarArg) (VanillaId) y#iK ,(LitArg) (MachInt)0] = (VanillaId) sattK
                                          (PrimAlt)
                                            (DEFAULT) _
                                              -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sattK = (VanillaId) wild1uK
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (App) (VanillaId) r#jK
                                                     (DataAlt) GHC.Types.True
                                                       -> (App) (VanillaId) $jkK (VarArg) (VanillaId) APPFL.Prim.void#
                in (Case) (Op) (Prim) ># [(VarArg) (VanillaId) x#hK ,(LitArg) (MachInt)0] = (VanillaId) satvK
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satvK = (VanillaId) wildwK
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (App) (VanillaId) $j1pK (VarArg) (VanillaId) APPFL.Prim.void#
                                (DataAlt) GHC.Types.True
                                  -> (Case) (Op) (Prim) <# [(VarArg) (VanillaId) y#iK ,(LitArg) (MachInt)0] = (VanillaId) satxK
                                       (PrimAlt)
                                         (DEFAULT) _
                                           -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satxK = (VanillaId) wild1yK
                                                (AlgAlt)
                                                  (DataAlt) GHC.Types.False
                                                    -> (App) (VanillaId) $j1pK (VarArg) (VanillaId) APPFL.Prim.void#
                                                  (DataAlt) GHC.Types.True
                                                    -> (App) (VanillaId) $jkK (VarArg) (VanillaId) APPFL.Prim.void#
(StgNonRec)
  (VanillaId) APPFL.Classes.compareInt# =
  (FUN)
  [(VanillaId) x#zK ,(VanillaId) y#0K]
    (Case) (Op) (Prim) <# [(VarArg) (VanillaId) x#zK ,(VarArg) (VanillaId) y#0K] = (VanillaId) sat1K
      (PrimAlt)
        (DEFAULT) _
          -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat1K = (VanillaId) wild2K
               (AlgAlt)
                 (DataAlt) GHC.Types.False
                   -> (Case) (Op) (Prim) ==# [(VarArg) (VanillaId) x#zK ,(VarArg) (VanillaId) y#0K] = (VanillaId) sat3K
                        (PrimAlt)
                          (DEFAULT) _
                            -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat3K = (VanillaId) wild14K
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.GT []
                                   (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.EQ []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.LT []
(StgNonRec)
  (VanillaId) APPFL.Classes.compareInt =
  (FUN)
  [(VanillaId) ds5K ,(VanillaId) ds16K]
    (Case) (App) (VanillaId) ds5K = (VanillaId) wild7K
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) x#8K
          -> (Case) (App) (VanillaId) ds16K = (VanillaId) wild19K
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) y#-K
                   -> (App) (VanillaId) APPFL.Classes.compareInt# (VarArg) (VanillaId) x#8K (VarArg) (VanillaId) y#-K
(StgNonRec)
  (VanillaId) APPFL.Classes.leInt =
  (FUN)
  [(VanillaId) eta_K ,(VanillaId) eta1AL]
    (Case) (App) (VanillaId) eta_K = (VanillaId) wildBL
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) xCL
          -> (Case) (App) (VanillaId) eta1AL = (VanillaId) wild1DL
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yEL
                   -> (Case) (Op) (Prim) <=# [(VarArg) (VanillaId) xCL ,(VarArg) (VanillaId) yEL] = (VanillaId) satFL
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satFL
(StgNonRec)
  (VanillaId) APPFL.Classes.ltInt =
  (FUN)
  [(VanillaId) etaGL ,(VanillaId) eta1HL]
    (Case) (App) (VanillaId) etaGL = (VanillaId) wildIL
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) xJL
          -> (Case) (App) (VanillaId) eta1HL = (VanillaId) wild1KL
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yLL
                   -> (Case) (Op) (Prim) <# [(VarArg) (VanillaId) xJL ,(VarArg) (VanillaId) yLL] = (VanillaId) satML
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satML
(StgNonRec)
  (VanillaId) APPFL.Classes.geInt =
  (FUN)
  [(VanillaId) etaNL ,(VanillaId) eta1OL]
    (Case) (App) (VanillaId) etaNL = (VanillaId) wildPL
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) xQL
          -> (Case) (App) (VanillaId) eta1OL = (VanillaId) wild1RL
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) ySL
                   -> (Case) (Op) (Prim) >=# [(VarArg) (VanillaId) xQL ,(VarArg) (VanillaId) ySL] = (VanillaId) satTL
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satTL
(StgNonRec)
  (VanillaId) APPFL.Classes.gtInt =
  (FUN)
  [(VanillaId) etaUL ,(VanillaId) eta1VL]
    (Case) (App) (VanillaId) etaUL = (VanillaId) wildWL
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) xXL
          -> (Case) (App) (VanillaId) eta1VL = (VanillaId) wild1YL
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yZL
                   -> (Case) (Op) (Prim) ># [(VarArg) (VanillaId) xXL ,(VarArg) (VanillaId) yZL] = (VanillaId) sataL
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sataL
(StgNonRec)
  (VanillaId) APPFL.Classes.>| =
  (FUN)
  [(VanillaId) dsbL ,(VanillaId) bcL]
    (Case) (App) (VanillaId) dsbL = (VanillaId) wilddL
      (AlgAlt)
        (DEFAULT) _ -> (App) (VanillaId) wilddL
        (DataAlt) GHC.Types.EQ -> (App) (VanillaId) bcL
(StgNonRec)
  (VanillaId) APPFL.Classes.<> =
  (FUN)
  [(VanillaId) etaG]
    (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) etaG
(StgNonRec)
  (VanillaId) APPFL.Classes.neInt =
  (FUN)
  [(VanillaId) etaeL ,(VanillaId) eta1fL]
    (Case) (App) (VanillaId) etaeL = (VanillaId) wildgL
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) xhL
          -> (Case) (App) (VanillaId) eta1fL = (VanillaId) wild1iL
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yjL
                   -> (Case) (Op) (Prim) /=# [(VarArg) (VanillaId) xhL ,(VarArg) (VanillaId) yjL] = (VanillaId) satkL
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satkL
(StgNonRec)
  (VanillaId) APPFL.Classes.eqInt =
  (FUN)
  [(VanillaId) etalL ,(VanillaId) eta1mL]
    (Case) (App) (VanillaId) etalL = (VanillaId) wildnL
      (AlgAlt)
        (DataAlt) GHC.Types.I# (VanillaId) xoL
          -> (Case) (App) (VanillaId) eta1mL = (VanillaId) wild1pL
               (AlgAlt)
                 (DataAlt) GHC.Types.I# (VanillaId) yqL
                   -> (Case) (Op) (Prim) ==# [(VarArg) (VanillaId) xoL ,(VarArg) (VanillaId) yqL] = (VanillaId) satrL
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satrL
(StgNonRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [Int] APPFL.Classes.$fEqInt =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) APPFL.Classes.eqInt ,(VarArg) (VanillaId) APPFL.Classes.neInt]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
(StgNonRec)
  (VanillaId) $c==sL =
  (FUN)
  [(VanillaId) dstL ,(VanillaId) ds1uL]
    (Case) (App) (VanillaId) dstL = (VanillaId) wildvL
      (AlgAlt)
        (DataAlt) GHC.Tuple.()
          -> (Case) (App) (VanillaId) ds1uL = (VanillaId) wild1wL
               (AlgAlt) (DataAlt) GHC.Tuple.() -> (ConApp) GHC.Types.True []
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.()] APPFL.Classes.$fEq() =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) $c==sL ,(VarArg) (VanillaId) $c/=xL]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
  (VanillaId) $c/=xL =
  (FUN)
  [(VanillaId) etayL ,(VanillaId) eta1zL]
    (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.()] APPFL.Classes.$fEq() (VarArg) (VanillaId) etayL (VarArg) (VanillaId) eta1zL = (VanillaId) wild0L
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==11L =
  (FUN)
  [(VanillaId) $dEq52L ,(VanillaId) $dEq63L ,(VanillaId) ds4L ,(VanillaId) ds15L]
    (Case) (App) (VanillaId) ds4L = (VanillaId) wild6L
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,) (VanillaId) a147L (VanillaId) b18L
          -> (Case) (App) (VanillaId) ds15L = (VanillaId) wild19L
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,) (VanillaId) a15-L (VanillaId) b2_L
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq52L (VarArg) (VanillaId) a147L (VarArg) (VanillaId) a15-L = (VanillaId) wild2AM
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq63L (VarArg) (VanillaId) b18L (VarArg) (VanillaId) b2_L
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,) aBM bCM] APPFL.Classes.$fEq(,) =
  (FUN)
  [(VanillaId) $dEq5DM ,(VanillaId) $dEq6EM]
    (Let) let
      (StgNonRec)
        (VanillaId) satFM =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=1GM (VarArg) (VanillaId) $dEq5DM (VarArg) (VanillaId) $dEq6EM (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satHM =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==11L (VarArg) (VanillaId) $dEq5DM (VarArg) (VanillaId) $dEq6EM (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satHM ,(VarArg) (VanillaId) satFM]
  (VanillaId) $c/=1GM =
  (FUN)
  [(VanillaId) $dEq5IM ,(VanillaId) $dEq6JM ,(VanillaId) etaKM ,(VanillaId) eta1LM]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,) aBM bCM] APPFL.Classes.$fEq(,) (VarArg) (VanillaId) $dEq5IM (VarArg) (VanillaId) $dEq6JM = (VanillaId) satMM
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satMM (VarArg) (VanillaId) etaKM (VarArg) (VanillaId) eta1LM = (VanillaId) wildNM
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==2OM =
  (FUN)
  [(VanillaId) $dEq5PM ,(VanillaId) $dEq6QM ,(VanillaId) $dEq7RM ,(VanillaId) dsSM ,(VanillaId) ds1TM]
    (Case) (App) (VanillaId) dsSM = (VanillaId) wildUM
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,) (VanillaId) a14VM (VanillaId) b1WM (VanillaId) c1XM
          -> (Case) (App) (VanillaId) ds1TM = (VanillaId) wild1YM
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,) (VanillaId) a15ZM (VanillaId) b2aM (VanillaId) c2bM
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5PM (VarArg) (VanillaId) a14VM (VarArg) (VanillaId) a15ZM = (VanillaId) wild2cM
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6QM (VarArg) (VanillaId) b1WM (VarArg) (VanillaId) b2aM = (VanillaId) wild3dM
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7RM (VarArg) (VanillaId) c1XM (VarArg) (VanillaId) c2bM
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,) aeM bfM cgM] APPFL.Classes.$fEq(,,) =
  (FUN)
  [(VanillaId) $dEq5hM ,(VanillaId) $dEq6iM ,(VanillaId) $dEq7jM]
    (Let) let
      (StgNonRec)
        (VanillaId) satkM =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=2lM (VarArg) (VanillaId) $dEq5hM (VarArg) (VanillaId) $dEq6iM (VarArg) (VanillaId) $dEq7jM (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satmM =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==2OM (VarArg) (VanillaId) $dEq5hM (VarArg) (VanillaId) $dEq6iM (VarArg) (VanillaId) $dEq7jM (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satmM ,(VarArg) (VanillaId) satkM]
  (VanillaId) $c/=2lM =
  (FUN)
  [(VanillaId) $dEq5nM ,(VanillaId) $dEq6oM ,(VanillaId) $dEq7pM ,(VanillaId) etaqM ,(VanillaId) eta1rM]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,) aeM bfM cgM] APPFL.Classes.$fEq(,,) (VarArg) (VanillaId) $dEq5nM (VarArg) (VanillaId) $dEq6oM (VarArg) (VanillaId) $dEq7pM = (VanillaId) satsM
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satsM (VarArg) (VanillaId) etaqM (VarArg) (VanillaId) eta1rM = (VanillaId) wildtM
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==3uM =
  (FUN)
  [(VanillaId) $dEq5vM ,(VanillaId) $dEq6wM ,(VanillaId) $dEq7xM ,(VanillaId) $dEq8yM ,(VanillaId) dszM ,(VanillaId) ds10M]
    (Case) (App) (VanillaId) dszM = (VanillaId) wild1M
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,) (VanillaId) a142M (VanillaId) b13M (VanillaId) c14M (VanillaId) d15M
          -> (Case) (App) (VanillaId) ds10M = (VanillaId) wild16M
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,) (VanillaId) a157M (VanillaId) b28M (VanillaId) c29M (VanillaId) d2-M
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5vM (VarArg) (VanillaId) a142M (VarArg) (VanillaId) a157M = (VanillaId) wild2_M
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6wM (VarArg) (VanillaId) b13M (VarArg) (VanillaId) b28M = (VanillaId) wild3AN
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7xM (VarArg) (VanillaId) c14M (VarArg) (VanillaId) c29M = (VanillaId) wild4BN
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8yM (VarArg) (VanillaId) d15M (VarArg) (VanillaId) d2-M
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,) aCN bDN cEN dFN] APPFL.Classes.$fEq(,,,) =
  (FUN)
  [(VanillaId) $dEq5GN ,(VanillaId) $dEq6HN ,(VanillaId) $dEq7IN ,(VanillaId) $dEq8JN]
    (Let) let
      (StgNonRec)
        (VanillaId) satKN =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=3LN (VarArg) (VanillaId) $dEq5GN (VarArg) (VanillaId) $dEq6HN (VarArg) (VanillaId) $dEq7IN (VarArg) (VanillaId) $dEq8JN (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satMN =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==3uM (VarArg) (VanillaId) $dEq5GN (VarArg) (VanillaId) $dEq6HN (VarArg) (VanillaId) $dEq7IN (VarArg) (VanillaId) $dEq8JN (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satMN ,(VarArg) (VanillaId) satKN]
  (VanillaId) $c/=3LN =
  (FUN)
  [(VanillaId) $dEq5NN ,(VanillaId) $dEq6ON ,(VanillaId) $dEq7PN ,(VanillaId) $dEq8QN ,(VanillaId) etaRN ,(VanillaId) eta1SN]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,) aCN bDN cEN dFN] APPFL.Classes.$fEq(,,,) (VarArg) (VanillaId) $dEq5NN (VarArg) (VanillaId) $dEq6ON (VarArg) (VanillaId) $dEq7PN (VarArg) (VanillaId) $dEq8QN = (VanillaId) satTN
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satTN (VarArg) (VanillaId) etaRN (VarArg) (VanillaId) eta1SN = (VanillaId) wildUN
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==4VN =
  (FUN)
  [(VanillaId) $dEq5WN ,(VanillaId) $dEq6XN ,(VanillaId) $dEq7YN ,(VanillaId) $dEq8ZN ,(VanillaId) $dEq9aN ,(VanillaId) dsbN ,(VanillaId) ds1cN]
    (Case) (App) (VanillaId) dsbN = (VanillaId) wilddN
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,) (VanillaId) a14eN (VanillaId) b1fN (VanillaId) c1gN (VanillaId) d1hN (VanillaId) e1iN
          -> (Case) (App) (VanillaId) ds1cN = (VanillaId) wild1jN
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,) (VanillaId) a15kN (VanillaId) b2lN (VanillaId) c2mN (VanillaId) d2nN (VanillaId) e2oN
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5WN (VarArg) (VanillaId) a14eN (VarArg) (VanillaId) a15kN = (VanillaId) wild2pN
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6XN (VarArg) (VanillaId) b1fN (VarArg) (VanillaId) b2lN = (VanillaId) wild3qN
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7YN (VarArg) (VanillaId) c1gN (VarArg) (VanillaId) c2mN = (VanillaId) wild4rN
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8ZN (VarArg) (VanillaId) d1hN (VarArg) (VanillaId) d2nN = (VanillaId) wild5sN
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq9aN (VarArg) (VanillaId) e1iN (VarArg) (VanillaId) e2oN
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,) atN buN cvN dwN exN] APPFL.Classes.$fEq(,,,,) =
  (FUN)
  [(VanillaId) $dEq5yN ,(VanillaId) $dEq6zN ,(VanillaId) $dEq70N ,(VanillaId) $dEq81N ,(VanillaId) $dEq92N]
    (Let) let
      (StgNonRec)
        (VanillaId) sat3N =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=44N (VarArg) (VanillaId) $dEq5yN (VarArg) (VanillaId) $dEq6zN (VarArg) (VanillaId) $dEq70N (VarArg) (VanillaId) $dEq81N (VarArg) (VanillaId) $dEq92N (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) sat5N =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==4VN (VarArg) (VanillaId) $dEq5yN (VarArg) (VanillaId) $dEq6zN (VarArg) (VanillaId) $dEq70N (VarArg) (VanillaId) $dEq81N (VarArg) (VanillaId) $dEq92N (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) sat5N ,(VarArg) (VanillaId) sat3N]
  (VanillaId) $c/=44N =
  (FUN)
  [(VanillaId) $dEq56N ,(VanillaId) $dEq67N ,(VanillaId) $dEq78N ,(VanillaId) $dEq89N ,(VanillaId) $dEq9-N ,(VanillaId) eta_N ,(VanillaId) eta1AO]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,) atN buN cvN dwN exN] APPFL.Classes.$fEq(,,,,) (VarArg) (VanillaId) $dEq56N (VarArg) (VanillaId) $dEq67N (VarArg) (VanillaId) $dEq78N (VarArg) (VanillaId) $dEq89N (VarArg) (VanillaId) $dEq9-N = (VanillaId) satBO
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satBO (VarArg) (VanillaId) eta_N (VarArg) (VanillaId) eta1AO = (VanillaId) wildCO
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==5DO =
  (FUN)
  [(VanillaId) $dEq5EO ,(VanillaId) $dEq6FO ,(VanillaId) $dEq7GO ,(VanillaId) $dEq8HO ,(VanillaId) $dEq9IO ,(VanillaId) $dEq10JO ,(VanillaId) dsKO ,(VanillaId) ds1LO]
    (Case) (App) (VanillaId) dsKO = (VanillaId) wildMO
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,) (VanillaId) a14NO (VanillaId) b1OO (VanillaId) c1PO (VanillaId) d1QO (VanillaId) e1RO (VanillaId) f1SO
          -> (Case) (App) (VanillaId) ds1LO = (VanillaId) wild1TO
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,) (VanillaId) a15UO (VanillaId) b2VO (VanillaId) c2WO (VanillaId) d2XO (VanillaId) e2YO (VanillaId) f2ZO
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5EO (VarArg) (VanillaId) a14NO (VarArg) (VanillaId) a15UO = (VanillaId) wild2aO
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6FO (VarArg) (VanillaId) b1OO (VarArg) (VanillaId) b2VO = (VanillaId) wild3bO
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7GO (VarArg) (VanillaId) c1PO (VarArg) (VanillaId) c2WO = (VanillaId) wild4cO
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8HO (VarArg) (VanillaId) d1QO (VarArg) (VanillaId) d2XO = (VanillaId) wild5dO
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq9IO (VarArg) (VanillaId) e1RO (VarArg) (VanillaId) e2YO = (VanillaId) wild6eO
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq10JO (VarArg) (VanillaId) f1SO (VarArg) (VanillaId) f2ZO
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,) afO bgO chO diO ejO fkO] APPFL.Classes.$fEq(,,,,,) =
  (FUN)
  [(VanillaId) $dEq5lO ,(VanillaId) $dEq6mO ,(VanillaId) $dEq7nO ,(VanillaId) $dEq8oO ,(VanillaId) $dEq9pO ,(VanillaId) $dEq10qO]
    (Let) let
      (StgNonRec)
        (VanillaId) satrO =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=5sO (VarArg) (VanillaId) $dEq5lO (VarArg) (VanillaId) $dEq6mO (VarArg) (VanillaId) $dEq7nO (VarArg) (VanillaId) $dEq8oO (VarArg) (VanillaId) $dEq9pO (VarArg) (VanillaId) $dEq10qO (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) sattO =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==5DO (VarArg) (VanillaId) $dEq5lO (VarArg) (VanillaId) $dEq6mO (VarArg) (VanillaId) $dEq7nO (VarArg) (VanillaId) $dEq8oO (VarArg) (VanillaId) $dEq9pO (VarArg) (VanillaId) $dEq10qO (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) sattO ,(VarArg) (VanillaId) satrO]
  (VanillaId) $c/=5sO =
  (FUN)
  [(VanillaId) $dEq5uO ,(VanillaId) $dEq6vO ,(VanillaId) $dEq7wO ,(VanillaId) $dEq8xO ,(VanillaId) $dEq9yO ,(VanillaId) $dEq10zO ,(VanillaId) eta0O ,(VanillaId) eta11O]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,) afO bgO chO diO ejO fkO] APPFL.Classes.$fEq(,,,,,) (VarArg) (VanillaId) $dEq5uO (VarArg) (VanillaId) $dEq6vO (VarArg) (VanillaId) $dEq7wO (VarArg) (VanillaId) $dEq8xO (VarArg) (VanillaId) $dEq9yO (VarArg) (VanillaId) $dEq10zO = (VanillaId) sat2O
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) sat2O (VarArg) (VanillaId) eta0O (VarArg) (VanillaId) eta11O = (VanillaId) wild3O
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==64O =
  (FUN)
  [(VanillaId) $dEq55O ,(VanillaId) $dEq66O ,(VanillaId) $dEq77O ,(VanillaId) $dEq88O ,(VanillaId) $dEq99O ,(VanillaId) $dEq10-O ,(VanillaId) $dEq11_O ,(VanillaId) dsAP ,(VanillaId) ds1BP]
    (Case) (App) (VanillaId) dsAP = (VanillaId) wildCP
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,) (VanillaId) a14DP (VanillaId) b1EP (VanillaId) c1FP (VanillaId) d1GP (VanillaId) e1HP (VanillaId) f1IP (VanillaId) g1JP
          -> (Case) (App) (VanillaId) ds1BP = (VanillaId) wild1KP
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,) (VanillaId) a15LP (VanillaId) b2MP (VanillaId) c2NP (VanillaId) d2OP (VanillaId) e2PP (VanillaId) f2QP (VanillaId) g2RP
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq55O (VarArg) (VanillaId) a14DP (VarArg) (VanillaId) a15LP = (VanillaId) wild2SP
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq66O (VarArg) (VanillaId) b1EP (VarArg) (VanillaId) b2MP = (VanillaId) wild3TP
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq77O (VarArg) (VanillaId) c1FP (VarArg) (VanillaId) c2NP = (VanillaId) wild4UP
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq88O (VarArg) (VanillaId) d1GP (VarArg) (VanillaId) d2OP = (VanillaId) wild5VP
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq99O (VarArg) (VanillaId) e1HP (VarArg) (VanillaId) e2PP = (VanillaId) wild6WP
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq10-O (VarArg) (VanillaId) f1IP (VarArg) (VanillaId) f2QP = (VanillaId) wild7XP
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq11_O (VarArg) (VanillaId) g1JP (VarArg) (VanillaId) g2RP
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,) aYP bZP caP dbP ecP fdP geP] APPFL.Classes.$fEq(,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5fP ,(VanillaId) $dEq6gP ,(VanillaId) $dEq7hP ,(VanillaId) $dEq8iP ,(VanillaId) $dEq9jP ,(VanillaId) $dEq10kP ,(VanillaId) $dEq11lP]
    (Let) let
      (StgNonRec)
        (VanillaId) satmP =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=6nP (VarArg) (VanillaId) $dEq5fP (VarArg) (VanillaId) $dEq6gP (VarArg) (VanillaId) $dEq7hP (VarArg) (VanillaId) $dEq8iP (VarArg) (VanillaId) $dEq9jP (VarArg) (VanillaId) $dEq10kP (VarArg) (VanillaId) $dEq11lP (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satoP =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==64O (VarArg) (VanillaId) $dEq5fP (VarArg) (VanillaId) $dEq6gP (VarArg) (VanillaId) $dEq7hP (VarArg) (VanillaId) $dEq8iP (VarArg) (VanillaId) $dEq9jP (VarArg) (VanillaId) $dEq10kP (VarArg) (VanillaId) $dEq11lP (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satoP ,(VarArg) (VanillaId) satmP]
  (VanillaId) $c/=6nP =
  (FUN)
  [(VanillaId) $dEq5pP ,(VanillaId) $dEq6qP ,(VanillaId) $dEq7rP ,(VanillaId) $dEq8sP ,(VanillaId) $dEq9tP ,(VanillaId) $dEq10uP ,(VanillaId) $dEq11vP ,(VanillaId) etawP ,(VanillaId) eta1xP]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,) aYP bZP caP dbP ecP fdP geP] APPFL.Classes.$fEq(,,,,,,) (VarArg) (VanillaId) $dEq5pP (VarArg) (VanillaId) $dEq6qP (VarArg) (VanillaId) $dEq7rP (VarArg) (VanillaId) $dEq8sP (VarArg) (VanillaId) $dEq9tP (VarArg) (VanillaId) $dEq10uP (VarArg) (VanillaId) $dEq11vP = (VanillaId) satyP
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satyP (VarArg) (VanillaId) etawP (VarArg) (VanillaId) eta1xP = (VanillaId) wildzP
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==70P =
  (FUN)
  [(VanillaId) $dEq51P ,(VanillaId) $dEq62P ,(VanillaId) $dEq73P ,(VanillaId) $dEq84P ,(VanillaId) $dEq95P ,(VanillaId) $dEq106P ,(VanillaId) $dEq117P ,(VanillaId) $dEq128P ,(VanillaId) ds9P ,(VanillaId) ds1-P]
    (Case) (App) (VanillaId) ds9P = (VanillaId) wild_P
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,) (VanillaId) a14AQ (VanillaId) b1BQ (VanillaId) c1CQ (VanillaId) d1DQ (VanillaId) e1EQ (VanillaId) f1FQ (VanillaId) g1GQ (VanillaId) h1HQ
          -> (Case) (App) (VanillaId) ds1-P = (VanillaId) wild1IQ
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,) (VanillaId) a15JQ (VanillaId) b2KQ (VanillaId) c2LQ (VanillaId) d2MQ (VanillaId) e2NQ (VanillaId) f2OQ (VanillaId) g2PQ (VanillaId) h2QQ
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq51P (VarArg) (VanillaId) a14AQ (VarArg) (VanillaId) a15JQ = (VanillaId) wild2RQ
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq62P (VarArg) (VanillaId) b1BQ (VarArg) (VanillaId) b2KQ = (VanillaId) wild3SQ
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq73P (VarArg) (VanillaId) c1CQ (VarArg) (VanillaId) c2LQ = (VanillaId) wild4TQ
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq84P (VarArg) (VanillaId) d1DQ (VarArg) (VanillaId) d2MQ = (VanillaId) wild5UQ
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq95P (VarArg) (VanillaId) e1EQ (VarArg) (VanillaId) e2NQ = (VanillaId) wild6VQ
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq106P (VarArg) (VanillaId) f1FQ (VarArg) (VanillaId) f2OQ = (VanillaId) wild7WQ
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq117P (VarArg) (VanillaId) g1GQ (VarArg) (VanillaId) g2PQ = (VanillaId) wild8XQ
                                                                              (AlgAlt)
                                                                                (DataAlt) GHC.Types.False
                                                                                  -> (ConApp) GHC.Types.False []
                                                                                (DataAlt) GHC.Types.True
                                                                                  -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq128P (VarArg) (VanillaId) h1HQ (VarArg) (VanillaId) h2QQ
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,) aYQ bZQ caQ dbQ ecQ fdQ geQ hfQ] APPFL.Classes.$fEq(,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5gQ ,(VanillaId) $dEq6hQ ,(VanillaId) $dEq7iQ ,(VanillaId) $dEq8jQ ,(VanillaId) $dEq9kQ ,(VanillaId) $dEq10lQ ,(VanillaId) $dEq11mQ ,(VanillaId) $dEq12nQ]
    (Let) let
      (StgNonRec)
        (VanillaId) satoQ =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=7pQ (VarArg) (VanillaId) $dEq5gQ (VarArg) (VanillaId) $dEq6hQ (VarArg) (VanillaId) $dEq7iQ (VarArg) (VanillaId) $dEq8jQ (VarArg) (VanillaId) $dEq9kQ (VarArg) (VanillaId) $dEq10lQ (VarArg) (VanillaId) $dEq11mQ (VarArg) (VanillaId) $dEq12nQ (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satqQ =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==70P (VarArg) (VanillaId) $dEq5gQ (VarArg) (VanillaId) $dEq6hQ (VarArg) (VanillaId) $dEq7iQ (VarArg) (VanillaId) $dEq8jQ (VarArg) (VanillaId) $dEq9kQ (VarArg) (VanillaId) $dEq10lQ (VarArg) (VanillaId) $dEq11mQ (VarArg) (VanillaId) $dEq12nQ (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satqQ ,(VarArg) (VanillaId) satoQ]
  (VanillaId) $c/=7pQ =
  (FUN)
  [(VanillaId) $dEq5rQ ,(VanillaId) $dEq6sQ ,(VanillaId) $dEq7tQ ,(VanillaId) $dEq8uQ ,(VanillaId) $dEq9vQ ,(VanillaId) $dEq10wQ ,(VanillaId) $dEq11xQ ,(VanillaId) $dEq12yQ ,(VanillaId) etazQ ,(VanillaId) eta10Q]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,) aYQ bZQ caQ dbQ ecQ fdQ geQ hfQ] APPFL.Classes.$fEq(,,,,,,,) (VarArg) (VanillaId) $dEq5rQ (VarArg) (VanillaId) $dEq6sQ (VarArg) (VanillaId) $dEq7tQ (VarArg) (VanillaId) $dEq8uQ (VarArg) (VanillaId) $dEq9vQ (VarArg) (VanillaId) $dEq10wQ (VarArg) (VanillaId) $dEq11xQ (VarArg) (VanillaId) $dEq12yQ = (VanillaId) sat1Q
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) sat1Q (VarArg) (VanillaId) etazQ (VarArg) (VanillaId) eta10Q = (VanillaId) wild2Q
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==83Q =
  (FUN)
  [(VanillaId) $dEq54Q ,(VanillaId) $dEq65Q ,(VanillaId) $dEq76Q ,(VanillaId) $dEq87Q ,(VanillaId) $dEq98Q ,(VanillaId) $dEq109Q ,(VanillaId) $dEq11-Q ,(VanillaId) $dEq12_Q ,(VanillaId) $dEq13AR ,(VanillaId) dsBR ,(VanillaId) ds1CR]
    (Case) (App) (VanillaId) dsBR = (VanillaId) wildDR
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,) (VanillaId) a14ER (VanillaId) b1FR (VanillaId) c1GR (VanillaId) d1HR (VanillaId) e1IR (VanillaId) f1JR (VanillaId) g1KR (VanillaId) h1LR (VanillaId) i1MR
          -> (Case) (App) (VanillaId) ds1CR = (VanillaId) wild1NR
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,) (VanillaId) a15OR (VanillaId) b2PR (VanillaId) c2QR (VanillaId) d2RR (VanillaId) e2SR (VanillaId) f2TR (VanillaId) g2UR (VanillaId) h2VR (VanillaId) i2WR
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq54Q (VarArg) (VanillaId) a14ER (VarArg) (VanillaId) a15OR = (VanillaId) wild2XR
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq65Q (VarArg) (VanillaId) b1FR (VarArg) (VanillaId) b2PR = (VanillaId) wild3YR
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq76Q (VarArg) (VanillaId) c1GR (VarArg) (VanillaId) c2QR = (VanillaId) wild4ZR
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq87Q (VarArg) (VanillaId) d1HR (VarArg) (VanillaId) d2RR = (VanillaId) wild5aR
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq98Q (VarArg) (VanillaId) e1IR (VarArg) (VanillaId) e2SR = (VanillaId) wild6bR
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq109Q (VarArg) (VanillaId) f1JR (VarArg) (VanillaId) f2TR = (VanillaId) wild7cR
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq11-Q (VarArg) (VanillaId) g1KR (VarArg) (VanillaId) g2UR = (VanillaId) wild8dR
                                                                              (AlgAlt)
                                                                                (DataAlt) GHC.Types.False
                                                                                  -> (ConApp) GHC.Types.False []
                                                                                (DataAlt) GHC.Types.True
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq12_Q (VarArg) (VanillaId) h1LR (VarArg) (VanillaId) h2VR = (VanillaId) wild9eR
                                                                                       (AlgAlt)
                                                                                         (DataAlt) GHC.Types.False
                                                                                           -> (ConApp) GHC.Types.False []
                                                                                         (DataAlt) GHC.Types.True
                                                                                           -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq13AR (VarArg) (VanillaId) i1MR (VarArg) (VanillaId) i2WR
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,) afR bgR chR diR ejR fkR glR hmR inR] APPFL.Classes.$fEq(,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5oR ,(VanillaId) $dEq6pR ,(VanillaId) $dEq7qR ,(VanillaId) $dEq8rR ,(VanillaId) $dEq9sR ,(VanillaId) $dEq10tR ,(VanillaId) $dEq11uR ,(VanillaId) $dEq12vR ,(VanillaId) $dEq13wR]
    (Let) let
      (StgNonRec)
        (VanillaId) satxR =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=8yR (VarArg) (VanillaId) $dEq5oR (VarArg) (VanillaId) $dEq6pR (VarArg) (VanillaId) $dEq7qR (VarArg) (VanillaId) $dEq8rR (VarArg) (VanillaId) $dEq9sR (VarArg) (VanillaId) $dEq10tR (VarArg) (VanillaId) $dEq11uR (VarArg) (VanillaId) $dEq12vR (VarArg) (VanillaId) $dEq13wR (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satzR =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==83Q (VarArg) (VanillaId) $dEq5oR (VarArg) (VanillaId) $dEq6pR (VarArg) (VanillaId) $dEq7qR (VarArg) (VanillaId) $dEq8rR (VarArg) (VanillaId) $dEq9sR (VarArg) (VanillaId) $dEq10tR (VarArg) (VanillaId) $dEq11uR (VarArg) (VanillaId) $dEq12vR (VarArg) (VanillaId) $dEq13wR (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satzR ,(VarArg) (VanillaId) satxR]
  (VanillaId) $c/=8yR =
  (FUN)
  [(VanillaId) $dEq50R ,(VanillaId) $dEq61R ,(VanillaId) $dEq72R ,(VanillaId) $dEq83R ,(VanillaId) $dEq94R ,(VanillaId) $dEq105R ,(VanillaId) $dEq116R ,(VanillaId) $dEq127R ,(VanillaId) $dEq138R ,(VanillaId) eta9R ,(VanillaId) eta1-R]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,) afR bgR chR diR ejR fkR glR hmR inR] APPFL.Classes.$fEq(,,,,,,,,) (VarArg) (VanillaId) $dEq50R (VarArg) (VanillaId) $dEq61R (VarArg) (VanillaId) $dEq72R (VarArg) (VanillaId) $dEq83R (VarArg) (VanillaId) $dEq94R (VarArg) (VanillaId) $dEq105R (VarArg) (VanillaId) $dEq116R (VarArg) (VanillaId) $dEq127R (VarArg) (VanillaId) $dEq138R = (VanillaId) sat_R
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) sat_R (VarArg) (VanillaId) eta9R (VarArg) (VanillaId) eta1-R = (VanillaId) wildAS
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==9BS =
  (FUN)
  [(VanillaId) $dEq5CS ,(VanillaId) $dEq6DS ,(VanillaId) $dEq7ES ,(VanillaId) $dEq8FS ,(VanillaId) $dEq9GS ,(VanillaId) $dEq10HS ,(VanillaId) $dEq11IS ,(VanillaId) $dEq12JS ,(VanillaId) $dEq13KS ,(VanillaId) $dEq14LS ,(VanillaId) dsMS ,(VanillaId) ds1NS]
    (Case) (App) (VanillaId) dsMS = (VanillaId) wildOS
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,) (VanillaId) a14PS (VanillaId) b1QS (VanillaId) c1RS (VanillaId) d1SS (VanillaId) e1TS (VanillaId) f1US (VanillaId) g1VS (VanillaId) h1WS (VanillaId) i1XS (VanillaId) j1YS
          -> (Case) (App) (VanillaId) ds1NS = (VanillaId) wild1ZS
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,) (VanillaId) a15aS (VanillaId) b2bS (VanillaId) c2cS (VanillaId) d2dS (VanillaId) e2eS (VanillaId) f2fS (VanillaId) g2gS (VanillaId) h2hS (VanillaId) i2iS (VanillaId) j2jS
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5CS (VarArg) (VanillaId) a14PS (VarArg) (VanillaId) a15aS = (VanillaId) wild2kS
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6DS (VarArg) (VanillaId) b1QS (VarArg) (VanillaId) b2bS = (VanillaId) wild3lS
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7ES (VarArg) (VanillaId) c1RS (VarArg) (VanillaId) c2cS = (VanillaId) wild4mS
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8FS (VarArg) (VanillaId) d1SS (VarArg) (VanillaId) d2dS = (VanillaId) wild5nS
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq9GS (VarArg) (VanillaId) e1TS (VarArg) (VanillaId) e2eS = (VanillaId) wild6oS
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq10HS (VarArg) (VanillaId) f1US (VarArg) (VanillaId) f2fS = (VanillaId) wild7pS
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq11IS (VarArg) (VanillaId) g1VS (VarArg) (VanillaId) g2gS = (VanillaId) wild8qS
                                                                              (AlgAlt)
                                                                                (DataAlt) GHC.Types.False
                                                                                  -> (ConApp) GHC.Types.False []
                                                                                (DataAlt) GHC.Types.True
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq12JS (VarArg) (VanillaId) h1WS (VarArg) (VanillaId) h2hS = (VanillaId) wild9rS
                                                                                       (AlgAlt)
                                                                                         (DataAlt) GHC.Types.False
                                                                                           -> (ConApp) GHC.Types.False []
                                                                                         (DataAlt) GHC.Types.True
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq13KS (VarArg) (VanillaId) i1XS (VarArg) (VanillaId) i2iS = (VanillaId) wild10sS
                                                                                                (AlgAlt)
                                                                                                  (DataAlt) GHC.Types.False
                                                                                                    -> (ConApp) GHC.Types.False []
                                                                                                  (DataAlt) GHC.Types.True
                                                                                                    -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq14LS (VarArg) (VanillaId) j1YS (VarArg) (VanillaId) j2jS
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,) atS buS cvS dwS exS fyS gzS h0S i1S j2S] APPFL.Classes.$fEq(,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq53S ,(VanillaId) $dEq64S ,(VanillaId) $dEq75S ,(VanillaId) $dEq86S ,(VanillaId) $dEq97S ,(VanillaId) $dEq108S ,(VanillaId) $dEq119S ,(VanillaId) $dEq12-S ,(VanillaId) $dEq13_S ,(VanillaId) $dEq14AT]
    (Let) let
      (StgNonRec)
        (VanillaId) satBT =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=9CT (VarArg) (VanillaId) $dEq53S (VarArg) (VanillaId) $dEq64S (VarArg) (VanillaId) $dEq75S (VarArg) (VanillaId) $dEq86S (VarArg) (VanillaId) $dEq97S (VarArg) (VanillaId) $dEq108S (VarArg) (VanillaId) $dEq119S (VarArg) (VanillaId) $dEq12-S (VarArg) (VanillaId) $dEq13_S (VarArg) (VanillaId) $dEq14AT (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satDT =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==9BS (VarArg) (VanillaId) $dEq53S (VarArg) (VanillaId) $dEq64S (VarArg) (VanillaId) $dEq75S (VarArg) (VanillaId) $dEq86S (VarArg) (VanillaId) $dEq97S (VarArg) (VanillaId) $dEq108S (VarArg) (VanillaId) $dEq119S (VarArg) (VanillaId) $dEq12-S (VarArg) (VanillaId) $dEq13_S (VarArg) (VanillaId) $dEq14AT (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satDT ,(VarArg) (VanillaId) satBT]
  (VanillaId) $c/=9CT =
  (FUN)
  [(VanillaId) $dEq5ET ,(VanillaId) $dEq6FT ,(VanillaId) $dEq7GT ,(VanillaId) $dEq8HT ,(VanillaId) $dEq9IT ,(VanillaId) $dEq10JT ,(VanillaId) $dEq11KT ,(VanillaId) $dEq12LT ,(VanillaId) $dEq13MT ,(VanillaId) $dEq14NT ,(VanillaId) etaOT ,(VanillaId) eta1PT]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,) atS buS cvS dwS exS fyS gzS h0S i1S j2S] APPFL.Classes.$fEq(,,,,,,,,,) (VarArg) (VanillaId) $dEq5ET (VarArg) (VanillaId) $dEq6FT (VarArg) (VanillaId) $dEq7GT (VarArg) (VanillaId) $dEq8HT (VarArg) (VanillaId) $dEq9IT (VarArg) (VanillaId) $dEq10JT (VarArg) (VanillaId) $dEq11KT (VarArg) (VanillaId) $dEq12LT (VarArg) (VanillaId) $dEq13MT (VarArg) (VanillaId) $dEq14NT = (VanillaId) satQT
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satQT (VarArg) (VanillaId) etaOT (VarArg) (VanillaId) eta1PT = (VanillaId) wildRT
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==10ST =
  (FUN)
  [(VanillaId) $dEq5TT ,(VanillaId) $dEq6UT ,(VanillaId) $dEq7VT ,(VanillaId) $dEq8WT ,(VanillaId) $dEq9XT ,(VanillaId) $dEq10YT ,(VanillaId) $dEq11ZT ,(VanillaId) $dEq12aT ,(VanillaId) $dEq13bT ,(VanillaId) $dEq14cT ,(VanillaId) $dEq15dT ,(VanillaId) dseT ,(VanillaId) ds1fT]
    (Case) (App) (VanillaId) dseT = (VanillaId) wildgT
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,) (VanillaId) a14hT (VanillaId) b1iT (VanillaId) c1jT (VanillaId) d1kT (VanillaId) e1lT (VanillaId) f1mT (VanillaId) g1nT (VanillaId) h1oT (VanillaId) i1pT (VanillaId) j1qT (VanillaId) k1rT
          -> (Case) (App) (VanillaId) ds1fT = (VanillaId) wild1sT
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,) (VanillaId) a15tT (VanillaId) b2uT (VanillaId) c2vT (VanillaId) d2wT (VanillaId) e2xT (VanillaId) f2yT (VanillaId) g2zT (VanillaId) h20T (VanillaId) i21T (VanillaId) j22T (VanillaId) k23T
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5TT (VarArg) (VanillaId) a14hT (VarArg) (VanillaId) a15tT = (VanillaId) wild24T
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6UT (VarArg) (VanillaId) b1iT (VarArg) (VanillaId) b2uT = (VanillaId) wild35T
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7VT (VarArg) (VanillaId) c1jT (VarArg) (VanillaId) c2vT = (VanillaId) wild46T
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8WT (VarArg) (VanillaId) d1kT (VarArg) (VanillaId) d2wT = (VanillaId) wild57T
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq9XT (VarArg) (VanillaId) e1lT (VarArg) (VanillaId) e2xT = (VanillaId) wild68T
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq10YT (VarArg) (VanillaId) f1mT (VarArg) (VanillaId) f2yT = (VanillaId) wild79T
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq11ZT (VarArg) (VanillaId) g1nT (VarArg) (VanillaId) g2zT = (VanillaId) wild8-T
                                                                              (AlgAlt)
                                                                                (DataAlt) GHC.Types.False
                                                                                  -> (ConApp) GHC.Types.False []
                                                                                (DataAlt) GHC.Types.True
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq12aT (VarArg) (VanillaId) h1oT (VarArg) (VanillaId) h20T = (VanillaId) wild9_T
                                                                                       (AlgAlt)
                                                                                         (DataAlt) GHC.Types.False
                                                                                           -> (ConApp) GHC.Types.False []
                                                                                         (DataAlt) GHC.Types.True
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq13bT (VarArg) (VanillaId) i1pT (VarArg) (VanillaId) i21T = (VanillaId) wild10AU
                                                                                                (AlgAlt)
                                                                                                  (DataAlt) GHC.Types.False
                                                                                                    -> (ConApp) GHC.Types.False []
                                                                                                  (DataAlt) GHC.Types.True
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq14cT (VarArg) (VanillaId) j1qT (VarArg) (VanillaId) j22T = (VanillaId) wild11BU
                                                                                                         (AlgAlt)
                                                                                                           (DataAlt) GHC.Types.False
                                                                                                             -> (ConApp) GHC.Types.False []
                                                                                                           (DataAlt) GHC.Types.True
                                                                                                             -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq15dT (VarArg) (VanillaId) k1rT (VarArg) (VanillaId) k23T
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,) aCU bDU cEU dFU eGU fHU gIU hJU iKU jLU kMU] APPFL.Classes.$fEq(,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5NU ,(VanillaId) $dEq6OU ,(VanillaId) $dEq7PU ,(VanillaId) $dEq8QU ,(VanillaId) $dEq9RU ,(VanillaId) $dEq10SU ,(VanillaId) $dEq11TU ,(VanillaId) $dEq12UU ,(VanillaId) $dEq13VU ,(VanillaId) $dEq14WU ,(VanillaId) $dEq15XU]
    (Let) let
      (StgNonRec)
        (VanillaId) satYU =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=10ZU (VarArg) (VanillaId) $dEq5NU (VarArg) (VanillaId) $dEq6OU (VarArg) (VanillaId) $dEq7PU (VarArg) (VanillaId) $dEq8QU (VarArg) (VanillaId) $dEq9RU (VarArg) (VanillaId) $dEq10SU (VarArg) (VanillaId) $dEq11TU (VarArg) (VanillaId) $dEq12UU (VarArg) (VanillaId) $dEq13VU (VarArg) (VanillaId) $dEq14WU (VarArg) (VanillaId) $dEq15XU (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) sataU =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==10ST (VarArg) (VanillaId) $dEq5NU (VarArg) (VanillaId) $dEq6OU (VarArg) (VanillaId) $dEq7PU (VarArg) (VanillaId) $dEq8QU (VarArg) (VanillaId) $dEq9RU (VarArg) (VanillaId) $dEq10SU (VarArg) (VanillaId) $dEq11TU (VarArg) (VanillaId) $dEq12UU (VarArg) (VanillaId) $dEq13VU (VarArg) (VanillaId) $dEq14WU (VarArg) (VanillaId) $dEq15XU (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) sataU ,(VarArg) (VanillaId) satYU]
  (VanillaId) $c/=10ZU =
  (FUN)
  [(VanillaId) $dEq5bU ,(VanillaId) $dEq6cU ,(VanillaId) $dEq7dU ,(VanillaId) $dEq8eU ,(VanillaId) $dEq9fU ,(VanillaId) $dEq10gU ,(VanillaId) $dEq11hU ,(VanillaId) $dEq12iU ,(VanillaId) $dEq13jU ,(VanillaId) $dEq14kU ,(VanillaId) $dEq15lU ,(VanillaId) etamU ,(VanillaId) eta1nU]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,) aCU bDU cEU dFU eGU fHU gIU hJU iKU jLU kMU] APPFL.Classes.$fEq(,,,,,,,,,,) (VarArg) (VanillaId) $dEq5bU (VarArg) (VanillaId) $dEq6cU (VarArg) (VanillaId) $dEq7dU (VarArg) (VanillaId) $dEq8eU (VarArg) (VanillaId) $dEq9fU (VarArg) (VanillaId) $dEq10gU (VarArg) (VanillaId) $dEq11hU (VarArg) (VanillaId) $dEq12iU (VarArg) (VanillaId) $dEq13jU (VarArg) (VanillaId) $dEq14kU (VarArg) (VanillaId) $dEq15lU = (VanillaId) satoU
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satoU (VarArg) (VanillaId) etamU (VarArg) (VanillaId) eta1nU = (VanillaId) wildpU
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==11qU =
  (FUN)
  [(VanillaId) $dEq5rU ,(VanillaId) $dEq6sU ,(VanillaId) $dEq7tU ,(VanillaId) $dEq8uU ,(VanillaId) $dEq9vU ,(VanillaId) $dEq10wU ,(VanillaId) $dEq11xU ,(VanillaId) $dEq12yU ,(VanillaId) $dEq13zU ,(VanillaId) $dEq140U ,(VanillaId) $dEq151U ,(VanillaId) $dEq162U ,(VanillaId) ds3U ,(VanillaId) ds14U]
    (Case) (App) (VanillaId) ds3U = (VanillaId) wild5U
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,,) (VanillaId) a146U (VanillaId) b17U (VanillaId) c18U (VanillaId) d19U (VanillaId) e1-U (VanillaId) f1_U (VanillaId) g1AV (VanillaId) h1BV (VanillaId) i1CV (VanillaId) j1DV (VanillaId) k1EV (VanillaId) l1FV
          -> (Case) (App) (VanillaId) ds14U = (VanillaId) wild1GV
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,,) (VanillaId) a15HV (VanillaId) b2IV (VanillaId) c2JV (VanillaId) d2KV (VanillaId) e2LV (VanillaId) f2MV (VanillaId) g2NV (VanillaId) h2OV (VanillaId) i2PV (VanillaId) j2QV (VanillaId) k2RV (VanillaId) l2SV
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5rU (VarArg) (VanillaId) a146U (VarArg) (VanillaId) a15HV = (VanillaId) wild2TV
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6sU (VarArg) (VanillaId) b17U (VarArg) (VanillaId) b2IV = (VanillaId) wild3UV
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7tU (VarArg) (VanillaId) c18U (VarArg) (VanillaId) c2JV = (VanillaId) wild4VV
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8uU (VarArg) (VanillaId) d19U (VarArg) (VanillaId) d2KV = (VanillaId) wild5WV
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq9vU (VarArg) (VanillaId) e1-U (VarArg) (VanillaId) e2LV = (VanillaId) wild6XV
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq10wU (VarArg) (VanillaId) f1_U (VarArg) (VanillaId) f2MV = (VanillaId) wild7YV
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq11xU (VarArg) (VanillaId) g1AV (VarArg) (VanillaId) g2NV = (VanillaId) wild8ZV
                                                                              (AlgAlt)
                                                                                (DataAlt) GHC.Types.False
                                                                                  -> (ConApp) GHC.Types.False []
                                                                                (DataAlt) GHC.Types.True
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq12yU (VarArg) (VanillaId) h1BV (VarArg) (VanillaId) h2OV = (VanillaId) wild9aV
                                                                                       (AlgAlt)
                                                                                         (DataAlt) GHC.Types.False
                                                                                           -> (ConApp) GHC.Types.False []
                                                                                         (DataAlt) GHC.Types.True
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq13zU (VarArg) (VanillaId) i1CV (VarArg) (VanillaId) i2PV = (VanillaId) wild10bV
                                                                                                (AlgAlt)
                                                                                                  (DataAlt) GHC.Types.False
                                                                                                    -> (ConApp) GHC.Types.False []
                                                                                                  (DataAlt) GHC.Types.True
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq140U (VarArg) (VanillaId) j1DV (VarArg) (VanillaId) j2QV = (VanillaId) wild11cV
                                                                                                         (AlgAlt)
                                                                                                           (DataAlt) GHC.Types.False
                                                                                                             -> (ConApp) GHC.Types.False []
                                                                                                           (DataAlt) GHC.Types.True
                                                                                                             -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq151U (VarArg) (VanillaId) k1EV (VarArg) (VanillaId) k2RV = (VanillaId) wild12dV
                                                                                                                  (AlgAlt)
                                                                                                                    (DataAlt) GHC.Types.False
                                                                                                                      -> (ConApp) GHC.Types.False []
                                                                                                                    (DataAlt) GHC.Types.True
                                                                                                                      -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq162U (VarArg) (VanillaId) l1FV (VarArg) (VanillaId) l2SV
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,,) aeV bfV cgV dhV eiV fjV gkV hlV imV jnV koV lpV] APPFL.Classes.$fEq(,,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5qV ,(VanillaId) $dEq6rV ,(VanillaId) $dEq7sV ,(VanillaId) $dEq8tV ,(VanillaId) $dEq9uV ,(VanillaId) $dEq10vV ,(VanillaId) $dEq11wV ,(VanillaId) $dEq12xV ,(VanillaId) $dEq13yV ,(VanillaId) $dEq14zV ,(VanillaId) $dEq150V ,(VanillaId) $dEq161V]
    (Let) let
      (StgNonRec)
        (VanillaId) sat2V =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=113V (VarArg) (VanillaId) $dEq5qV (VarArg) (VanillaId) $dEq6rV (VarArg) (VanillaId) $dEq7sV (VarArg) (VanillaId) $dEq8tV (VarArg) (VanillaId) $dEq9uV (VarArg) (VanillaId) $dEq10vV (VarArg) (VanillaId) $dEq11wV (VarArg) (VanillaId) $dEq12xV (VarArg) (VanillaId) $dEq13yV (VarArg) (VanillaId) $dEq14zV (VarArg) (VanillaId) $dEq150V (VarArg) (VanillaId) $dEq161V (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) sat4V =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==11qU (VarArg) (VanillaId) $dEq5qV (VarArg) (VanillaId) $dEq6rV (VarArg) (VanillaId) $dEq7sV (VarArg) (VanillaId) $dEq8tV (VarArg) (VanillaId) $dEq9uV (VarArg) (VanillaId) $dEq10vV (VarArg) (VanillaId) $dEq11wV (VarArg) (VanillaId) $dEq12xV (VarArg) (VanillaId) $dEq13yV (VarArg) (VanillaId) $dEq14zV (VarArg) (VanillaId) $dEq150V (VarArg) (VanillaId) $dEq161V (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) sat4V ,(VarArg) (VanillaId) sat2V]
  (VanillaId) $c/=113V =
  (FUN)
  [(VanillaId) $dEq55V ,(VanillaId) $dEq66V ,(VanillaId) $dEq77V ,(VanillaId) $dEq88V ,(VanillaId) $dEq99V ,(VanillaId) $dEq10-V ,(VanillaId) $dEq11_V ,(VanillaId) $dEq12AW ,(VanillaId) $dEq13BW ,(VanillaId) $dEq14CW ,(VanillaId) $dEq15DW ,(VanillaId) $dEq16EW ,(VanillaId) etaFW ,(VanillaId) eta1GW]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,,) aeV bfV cgV dhV eiV fjV gkV hlV imV jnV koV lpV] APPFL.Classes.$fEq(,,,,,,,,,,,) (VarArg) (VanillaId) $dEq55V (VarArg) (VanillaId) $dEq66V (VarArg) (VanillaId) $dEq77V (VarArg) (VanillaId) $dEq88V (VarArg) (VanillaId) $dEq99V (VarArg) (VanillaId) $dEq10-V (VarArg) (VanillaId) $dEq11_V (VarArg) (VanillaId) $dEq12AW (VarArg) (VanillaId) $dEq13BW (VarArg) (VanillaId) $dEq14CW (VarArg) (VanillaId) $dEq15DW (VarArg) (VanillaId) $dEq16EW = (VanillaId) satHW
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satHW (VarArg) (VanillaId) etaFW (VarArg) (VanillaId) eta1GW = (VanillaId) wildIW
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==12JW =
  (FUN)
  [(VanillaId) $dEq5KW ,(VanillaId) $dEq6LW ,(VanillaId) $dEq7MW ,(VanillaId) $dEq8NW ,(VanillaId) $dEq9OW ,(VanillaId) $dEq10PW ,(VanillaId) $dEq11QW ,(VanillaId) $dEq12RW ,(VanillaId) $dEq13SW ,(VanillaId) $dEq14TW ,(VanillaId) $dEq15UW ,(VanillaId) $dEq16VW ,(VanillaId) $dEq17WW ,(VanillaId) dsXW ,(VanillaId) ds1YW]
    (Case) (App) (VanillaId) dsXW = (VanillaId) wildZW
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,,,) (VanillaId) a14aW (VanillaId) b1bW (VanillaId) c1cW (VanillaId) d1dW (VanillaId) e1eW (VanillaId) f1fW (VanillaId) g1gW (VanillaId) h1hW (VanillaId) i1iW (VanillaId) j1jW (VanillaId) k1kW (VanillaId) l1lW (VanillaId) m1mW
          -> (Case) (App) (VanillaId) ds1YW = (VanillaId) wild1nW
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,,,) (VanillaId) a15oW (VanillaId) b2pW (VanillaId) c2qW (VanillaId) d2rW (VanillaId) e2sW (VanillaId) f2tW (VanillaId) g2uW (VanillaId) h2vW (VanillaId) i2wW (VanillaId) j2xW (VanillaId) k2yW (VanillaId) l2zW (VanillaId) m20W
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5KW (VarArg) (VanillaId) a14aW (VarArg) (VanillaId) a15oW = (VanillaId) wild21W
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6LW (VarArg) (VanillaId) b1bW (VarArg) (VanillaId) b2pW = (VanillaId) wild32W
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7MW (VarArg) (VanillaId) c1cW (VarArg) (VanillaId) c2qW = (VanillaId) wild43W
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8NW (VarArg) (VanillaId) d1dW (VarArg) (VanillaId) d2rW = (VanillaId) wild54W
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq9OW (VarArg) (VanillaId) e1eW (VarArg) (VanillaId) e2sW = (VanillaId) wild65W
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq10PW (VarArg) (VanillaId) f1fW (VarArg) (VanillaId) f2tW = (VanillaId) wild76W
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq11QW (VarArg) (VanillaId) g1gW (VarArg) (VanillaId) g2uW = (VanillaId) wild87W
                                                                              (AlgAlt)
                                                                                (DataAlt) GHC.Types.False
                                                                                  -> (ConApp) GHC.Types.False []
                                                                                (DataAlt) GHC.Types.True
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq12RW (VarArg) (VanillaId) h1hW (VarArg) (VanillaId) h2vW = (VanillaId) wild98W
                                                                                       (AlgAlt)
                                                                                         (DataAlt) GHC.Types.False
                                                                                           -> (ConApp) GHC.Types.False []
                                                                                         (DataAlt) GHC.Types.True
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq13SW (VarArg) (VanillaId) i1iW (VarArg) (VanillaId) i2wW = (VanillaId) wild109W
                                                                                                (AlgAlt)
                                                                                                  (DataAlt) GHC.Types.False
                                                                                                    -> (ConApp) GHC.Types.False []
                                                                                                  (DataAlt) GHC.Types.True
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq14TW (VarArg) (VanillaId) j1jW (VarArg) (VanillaId) j2xW = (VanillaId) wild11-W
                                                                                                         (AlgAlt)
                                                                                                           (DataAlt) GHC.Types.False
                                                                                                             -> (ConApp) GHC.Types.False []
                                                                                                           (DataAlt) GHC.Types.True
                                                                                                             -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq15UW (VarArg) (VanillaId) k1kW (VarArg) (VanillaId) k2yW = (VanillaId) wild12_W
                                                                                                                  (AlgAlt)
                                                                                                                    (DataAlt) GHC.Types.False
                                                                                                                      -> (ConApp) GHC.Types.False []
                                                                                                                    (DataAlt) GHC.Types.True
                                                                                                                      -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq16VW (VarArg) (VanillaId) l1lW (VarArg) (VanillaId) l2zW = (VanillaId) wild13AX
                                                                                                                           (AlgAlt)
                                                                                                                             (DataAlt) GHC.Types.False
                                                                                                                               -> (ConApp) GHC.Types.False []
                                                                                                                             (DataAlt) GHC.Types.True
                                                                                                                               -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq17WW (VarArg) (VanillaId) m1mW (VarArg) (VanillaId) m20W
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,,,) aBX bCX cDX dEX eFX fGX gHX hIX iJX jKX kLX lMX mNX] APPFL.Classes.$fEq(,,,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5OX ,(VanillaId) $dEq6PX ,(VanillaId) $dEq7QX ,(VanillaId) $dEq8RX ,(VanillaId) $dEq9SX ,(VanillaId) $dEq10TX ,(VanillaId) $dEq11UX ,(VanillaId) $dEq12VX ,(VanillaId) $dEq13WX ,(VanillaId) $dEq14XX ,(VanillaId) $dEq15YX ,(VanillaId) $dEq16ZX ,(VanillaId) $dEq17aX]
    (Let) let
      (StgNonRec)
        (VanillaId) satbX =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=12cX (VarArg) (VanillaId) $dEq5OX (VarArg) (VanillaId) $dEq6PX (VarArg) (VanillaId) $dEq7QX (VarArg) (VanillaId) $dEq8RX (VarArg) (VanillaId) $dEq9SX (VarArg) (VanillaId) $dEq10TX (VarArg) (VanillaId) $dEq11UX (VarArg) (VanillaId) $dEq12VX (VarArg) (VanillaId) $dEq13WX (VarArg) (VanillaId) $dEq14XX (VarArg) (VanillaId) $dEq15YX (VarArg) (VanillaId) $dEq16ZX (VarArg) (VanillaId) $dEq17aX (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satdX =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==12JW (VarArg) (VanillaId) $dEq5OX (VarArg) (VanillaId) $dEq6PX (VarArg) (VanillaId) $dEq7QX (VarArg) (VanillaId) $dEq8RX (VarArg) (VanillaId) $dEq9SX (VarArg) (VanillaId) $dEq10TX (VarArg) (VanillaId) $dEq11UX (VarArg) (VanillaId) $dEq12VX (VarArg) (VanillaId) $dEq13WX (VarArg) (VanillaId) $dEq14XX (VarArg) (VanillaId) $dEq15YX (VarArg) (VanillaId) $dEq16ZX (VarArg) (VanillaId) $dEq17aX (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satdX ,(VarArg) (VanillaId) satbX]
  (VanillaId) $c/=12cX =
  (FUN)
  [(VanillaId) $dEq5eX ,(VanillaId) $dEq6fX ,(VanillaId) $dEq7gX ,(VanillaId) $dEq8hX ,(VanillaId) $dEq9iX ,(VanillaId) $dEq10jX ,(VanillaId) $dEq11kX ,(VanillaId) $dEq12lX ,(VanillaId) $dEq13mX ,(VanillaId) $dEq14nX ,(VanillaId) $dEq15oX ,(VanillaId) $dEq16pX ,(VanillaId) $dEq17qX ,(VanillaId) etarX ,(VanillaId) eta1sX]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,,,) aBX bCX cDX dEX eFX fGX gHX hIX iJX jKX kLX lMX mNX] APPFL.Classes.$fEq(,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5eX (VarArg) (VanillaId) $dEq6fX (VarArg) (VanillaId) $dEq7gX (VarArg) (VanillaId) $dEq8hX (VarArg) (VanillaId) $dEq9iX (VarArg) (VanillaId) $dEq10jX (VarArg) (VanillaId) $dEq11kX (VarArg) (VanillaId) $dEq12lX (VarArg) (VanillaId) $dEq13mX (VarArg) (VanillaId) $dEq14nX (VarArg) (VanillaId) $dEq15oX (VarArg) (VanillaId) $dEq16pX (VarArg) (VanillaId) $dEq17qX = (VanillaId) sattX
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) sattX (VarArg) (VanillaId) etarX (VarArg) (VanillaId) eta1sX = (VanillaId) wilduX
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==13vX =
  (FUN)
  [(VanillaId) $dEq5wX ,(VanillaId) $dEq6xX ,(VanillaId) $dEq7yX ,(VanillaId) $dEq8zX ,(VanillaId) $dEq90X ,(VanillaId) $dEq101X ,(VanillaId) $dEq112X ,(VanillaId) $dEq123X ,(VanillaId) $dEq134X ,(VanillaId) $dEq145X ,(VanillaId) $dEq156X ,(VanillaId) $dEq167X ,(VanillaId) $dEq178X ,(VanillaId) $dEq189X ,(VanillaId) ds-X ,(VanillaId) ds1_X]
    (Case) (App) (VanillaId) ds-X = (VanillaId) wildAY
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,,,,) (VanillaId) a14BY (VanillaId) b1CY (VanillaId) c1DY (VanillaId) d1EY (VanillaId) e1FY (VanillaId) f1GY (VanillaId) g1HY (VanillaId) h1IY (VanillaId) i1JY (VanillaId) j1KY (VanillaId) k1LY (VanillaId) l1MY (VanillaId) m1NY (VanillaId) n1OY
          -> (Case) (App) (VanillaId) ds1_X = (VanillaId) wild1PY
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,,,,) (VanillaId) a15QY (VanillaId) b2RY (VanillaId) c2SY (VanillaId) d2TY (VanillaId) e2UY (VanillaId) f2VY (VanillaId) g2WY (VanillaId) h2XY (VanillaId) i2YY (VanillaId) j2ZY (VanillaId) k2aY (VanillaId) l2bY (VanillaId) m2cY (VanillaId) n2dY
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5wX (VarArg) (VanillaId) a14BY (VarArg) (VanillaId) a15QY = (VanillaId) wild2eY
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6xX (VarArg) (VanillaId) b1CY (VarArg) (VanillaId) b2RY = (VanillaId) wild3fY
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7yX (VarArg) (VanillaId) c1DY (VarArg) (VanillaId) c2SY = (VanillaId) wild4gY
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8zX (VarArg) (VanillaId) d1EY (VarArg) (VanillaId) d2TY = (VanillaId) wild5hY
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq90X (VarArg) (VanillaId) e1FY (VarArg) (VanillaId) e2UY = (VanillaId) wild6iY
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq101X (VarArg) (VanillaId) f1GY (VarArg) (VanillaId) f2VY = (VanillaId) wild7jY
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq112X (VarArg) (VanillaId) g1HY (VarArg) (VanillaId) g2WY = (VanillaId) wild8kY
                                                                              (AlgAlt)
                                                                                (DataAlt) GHC.Types.False
                                                                                  -> (ConApp) GHC.Types.False []
                                                                                (DataAlt) GHC.Types.True
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq123X (VarArg) (VanillaId) h1IY (VarArg) (VanillaId) h2XY = (VanillaId) wild9lY
                                                                                       (AlgAlt)
                                                                                         (DataAlt) GHC.Types.False
                                                                                           -> (ConApp) GHC.Types.False []
                                                                                         (DataAlt) GHC.Types.True
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq134X (VarArg) (VanillaId) i1JY (VarArg) (VanillaId) i2YY = (VanillaId) wild10mY
                                                                                                (AlgAlt)
                                                                                                  (DataAlt) GHC.Types.False
                                                                                                    -> (ConApp) GHC.Types.False []
                                                                                                  (DataAlt) GHC.Types.True
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq145X (VarArg) (VanillaId) j1KY (VarArg) (VanillaId) j2ZY = (VanillaId) wild11nY
                                                                                                         (AlgAlt)
                                                                                                           (DataAlt) GHC.Types.False
                                                                                                             -> (ConApp) GHC.Types.False []
                                                                                                           (DataAlt) GHC.Types.True
                                                                                                             -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq156X (VarArg) (VanillaId) k1LY (VarArg) (VanillaId) k2aY = (VanillaId) wild12oY
                                                                                                                  (AlgAlt)
                                                                                                                    (DataAlt) GHC.Types.False
                                                                                                                      -> (ConApp) GHC.Types.False []
                                                                                                                    (DataAlt) GHC.Types.True
                                                                                                                      -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq167X (VarArg) (VanillaId) l1MY (VarArg) (VanillaId) l2bY = (VanillaId) wild13pY
                                                                                                                           (AlgAlt)
                                                                                                                             (DataAlt) GHC.Types.False
                                                                                                                               -> (ConApp) GHC.Types.False []
                                                                                                                             (DataAlt) GHC.Types.True
                                                                                                                               -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq178X (VarArg) (VanillaId) m1NY (VarArg) (VanillaId) m2cY = (VanillaId) wild14qY
                                                                                                                                    (AlgAlt)
                                                                                                                                      (DataAlt) GHC.Types.False
                                                                                                                                        -> (ConApp) GHC.Types.False []
                                                                                                                                      (DataAlt) GHC.Types.True
                                                                                                                                        -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq189X (VarArg) (VanillaId) n1OY (VarArg) (VanillaId) n2dY
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,,,,) arY bsY ctY duY evY fwY gxY hyY izY j0Y k1Y l2Y m3Y n4Y] APPFL.Classes.$fEq(,,,,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq55Y ,(VanillaId) $dEq66Y ,(VanillaId) $dEq77Y ,(VanillaId) $dEq88Y ,(VanillaId) $dEq99Y ,(VanillaId) $dEq10-Y ,(VanillaId) $dEq11_Y ,(VanillaId) $dEq12AZ ,(VanillaId) $dEq13BZ ,(VanillaId) $dEq14CZ ,(VanillaId) $dEq15DZ ,(VanillaId) $dEq16EZ ,(VanillaId) $dEq17FZ ,(VanillaId) $dEq18GZ]
    (Let) let
      (StgNonRec)
        (VanillaId) satHZ =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=13IZ (VarArg) (VanillaId) $dEq55Y (VarArg) (VanillaId) $dEq66Y (VarArg) (VanillaId) $dEq77Y (VarArg) (VanillaId) $dEq88Y (VarArg) (VanillaId) $dEq99Y (VarArg) (VanillaId) $dEq10-Y (VarArg) (VanillaId) $dEq11_Y (VarArg) (VanillaId) $dEq12AZ (VarArg) (VanillaId) $dEq13BZ (VarArg) (VanillaId) $dEq14CZ (VarArg) (VanillaId) $dEq15DZ (VarArg) (VanillaId) $dEq16EZ (VarArg) (VanillaId) $dEq17FZ (VarArg) (VanillaId) $dEq18GZ (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satJZ =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==13vX (VarArg) (VanillaId) $dEq55Y (VarArg) (VanillaId) $dEq66Y (VarArg) (VanillaId) $dEq77Y (VarArg) (VanillaId) $dEq88Y (VarArg) (VanillaId) $dEq99Y (VarArg) (VanillaId) $dEq10-Y (VarArg) (VanillaId) $dEq11_Y (VarArg) (VanillaId) $dEq12AZ (VarArg) (VanillaId) $dEq13BZ (VarArg) (VanillaId) $dEq14CZ (VarArg) (VanillaId) $dEq15DZ (VarArg) (VanillaId) $dEq16EZ (VarArg) (VanillaId) $dEq17FZ (VarArg) (VanillaId) $dEq18GZ (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satJZ ,(VarArg) (VanillaId) satHZ]
  (VanillaId) $c/=13IZ =
  (FUN)
  [(VanillaId) $dEq5KZ ,(VanillaId) $dEq6LZ ,(VanillaId) $dEq7MZ ,(VanillaId) $dEq8NZ ,(VanillaId) $dEq9OZ ,(VanillaId) $dEq10PZ ,(VanillaId) $dEq11QZ ,(VanillaId) $dEq12RZ ,(VanillaId) $dEq13SZ ,(VanillaId) $dEq14TZ ,(VanillaId) $dEq15UZ ,(VanillaId) $dEq16VZ ,(VanillaId) $dEq17WZ ,(VanillaId) $dEq18XZ ,(VanillaId) etaYZ ,(VanillaId) eta1ZZ]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,,,,) arY bsY ctY duY evY fwY gxY hyY izY j0Y k1Y l2Y m3Y n4Y] APPFL.Classes.$fEq(,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5KZ (VarArg) (VanillaId) $dEq6LZ (VarArg) (VanillaId) $dEq7MZ (VarArg) (VanillaId) $dEq8NZ (VarArg) (VanillaId) $dEq9OZ (VarArg) (VanillaId) $dEq10PZ (VarArg) (VanillaId) $dEq11QZ (VarArg) (VanillaId) $dEq12RZ (VarArg) (VanillaId) $dEq13SZ (VarArg) (VanillaId) $dEq14TZ (VarArg) (VanillaId) $dEq15UZ (VarArg) (VanillaId) $dEq16VZ (VarArg) (VanillaId) $dEq17WZ (VarArg) (VanillaId) $dEq18XZ = (VanillaId) sataZ
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) sataZ (VarArg) (VanillaId) etaYZ (VarArg) (VanillaId) eta1ZZ = (VanillaId) wildbZ
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==14cZ =
  (FUN)
  [(VanillaId) $dEq5dZ ,(VanillaId) $dEq6eZ ,(VanillaId) $dEq7fZ ,(VanillaId) $dEq8gZ ,(VanillaId) $dEq9hZ ,(VanillaId) $dEq10iZ ,(VanillaId) $dEq11jZ ,(VanillaId) $dEq12kZ ,(VanillaId) $dEq13lZ ,(VanillaId) $dEq14mZ ,(VanillaId) $dEq15nZ ,(VanillaId) $dEq16oZ ,(VanillaId) $dEq17pZ ,(VanillaId) $dEq18qZ ,(VanillaId) $dEq19rZ ,(VanillaId) dssZ ,(VanillaId) ds1tZ]
    (Case) (App) (VanillaId) dssZ = (VanillaId) wilduZ
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,,,,,) (VanillaId) a14vZ (VanillaId) b1wZ (VanillaId) c1xZ (VanillaId) d1yZ (VanillaId) e1zZ (VanillaId) f10Z (VanillaId) g11Z (VanillaId) h12Z (VanillaId) i13Z (VanillaId) j14Z (VanillaId) k15Z (VanillaId) l16Z (VanillaId) m17Z (VanillaId) n18Z (VanillaId) o19Z
          -> (Case) (App) (VanillaId) ds1tZ = (VanillaId) wild1-Z
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,,,,,) (VanillaId) a15_Z (VanillaId) b2Aa (VanillaId) c2Ba (VanillaId) d2Ca (VanillaId) e2Da (VanillaId) f2Ea (VanillaId) g2Fa (VanillaId) h2Ga (VanillaId) i2Ha (VanillaId) j2Ia (VanillaId) k2Ja (VanillaId) l2Ka (VanillaId) m2La (VanillaId) n2Ma (VanillaId) o2Na
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5dZ (VarArg) (VanillaId) a14vZ (VarArg) (VanillaId) a15_Z = (VanillaId) wild2Oa
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6eZ (VarArg) (VanillaId) b1wZ (VarArg) (VanillaId) b2Aa = (VanillaId) wild3Pa
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq7fZ (VarArg) (VanillaId) c1xZ (VarArg) (VanillaId) c2Ba = (VanillaId) wild4Qa
                                          (AlgAlt)
                                            (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                            (DataAlt) GHC.Types.True
                                              -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq8gZ (VarArg) (VanillaId) d1yZ (VarArg) (VanillaId) d2Ca = (VanillaId) wild5Ra
                                                   (AlgAlt)
                                                     (DataAlt) GHC.Types.False
                                                       -> (ConApp) GHC.Types.False []
                                                     (DataAlt) GHC.Types.True
                                                       -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq9hZ (VarArg) (VanillaId) e1zZ (VarArg) (VanillaId) e2Da = (VanillaId) wild6Sa
                                                            (AlgAlt)
                                                              (DataAlt) GHC.Types.False
                                                                -> (ConApp) GHC.Types.False []
                                                              (DataAlt) GHC.Types.True
                                                                -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq10iZ (VarArg) (VanillaId) f10Z (VarArg) (VanillaId) f2Ea = (VanillaId) wild7Ta
                                                                     (AlgAlt)
                                                                       (DataAlt) GHC.Types.False
                                                                         -> (ConApp) GHC.Types.False []
                                                                       (DataAlt) GHC.Types.True
                                                                         -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq11jZ (VarArg) (VanillaId) g11Z (VarArg) (VanillaId) g2Fa = (VanillaId) wild8Ua
                                                                              (AlgAlt)
                                                                                (DataAlt) GHC.Types.False
                                                                                  -> (ConApp) GHC.Types.False []
                                                                                (DataAlt) GHC.Types.True
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq12kZ (VarArg) (VanillaId) h12Z (VarArg) (VanillaId) h2Ga = (VanillaId) wild9Va
                                                                                       (AlgAlt)
                                                                                         (DataAlt) GHC.Types.False
                                                                                           -> (ConApp) GHC.Types.False []
                                                                                         (DataAlt) GHC.Types.True
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq13lZ (VarArg) (VanillaId) i13Z (VarArg) (VanillaId) i2Ha = (VanillaId) wild10Wa
                                                                                                (AlgAlt)
                                                                                                  (DataAlt) GHC.Types.False
                                                                                                    -> (ConApp) GHC.Types.False []
                                                                                                  (DataAlt) GHC.Types.True
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq14mZ (VarArg) (VanillaId) j14Z (VarArg) (VanillaId) j2Ia = (VanillaId) wild11Xa
                                                                                                         (AlgAlt)
                                                                                                           (DataAlt) GHC.Types.False
                                                                                                             -> (ConApp) GHC.Types.False []
                                                                                                           (DataAlt) GHC.Types.True
                                                                                                             -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq15nZ (VarArg) (VanillaId) k15Z (VarArg) (VanillaId) k2Ja = (VanillaId) wild12Ya
                                                                                                                  (AlgAlt)
                                                                                                                    (DataAlt) GHC.Types.False
                                                                                                                      -> (ConApp) GHC.Types.False []
                                                                                                                    (DataAlt) GHC.Types.True
                                                                                                                      -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq16oZ (VarArg) (VanillaId) l16Z (VarArg) (VanillaId) l2Ka = (VanillaId) wild13Za
                                                                                                                           (AlgAlt)
                                                                                                                             (DataAlt) GHC.Types.False
                                                                                                                               -> (ConApp) GHC.Types.False []
                                                                                                                             (DataAlt) GHC.Types.True
                                                                                                                               -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq17pZ (VarArg) (VanillaId) m17Z (VarArg) (VanillaId) m2La = (VanillaId) wild14aa
                                                                                                                                    (AlgAlt)
                                                                                                                                      (DataAlt) GHC.Types.False
                                                                                                                                        -> (ConApp) GHC.Types.False []
                                                                                                                                      (DataAlt) GHC.Types.True
                                                                                                                                        -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq18qZ (VarArg) (VanillaId) n18Z (VarArg) (VanillaId) n2Ma = (VanillaId) wild15ba
                                                                                                                                             (AlgAlt)
                                                                                                                                               (DataAlt) GHC.Types.False
                                                                                                                                                 -> (ConApp) GHC.Types.False []
                                                                                                                                               (DataAlt) GHC.Types.True
                                                                                                                                                 -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq19rZ (VarArg) (VanillaId) o19Z (VarArg) (VanillaId) o2Na
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,,,,,) aca bda cea dfa ega fha gia hja ika jla kma lna moa npa oqa] APPFL.Classes.$fEq(,,,,,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5ra ,(VanillaId) $dEq6sa ,(VanillaId) $dEq7ta ,(VanillaId) $dEq8ua ,(VanillaId) $dEq9va ,(VanillaId) $dEq10wa ,(VanillaId) $dEq11xa ,(VanillaId) $dEq12ya ,(VanillaId) $dEq13za ,(VanillaId) $dEq140a ,(VanillaId) $dEq151a ,(VanillaId) $dEq162a ,(VanillaId) $dEq173a ,(VanillaId) $dEq184a ,(VanillaId) $dEq195a]
    (Let) let
      (StgNonRec)
        (VanillaId) sat6a =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=147a (VarArg) (VanillaId) $dEq5ra (VarArg) (VanillaId) $dEq6sa (VarArg) (VanillaId) $dEq7ta (VarArg) (VanillaId) $dEq8ua (VarArg) (VanillaId) $dEq9va (VarArg) (VanillaId) $dEq10wa (VarArg) (VanillaId) $dEq11xa (VarArg) (VanillaId) $dEq12ya (VarArg) (VanillaId) $dEq13za (VarArg) (VanillaId) $dEq140a (VarArg) (VanillaId) $dEq151a (VarArg) (VanillaId) $dEq162a (VarArg) (VanillaId) $dEq173a (VarArg) (VanillaId) $dEq184a (VarArg) (VanillaId) $dEq195a (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) sat8a =
           (FUN)
           [(VanillaId) etaH ,(VanillaId) etaG]
             (App) (VanillaId) $c==14cZ (VarArg) (VanillaId) $dEq5ra (VarArg) (VanillaId) $dEq6sa (VarArg) (VanillaId) $dEq7ta (VarArg) (VanillaId) $dEq8ua (VarArg) (VanillaId) $dEq9va (VarArg) (VanillaId) $dEq10wa (VarArg) (VanillaId) $dEq11xa (VarArg) (VanillaId) $dEq12ya (VarArg) (VanillaId) $dEq13za (VarArg) (VanillaId) $dEq140a (VarArg) (VanillaId) $dEq151a (VarArg) (VanillaId) $dEq162a (VarArg) (VanillaId) $dEq173a (VarArg) (VanillaId) $dEq184a (VarArg) (VanillaId) $dEq195a (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) sat8a ,(VarArg) (VanillaId) sat6a]
  (VanillaId) $c/=147a =
  (FUN)
  [(VanillaId) $dEq59a ,(VanillaId) $dEq6-a ,(VanillaId) $dEq7_a ,(VanillaId) $dEq8Ab ,(VanillaId) $dEq9Bb ,(VanillaId) $dEq10Cb ,(VanillaId) $dEq11Db ,(VanillaId) $dEq12Eb ,(VanillaId) $dEq13Fb ,(VanillaId) $dEq14Gb ,(VanillaId) $dEq15Hb ,(VanillaId) $dEq16Ib ,(VanillaId) $dEq17Jb ,(VanillaId) $dEq18Kb ,(VanillaId) $dEq19Lb ,(VanillaId) etaMb ,(VanillaId) eta1Nb]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.(,,,,,,,,,,,,,,) aca bda cea dfa ega fha gia hja ika jla kma lna moa npa oqa] APPFL.Classes.$fEq(,,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq59a (VarArg) (VanillaId) $dEq6-a (VarArg) (VanillaId) $dEq7_a (VarArg) (VanillaId) $dEq8Ab (VarArg) (VanillaId) $dEq9Bb (VarArg) (VanillaId) $dEq10Cb (VarArg) (VanillaId) $dEq11Db (VarArg) (VanillaId) $dEq12Eb (VarArg) (VanillaId) $dEq13Fb (VarArg) (VanillaId) $dEq14Gb (VarArg) (VanillaId) $dEq15Hb (VarArg) (VanillaId) $dEq16Ib (VarArg) (VanillaId) $dEq17Jb (VarArg) (VanillaId) $dEq18Kb (VarArg) (VanillaId) $dEq19Lb = (VanillaId) satOb
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satOb (VarArg) (VanillaId) etaMb (VarArg) (VanillaId) eta1Nb = (VanillaId) wildPb
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgNonRec)
  (VanillaId) $c==15Qb =
  (FUN)
  [(VanillaId) dsRb ,(VanillaId) ds1Sb]
    (Case) (App) (VanillaId) dsRb = (VanillaId) wildTb
      (AlgAlt)
        (DataAlt) GHC.Types.False
          -> (Case) (App) (VanillaId) ds1Sb = (VanillaId) wild1Ub
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.True -> (App) (VanillaId) ds1Sb
(StgNonRec)
  (VanillaId) $c/=15Vb =
  (FUN)
  [(VanillaId) dsWb ,(VanillaId) ds1Xb]
    (Case) (App) (VanillaId) dsWb = (VanillaId) wildYb
      (AlgAlt)
        (DataAlt) GHC.Types.W# (VanillaId) w1Zb
          -> (Case) (App) (VanillaId) ds1Xb = (VanillaId) wild1ab
               (AlgAlt)
                 (DataAlt) GHC.Types.W# (VanillaId) w2bb
                   -> (Case) (Op) (Prim) neWord# [(VarArg) (VanillaId) w1Zb ,(VarArg) (VanillaId) w2bb] = (VanillaId) satcb
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satcb
(StgNonRec)
  (VanillaId) $c==16db =
  (FUN)
  [(VanillaId) dseb ,(VanillaId) ds1fb]
    (Case) (App) (VanillaId) dseb = (VanillaId) wildgb
      (AlgAlt)
        (DataAlt) GHC.Types.W# (VanillaId) w1hb
          -> (Case) (App) (VanillaId) ds1fb = (VanillaId) wild1ib
               (AlgAlt)
                 (DataAlt) GHC.Types.W# (VanillaId) w2jb
                   -> (Case) (Op) (Prim) eqWord# [(VarArg) (VanillaId) w1hb ,(VarArg) (VanillaId) w2jb] = (VanillaId) satkb
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satkb
(StgNonRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Types.Word] APPFL.Classes.$fEqWord =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) $c==16db ,(VarArg) (VanillaId) $c/=15Vb]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
(StgNonRec)
  (VanillaId) $c/=16lb =
  (FUN)
  [(VanillaId) dsmb ,(VanillaId) ds1nb]
    (Case) (App) (VanillaId) dsmb = (VanillaId) wildob
      (AlgAlt)
        (DataAlt) GHC.Types.C# (VanillaId) c1pb
          -> (Case) (App) (VanillaId) ds1nb = (VanillaId) wild1qb
               (AlgAlt)
                 (DataAlt) GHC.Types.C# (VanillaId) c2rb
                   -> (Case) (Op) (Prim) neChar# [(VarArg) (VanillaId) c1pb ,(VarArg) (VanillaId) c2rb] = (VanillaId) satsb
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satsb
(StgNonRec)
  (VanillaId) $c==17tb =
  (FUN)
  [(VanillaId) dsub ,(VanillaId) ds1vb]
    (Case) (App) (VanillaId) dsub = (VanillaId) wildwb
      (AlgAlt)
        (DataAlt) GHC.Types.C# (VanillaId) c1xb
          -> (Case) (App) (VanillaId) ds1vb = (VanillaId) wild1yb
               (AlgAlt)
                 (DataAlt) GHC.Types.C# (VanillaId) c2zb
                   -> (Case) (Op) (Prim) eqChar# [(VarArg) (VanillaId) c1xb ,(VarArg) (VanillaId) c2zb] = (VanillaId) sat0b
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat0b
(StgNonRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [Char] APPFL.Classes.$fEqChar =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) $c==17tb ,(VarArg) (VanillaId) $c/=16lb]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
(StgNonRec)
  (VanillaId) $ccompare1b =
  (FUN)
  [(VanillaId) ds2b ,(VanillaId) ds13b]
    (Case) (App) (VanillaId) ds2b = (VanillaId) wild4b
      (AlgAlt)
        (DataAlt) GHC.Tuple.()
          -> (Case) (App) (VanillaId) ds13b = (VanillaId) wild15b
               (AlgAlt) (DataAlt) GHC.Tuple.() -> (ConApp) GHC.Types.EQ []
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.()] APPFL.Classes.$fOrd() =
  (CONish) APPFL.Classes.D:Ord [(VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Tuple.()] APPFL.Classes.$fEq() ,(VarArg) (VanillaId) $ccompare1b ,(VarArg) (VanillaId) $c<6b ,(VarArg) (VanillaId) $c<=7b ,(VarArg) (VanillaId) $c>8b ,(VarArg) (VanillaId) $c>=9b ,(VarArg) (VanillaId) $cmax-b ,(VarArg) (VanillaId) $cmin_b]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Ord
  (VanillaId) $cmin_b =
  (FUN)
  [(VanillaId) xAc ,(VanillaId) yBc]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.()] APPFL.Classes.$fOrd() (VarArg) (VanillaId) xAc (VarArg) (VanillaId) yBc = (VanillaId) wildCc
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) yBc
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xAc
  (VanillaId) $cmax-b =
  (FUN)
  [(VanillaId) xDc ,(VanillaId) yEc]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.()] APPFL.Classes.$fOrd() (VarArg) (VanillaId) xDc (VarArg) (VanillaId) yEc = (VanillaId) wildFc
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) xDc
        (DataAlt) GHC.Types.True -> (App) (VanillaId) yEc
  (VanillaId) $c>=9b =
  (FUN)
  [(VanillaId) xGc ,(VanillaId) yHc]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.()] APPFL.Classes.$fOrd() (VarArg) (VanillaId) xGc (VarArg) (VanillaId) yHc = (VanillaId) wildIc
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
  (VanillaId) $c>8b =
  (FUN)
  [(VanillaId) xJc ,(VanillaId) yKc]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.()] APPFL.Classes.$fOrd() (VarArg) (VanillaId) xJc (VarArg) (VanillaId) yKc = (VanillaId) wildLc
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
  (VanillaId) $c<=7b =
  (FUN)
  [(VanillaId) xMc ,(VanillaId) yNc]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.()] APPFL.Classes.$fOrd() (VarArg) (VanillaId) xMc (VarArg) (VanillaId) yNc = (VanillaId) wildOc
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
  (VanillaId) $c<6b =
  (FUN)
  [(VanillaId) xPc ,(VanillaId) yQc]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.()] APPFL.Classes.$fOrd() (VarArg) (VanillaId) xPc (VarArg) (VanillaId) yQc = (VanillaId) wildRc
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
(StgNonRec)
  (VanillaId) $ccompare1Sc =
  (FUN)
  [(VanillaId) $dEq5Tc ,(VanillaId) $dOrd7Uc ,(VanillaId) $dOrd8Vc ,(VanillaId) dsWc ,(VanillaId) ds1Xc]
    (Case) (App) (VanillaId) dsWc = (VanillaId) wildYc
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,) (VanillaId) a14Zc (VanillaId) b1ac
          -> (Case) (App) (VanillaId) ds1Xc = (VanillaId) wild1bc
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,) (VanillaId) a15cc (VanillaId) b2dc
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7Uc (VarArg) (VanillaId) a14Zc (VarArg) (VanillaId) a15cc = (VanillaId) wild2ec
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2ec
                          (DataAlt) GHC.Types.EQ
                            -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8Vc (VarArg) (VanillaId) b1ac (VarArg) (VanillaId) b2dc
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,) afc bgc] APPFL.Classes.$fOrd(,) =
  (FUN)
  [(VanillaId) $dEq5hc ,(VanillaId) $dOrd7ic ,(VanillaId) $dOrd8jc]
    (Let) let
      (StgNonRec)
        (VanillaId) satkc =
        (THUNK)
          (App) (VanillaId) $cmin1lc (VarArg) (VanillaId) $dEq5hc (VarArg) (VanillaId) $dOrd7ic (VarArg) (VanillaId) $dOrd8jc
    in (Let) let
         (StgNonRec)
           (VanillaId) satmc =
           (THUNK)
             (App) (VanillaId) $cmax1nc (VarArg) (VanillaId) $dEq5hc (VarArg) (VanillaId) $dOrd7ic (VarArg) (VanillaId) $dOrd8jc
       in (Let) let
            (StgNonRec)
              (VanillaId) satoc =
              (THUNK)
                (App) (VanillaId) $c>=1pc (VarArg) (VanillaId) $dEq5hc (VarArg) (VanillaId) $dOrd7ic (VarArg) (VanillaId) $dOrd8jc
          in (Let) let
               (StgNonRec)
                 (VanillaId) satqc =
                 (THUNK)
                   (App) (VanillaId) $c>1rc (VarArg) (VanillaId) $dEq5hc (VarArg) (VanillaId) $dOrd7ic (VarArg) (VanillaId) $dOrd8jc
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satsc =
                    (THUNK)
                      (App) (VanillaId) $c<=1tc (VarArg) (VanillaId) $dEq5hc (VarArg) (VanillaId) $dOrd7ic (VarArg) (VanillaId) $dOrd8jc
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satuc =
                       (THUNK)
                         (App) (VanillaId) $c<1vc (VarArg) (VanillaId) $dEq5hc (VarArg) (VanillaId) $dOrd7ic (VarArg) (VanillaId) $dOrd8jc
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satwc =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare1Sc (VarArg) (VanillaId) $dEq5hc (VarArg) (VanillaId) $dOrd7ic (VarArg) (VanillaId) $dOrd8jc (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5hc ,(VarArg) (VanillaId) satwc ,(VarArg) (VanillaId) satuc ,(VarArg) (VanillaId) satsc ,(VarArg) (VanillaId) satqc ,(VarArg) (VanillaId) satoc ,(VarArg) (VanillaId) satmc ,(VarArg) (VanillaId) satkc]
  (VanillaId) $cmin1lc =
  (FUN)
  [(VanillaId) $dEq5xc ,(VanillaId) $dOrd7yc ,(VanillaId) $dOrd8zc]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd90c =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,) afc bgc] APPFL.Classes.$fOrd(,) (VarArg) (VanillaId) $dEq5xc (VarArg) (VanillaId) $dOrd7yc (VarArg) (VanillaId) $dOrd8zc
    in (Let) let
         (StgNonRec)
           (VanillaId) sat1c =
           (FUN)
           [(VanillaId) x2c ,(VanillaId) y3c]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd90c (VarArg) (VanillaId) x2c (VarArg) (VanillaId) y3c = (VanillaId) wild4c
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) y3c
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) x2c
       in (App) (VanillaId) sat1c
  (VanillaId) $cmax1nc =
  (FUN)
  [(VanillaId) $dEq55c ,(VanillaId) $dOrd76c ,(VanillaId) $dOrd87c]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd98c =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,) afc bgc] APPFL.Classes.$fOrd(,) (VarArg) (VanillaId) $dEq55c (VarArg) (VanillaId) $dOrd76c (VarArg) (VanillaId) $dOrd87c
    in (Let) let
         (StgNonRec)
           (VanillaId) sat9c =
           (FUN)
           [(VanillaId) x-c ,(VanillaId) y_c]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd98c (VarArg) (VanillaId) x-c (VarArg) (VanillaId) y_c = (VanillaId) wildAd
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) x-c
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) y_c
       in (App) (VanillaId) sat9c
  (VanillaId) $c>=1pc =
  (FUN)
  [(VanillaId) $dEq5Bd ,(VanillaId) $dOrd7Cd ,(VanillaId) $dOrd8Dd]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd9Ed =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,) afc bgc] APPFL.Classes.$fOrd(,) (VarArg) (VanillaId) $dEq5Bd (VarArg) (VanillaId) $dOrd7Cd (VarArg) (VanillaId) $dOrd8Dd
    in (Let) let
         (StgNonRec)
           (VanillaId) satFd =
           (FUN)
           [(VanillaId) xGd ,(VanillaId) yHd]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9Ed (VarArg) (VanillaId) xGd (VarArg) (VanillaId) yHd = (VanillaId) wildId
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satFd
  (VanillaId) $c>1rc =
  (FUN)
  [(VanillaId) $dEq5Jd ,(VanillaId) $dOrd7Kd ,(VanillaId) $dOrd8Ld]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd9Md =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,) afc bgc] APPFL.Classes.$fOrd(,) (VarArg) (VanillaId) $dEq5Jd (VarArg) (VanillaId) $dOrd7Kd (VarArg) (VanillaId) $dOrd8Ld
    in (Let) let
         (StgNonRec)
           (VanillaId) satNd =
           (FUN)
           [(VanillaId) xOd ,(VanillaId) yPd]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9Md (VarArg) (VanillaId) xOd (VarArg) (VanillaId) yPd = (VanillaId) wildQd
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satNd
  (VanillaId) $c<=1tc =
  (FUN)
  [(VanillaId) $dEq5Rd ,(VanillaId) $dOrd7Sd ,(VanillaId) $dOrd8Td]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd9Ud =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,) afc bgc] APPFL.Classes.$fOrd(,) (VarArg) (VanillaId) $dEq5Rd (VarArg) (VanillaId) $dOrd7Sd (VarArg) (VanillaId) $dOrd8Td
    in (Let) let
         (StgNonRec)
           (VanillaId) satVd =
           (FUN)
           [(VanillaId) xWd ,(VanillaId) yXd]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9Ud (VarArg) (VanillaId) xWd (VarArg) (VanillaId) yXd = (VanillaId) wildYd
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satVd
  (VanillaId) $c<1vc =
  (FUN)
  [(VanillaId) $dEq5Zd ,(VanillaId) $dOrd7ad ,(VanillaId) $dOrd8bd]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd9cd =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,) afc bgc] APPFL.Classes.$fOrd(,) (VarArg) (VanillaId) $dEq5Zd (VarArg) (VanillaId) $dOrd7ad (VarArg) (VanillaId) $dOrd8bd
    in (Let) let
         (StgNonRec)
           (VanillaId) satdd =
           (FUN)
           [(VanillaId) xed ,(VanillaId) yfd]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9cd (VarArg) (VanillaId) xed (VarArg) (VanillaId) yfd = (VanillaId) wildgd
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satdd
(StgNonRec)
  (VanillaId) $ccompare2hd =
  (FUN)
  [(VanillaId) $dEq5id ,(VanillaId) $dOrd7jd ,(VanillaId) $dOrd8kd ,(VanillaId) $dOrd9ld ,(VanillaId) dsmd ,(VanillaId) ds1nd]
    (Case) (App) (VanillaId) dsmd = (VanillaId) wildod
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,) (VanillaId) a14pd (VanillaId) b1qd (VanillaId) c1rd
          -> (Case) (App) (VanillaId) ds1nd = (VanillaId) wild1sd
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,) (VanillaId) a15td (VanillaId) b2ud (VanillaId) c2vd
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7jd (VarArg) (VanillaId) a14pd (VarArg) (VanillaId) a15td = (VanillaId) wild2wd
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2wd
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8kd (VarArg) (VanillaId) b1qd (VarArg) (VanillaId) b2ud = (VanillaId) wild3xd
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3xd
                                   (DataAlt) GHC.Types.EQ
                                     -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9ld (VarArg) (VanillaId) c1rd (VarArg) (VanillaId) c2vd
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,) ayd bzd c0d] APPFL.Classes.$fOrd(,,) =
  (FUN)
  [(VanillaId) $dEq51d ,(VanillaId) $dOrd72d ,(VanillaId) $dOrd83d ,(VanillaId) $dOrd94d]
    (Let) let
      (StgNonRec)
        (VanillaId) sat5d =
        (THUNK)
          (App) (VanillaId) $cmin26d (VarArg) (VanillaId) $dEq51d (VarArg) (VanillaId) $dOrd72d (VarArg) (VanillaId) $dOrd83d (VarArg) (VanillaId) $dOrd94d
    in (Let) let
         (StgNonRec)
           (VanillaId) sat7d =
           (THUNK)
             (App) (VanillaId) $cmax28d (VarArg) (VanillaId) $dEq51d (VarArg) (VanillaId) $dOrd72d (VarArg) (VanillaId) $dOrd83d (VarArg) (VanillaId) $dOrd94d
       in (Let) let
            (StgNonRec)
              (VanillaId) sat9d =
              (THUNK)
                (App) (VanillaId) $c>=2-d (VarArg) (VanillaId) $dEq51d (VarArg) (VanillaId) $dOrd72d (VarArg) (VanillaId) $dOrd83d (VarArg) (VanillaId) $dOrd94d
          in (Let) let
               (StgNonRec)
                 (VanillaId) sat_d =
                 (THUNK)
                   (App) (VanillaId) $c>2Ae (VarArg) (VanillaId) $dEq51d (VarArg) (VanillaId) $dOrd72d (VarArg) (VanillaId) $dOrd83d (VarArg) (VanillaId) $dOrd94d
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satBe =
                    (THUNK)
                      (App) (VanillaId) $c<=2Ce (VarArg) (VanillaId) $dEq51d (VarArg) (VanillaId) $dOrd72d (VarArg) (VanillaId) $dOrd83d (VarArg) (VanillaId) $dOrd94d
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satDe =
                       (THUNK)
                         (App) (VanillaId) $c<2Ee (VarArg) (VanillaId) $dEq51d (VarArg) (VanillaId) $dOrd72d (VarArg) (VanillaId) $dOrd83d (VarArg) (VanillaId) $dOrd94d
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satFe =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare2hd (VarArg) (VanillaId) $dEq51d (VarArg) (VanillaId) $dOrd72d (VarArg) (VanillaId) $dOrd83d (VarArg) (VanillaId) $dOrd94d (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq51d ,(VarArg) (VanillaId) satFe ,(VarArg) (VanillaId) satDe ,(VarArg) (VanillaId) satBe ,(VarArg) (VanillaId) sat_d ,(VarArg) (VanillaId) sat9d ,(VarArg) (VanillaId) sat7d ,(VarArg) (VanillaId) sat5d]
  (VanillaId) $cmin26d =
  (FUN)
  [(VanillaId) $dEq5Ge ,(VanillaId) $dOrd7He ,(VanillaId) $dOrd8Ie ,(VanillaId) $dOrd9Je]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd10Ke =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,) ayd bzd c0d] APPFL.Classes.$fOrd(,,) (VarArg) (VanillaId) $dEq5Ge (VarArg) (VanillaId) $dOrd7He (VarArg) (VanillaId) $dOrd8Ie (VarArg) (VanillaId) $dOrd9Je
    in (Let) let
         (StgNonRec)
           (VanillaId) satLe =
           (FUN)
           [(VanillaId) xMe ,(VanillaId) yNe]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd10Ke (VarArg) (VanillaId) xMe (VarArg) (VanillaId) yNe = (VanillaId) wildOe
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) yNe
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xMe
       in (App) (VanillaId) satLe
  (VanillaId) $cmax28d =
  (FUN)
  [(VanillaId) $dEq5Pe ,(VanillaId) $dOrd7Qe ,(VanillaId) $dOrd8Re ,(VanillaId) $dOrd9Se]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd10Te =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,) ayd bzd c0d] APPFL.Classes.$fOrd(,,) (VarArg) (VanillaId) $dEq5Pe (VarArg) (VanillaId) $dOrd7Qe (VarArg) (VanillaId) $dOrd8Re (VarArg) (VanillaId) $dOrd9Se
    in (Let) let
         (StgNonRec)
           (VanillaId) satUe =
           (FUN)
           [(VanillaId) xVe ,(VanillaId) yWe]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd10Te (VarArg) (VanillaId) xVe (VarArg) (VanillaId) yWe = (VanillaId) wildXe
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xVe
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yWe
       in (App) (VanillaId) satUe
  (VanillaId) $c>=2-d =
  (FUN)
  [(VanillaId) $dEq5Ye ,(VanillaId) $dOrd7Ze ,(VanillaId) $dOrd8ae ,(VanillaId) $dOrd9be]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd10ce =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,) ayd bzd c0d] APPFL.Classes.$fOrd(,,) (VarArg) (VanillaId) $dEq5Ye (VarArg) (VanillaId) $dOrd7Ze (VarArg) (VanillaId) $dOrd8ae (VarArg) (VanillaId) $dOrd9be
    in (Let) let
         (StgNonRec)
           (VanillaId) satde =
           (FUN)
           [(VanillaId) xee ,(VanillaId) yfe]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10ce (VarArg) (VanillaId) xee (VarArg) (VanillaId) yfe = (VanillaId) wildge
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satde
  (VanillaId) $c>2Ae =
  (FUN)
  [(VanillaId) $dEq5he ,(VanillaId) $dOrd7ie ,(VanillaId) $dOrd8je ,(VanillaId) $dOrd9ke]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd10le =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,) ayd bzd c0d] APPFL.Classes.$fOrd(,,) (VarArg) (VanillaId) $dEq5he (VarArg) (VanillaId) $dOrd7ie (VarArg) (VanillaId) $dOrd8je (VarArg) (VanillaId) $dOrd9ke
    in (Let) let
         (StgNonRec)
           (VanillaId) satme =
           (FUN)
           [(VanillaId) xne ,(VanillaId) yoe]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10le (VarArg) (VanillaId) xne (VarArg) (VanillaId) yoe = (VanillaId) wildpe
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satme
  (VanillaId) $c<=2Ce =
  (FUN)
  [(VanillaId) $dEq5qe ,(VanillaId) $dOrd7re ,(VanillaId) $dOrd8se ,(VanillaId) $dOrd9te]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd10ue =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,) ayd bzd c0d] APPFL.Classes.$fOrd(,,) (VarArg) (VanillaId) $dEq5qe (VarArg) (VanillaId) $dOrd7re (VarArg) (VanillaId) $dOrd8se (VarArg) (VanillaId) $dOrd9te
    in (Let) let
         (StgNonRec)
           (VanillaId) satve =
           (FUN)
           [(VanillaId) xwe ,(VanillaId) yxe]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10ue (VarArg) (VanillaId) xwe (VarArg) (VanillaId) yxe = (VanillaId) wildye
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satve
  (VanillaId) $c<2Ee =
  (FUN)
  [(VanillaId) $dEq5ze ,(VanillaId) $dOrd70e ,(VanillaId) $dOrd81e ,(VanillaId) $dOrd92e]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd103e =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,) ayd bzd c0d] APPFL.Classes.$fOrd(,,) (VarArg) (VanillaId) $dEq5ze (VarArg) (VanillaId) $dOrd70e (VarArg) (VanillaId) $dOrd81e (VarArg) (VanillaId) $dOrd92e
    in (Let) let
         (StgNonRec)
           (VanillaId) sat4e =
           (FUN)
           [(VanillaId) x5e ,(VanillaId) y6e]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd103e (VarArg) (VanillaId) x5e (VarArg) (VanillaId) y6e = (VanillaId) wild7e
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) sat4e
(StgNonRec)
  (VanillaId) $ccompare38e =
  (FUN)
  [(VanillaId) $dEq59e ,(VanillaId) $dOrd7-e ,(VanillaId) $dOrd8_e ,(VanillaId) $dOrd9Af ,(VanillaId) $dOrd10Bf ,(VanillaId) dsCf ,(VanillaId) ds1Df]
    (Case) (App) (VanillaId) dsCf = (VanillaId) wildEf
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,) (VanillaId) a14Ff (VanillaId) b1Gf (VanillaId) c1Hf (VanillaId) d1If
          -> (Case) (App) (VanillaId) ds1Df = (VanillaId) wild1Jf
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,) (VanillaId) a15Kf (VanillaId) b2Lf (VanillaId) c2Mf (VanillaId) d2Nf
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7-e (VarArg) (VanillaId) a14Ff (VarArg) (VanillaId) a15Kf = (VanillaId) wild2Of
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2Of
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8_e (VarArg) (VanillaId) b1Gf (VarArg) (VanillaId) b2Lf = (VanillaId) wild3Pf
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3Pf
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9Af (VarArg) (VanillaId) c1Hf (VarArg) (VanillaId) c2Mf = (VanillaId) wild4Qf
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4Qf
                                            (DataAlt) GHC.Types.EQ
                                              -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10Bf (VarArg) (VanillaId) d1If (VarArg) (VanillaId) d2Nf
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,) aRf bSf cTf dUf] APPFL.Classes.$fOrd(,,,) =
  (FUN)
  [(VanillaId) $dEq5Vf ,(VanillaId) $dOrd7Wf ,(VanillaId) $dOrd8Xf ,(VanillaId) $dOrd9Yf ,(VanillaId) $dOrd10Zf]
    (Let) let
      (StgNonRec)
        (VanillaId) sataf =
        (THUNK)
          (App) (VanillaId) $cmin3bf (VarArg) (VanillaId) $dEq5Vf (VarArg) (VanillaId) $dOrd7Wf (VarArg) (VanillaId) $dOrd8Xf (VarArg) (VanillaId) $dOrd9Yf (VarArg) (VanillaId) $dOrd10Zf
    in (Let) let
         (StgNonRec)
           (VanillaId) satcf =
           (THUNK)
             (App) (VanillaId) $cmax3df (VarArg) (VanillaId) $dEq5Vf (VarArg) (VanillaId) $dOrd7Wf (VarArg) (VanillaId) $dOrd8Xf (VarArg) (VanillaId) $dOrd9Yf (VarArg) (VanillaId) $dOrd10Zf
       in (Let) let
            (StgNonRec)
              (VanillaId) satef =
              (THUNK)
                (App) (VanillaId) $c>=3ff (VarArg) (VanillaId) $dEq5Vf (VarArg) (VanillaId) $dOrd7Wf (VarArg) (VanillaId) $dOrd8Xf (VarArg) (VanillaId) $dOrd9Yf (VarArg) (VanillaId) $dOrd10Zf
          in (Let) let
               (StgNonRec)
                 (VanillaId) satgf =
                 (THUNK)
                   (App) (VanillaId) $c>3hf (VarArg) (VanillaId) $dEq5Vf (VarArg) (VanillaId) $dOrd7Wf (VarArg) (VanillaId) $dOrd8Xf (VarArg) (VanillaId) $dOrd9Yf (VarArg) (VanillaId) $dOrd10Zf
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satif =
                    (THUNK)
                      (App) (VanillaId) $c<=3jf (VarArg) (VanillaId) $dEq5Vf (VarArg) (VanillaId) $dOrd7Wf (VarArg) (VanillaId) $dOrd8Xf (VarArg) (VanillaId) $dOrd9Yf (VarArg) (VanillaId) $dOrd10Zf
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satkf =
                       (THUNK)
                         (App) (VanillaId) $c<3lf (VarArg) (VanillaId) $dEq5Vf (VarArg) (VanillaId) $dOrd7Wf (VarArg) (VanillaId) $dOrd8Xf (VarArg) (VanillaId) $dOrd9Yf (VarArg) (VanillaId) $dOrd10Zf
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satmf =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare38e (VarArg) (VanillaId) $dEq5Vf (VarArg) (VanillaId) $dOrd7Wf (VarArg) (VanillaId) $dOrd8Xf (VarArg) (VanillaId) $dOrd9Yf (VarArg) (VanillaId) $dOrd10Zf (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5Vf ,(VarArg) (VanillaId) satmf ,(VarArg) (VanillaId) satkf ,(VarArg) (VanillaId) satif ,(VarArg) (VanillaId) satgf ,(VarArg) (VanillaId) satef ,(VarArg) (VanillaId) satcf ,(VarArg) (VanillaId) sataf]
  (VanillaId) $cmin3bf =
  (FUN)
  [(VanillaId) $dEq5nf ,(VanillaId) $dOrd7of ,(VanillaId) $dOrd8pf ,(VanillaId) $dOrd9qf ,(VanillaId) $dOrd10rf]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd11sf =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,) aRf bSf cTf dUf] APPFL.Classes.$fOrd(,,,) (VarArg) (VanillaId) $dEq5nf (VarArg) (VanillaId) $dOrd7of (VarArg) (VanillaId) $dOrd8pf (VarArg) (VanillaId) $dOrd9qf (VarArg) (VanillaId) $dOrd10rf
    in (Let) let
         (StgNonRec)
           (VanillaId) sattf =
           (FUN)
           [(VanillaId) xuf ,(VanillaId) yvf]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd11sf (VarArg) (VanillaId) xuf (VarArg) (VanillaId) yvf = (VanillaId) wildwf
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) yvf
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xuf
       in (App) (VanillaId) sattf
  (VanillaId) $cmax3df =
  (FUN)
  [(VanillaId) $dEq5xf ,(VanillaId) $dOrd7yf ,(VanillaId) $dOrd8zf ,(VanillaId) $dOrd90f ,(VanillaId) $dOrd101f]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd112f =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,) aRf bSf cTf dUf] APPFL.Classes.$fOrd(,,,) (VarArg) (VanillaId) $dEq5xf (VarArg) (VanillaId) $dOrd7yf (VarArg) (VanillaId) $dOrd8zf (VarArg) (VanillaId) $dOrd90f (VarArg) (VanillaId) $dOrd101f
    in (Let) let
         (StgNonRec)
           (VanillaId) sat3f =
           (FUN)
           [(VanillaId) x4f ,(VanillaId) y5f]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd112f (VarArg) (VanillaId) x4f (VarArg) (VanillaId) y5f = (VanillaId) wild6f
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) x4f
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) y5f
       in (App) (VanillaId) sat3f
  (VanillaId) $c>=3ff =
  (FUN)
  [(VanillaId) $dEq57f ,(VanillaId) $dOrd78f ,(VanillaId) $dOrd89f ,(VanillaId) $dOrd9-f ,(VanillaId) $dOrd10_f]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd11Ag =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,) aRf bSf cTf dUf] APPFL.Classes.$fOrd(,,,) (VarArg) (VanillaId) $dEq57f (VarArg) (VanillaId) $dOrd78f (VarArg) (VanillaId) $dOrd89f (VarArg) (VanillaId) $dOrd9-f (VarArg) (VanillaId) $dOrd10_f
    in (Let) let
         (StgNonRec)
           (VanillaId) satBg =
           (FUN)
           [(VanillaId) xCg ,(VanillaId) yDg]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11Ag (VarArg) (VanillaId) xCg (VarArg) (VanillaId) yDg = (VanillaId) wildEg
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satBg
  (VanillaId) $c>3hf =
  (FUN)
  [(VanillaId) $dEq5Fg ,(VanillaId) $dOrd7Gg ,(VanillaId) $dOrd8Hg ,(VanillaId) $dOrd9Ig ,(VanillaId) $dOrd10Jg]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd11Kg =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,) aRf bSf cTf dUf] APPFL.Classes.$fOrd(,,,) (VarArg) (VanillaId) $dEq5Fg (VarArg) (VanillaId) $dOrd7Gg (VarArg) (VanillaId) $dOrd8Hg (VarArg) (VanillaId) $dOrd9Ig (VarArg) (VanillaId) $dOrd10Jg
    in (Let) let
         (StgNonRec)
           (VanillaId) satLg =
           (FUN)
           [(VanillaId) xMg ,(VanillaId) yNg]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11Kg (VarArg) (VanillaId) xMg (VarArg) (VanillaId) yNg = (VanillaId) wildOg
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satLg
  (VanillaId) $c<=3jf =
  (FUN)
  [(VanillaId) $dEq5Pg ,(VanillaId) $dOrd7Qg ,(VanillaId) $dOrd8Rg ,(VanillaId) $dOrd9Sg ,(VanillaId) $dOrd10Tg]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd11Ug =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,) aRf bSf cTf dUf] APPFL.Classes.$fOrd(,,,) (VarArg) (VanillaId) $dEq5Pg (VarArg) (VanillaId) $dOrd7Qg (VarArg) (VanillaId) $dOrd8Rg (VarArg) (VanillaId) $dOrd9Sg (VarArg) (VanillaId) $dOrd10Tg
    in (Let) let
         (StgNonRec)
           (VanillaId) satVg =
           (FUN)
           [(VanillaId) xWg ,(VanillaId) yXg]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11Ug (VarArg) (VanillaId) xWg (VarArg) (VanillaId) yXg = (VanillaId) wildYg
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satVg
  (VanillaId) $c<3lf =
  (FUN)
  [(VanillaId) $dEq5Zg ,(VanillaId) $dOrd7ag ,(VanillaId) $dOrd8bg ,(VanillaId) $dOrd9cg ,(VanillaId) $dOrd10dg]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd11eg =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,) aRf bSf cTf dUf] APPFL.Classes.$fOrd(,,,) (VarArg) (VanillaId) $dEq5Zg (VarArg) (VanillaId) $dOrd7ag (VarArg) (VanillaId) $dOrd8bg (VarArg) (VanillaId) $dOrd9cg (VarArg) (VanillaId) $dOrd10dg
    in (Let) let
         (StgNonRec)
           (VanillaId) satfg =
           (FUN)
           [(VanillaId) xgg ,(VanillaId) yhg]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11eg (VarArg) (VanillaId) xgg (VarArg) (VanillaId) yhg = (VanillaId) wildig
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satfg
(StgNonRec)
  (VanillaId) $ccompare4jg =
  (FUN)
  [(VanillaId) $dEq5kg ,(VanillaId) $dOrd7lg ,(VanillaId) $dOrd8mg ,(VanillaId) $dOrd9ng ,(VanillaId) $dOrd10og ,(VanillaId) $dOrd11pg ,(VanillaId) dsqg ,(VanillaId) ds1rg]
    (Case) (App) (VanillaId) dsqg = (VanillaId) wildsg
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,) (VanillaId) a14tg (VanillaId) b1ug (VanillaId) c1vg (VanillaId) d1wg (VanillaId) e1xg
          -> (Case) (App) (VanillaId) ds1rg = (VanillaId) wild1yg
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,) (VanillaId) a15zg (VanillaId) b20g (VanillaId) c21g (VanillaId) d22g (VanillaId) e23g
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7lg (VarArg) (VanillaId) a14tg (VarArg) (VanillaId) a15zg = (VanillaId) wild24g
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild24g
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8mg (VarArg) (VanillaId) b1ug (VarArg) (VanillaId) b20g = (VanillaId) wild35g
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild35g
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9ng (VarArg) (VanillaId) c1vg (VarArg) (VanillaId) c21g = (VanillaId) wild46g
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild46g
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10og (VarArg) (VanillaId) d1wg (VarArg) (VanillaId) d22g = (VanillaId) wild57g
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild57g
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11pg (VarArg) (VanillaId) e1xg (VarArg) (VanillaId) e23g
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,) a8g b9g c-g d_g eAh] APPFL.Classes.$fOrd(,,,,) =
  (FUN)
  [(VanillaId) $dEq5Bh ,(VanillaId) $dOrd7Ch ,(VanillaId) $dOrd8Dh ,(VanillaId) $dOrd9Eh ,(VanillaId) $dOrd10Fh ,(VanillaId) $dOrd11Gh]
    (Let) let
      (StgNonRec)
        (VanillaId) satHh =
        (THUNK)
          (App) (VanillaId) $cmin4Ih (VarArg) (VanillaId) $dEq5Bh (VarArg) (VanillaId) $dOrd7Ch (VarArg) (VanillaId) $dOrd8Dh (VarArg) (VanillaId) $dOrd9Eh (VarArg) (VanillaId) $dOrd10Fh (VarArg) (VanillaId) $dOrd11Gh
    in (Let) let
         (StgNonRec)
           (VanillaId) satJh =
           (THUNK)
             (App) (VanillaId) $cmax4Kh (VarArg) (VanillaId) $dEq5Bh (VarArg) (VanillaId) $dOrd7Ch (VarArg) (VanillaId) $dOrd8Dh (VarArg) (VanillaId) $dOrd9Eh (VarArg) (VanillaId) $dOrd10Fh (VarArg) (VanillaId) $dOrd11Gh
       in (Let) let
            (StgNonRec)
              (VanillaId) satLh =
              (THUNK)
                (App) (VanillaId) $c>=4Mh (VarArg) (VanillaId) $dEq5Bh (VarArg) (VanillaId) $dOrd7Ch (VarArg) (VanillaId) $dOrd8Dh (VarArg) (VanillaId) $dOrd9Eh (VarArg) (VanillaId) $dOrd10Fh (VarArg) (VanillaId) $dOrd11Gh
          in (Let) let
               (StgNonRec)
                 (VanillaId) satNh =
                 (THUNK)
                   (App) (VanillaId) $c>4Oh (VarArg) (VanillaId) $dEq5Bh (VarArg) (VanillaId) $dOrd7Ch (VarArg) (VanillaId) $dOrd8Dh (VarArg) (VanillaId) $dOrd9Eh (VarArg) (VanillaId) $dOrd10Fh (VarArg) (VanillaId) $dOrd11Gh
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satPh =
                    (THUNK)
                      (App) (VanillaId) $c<=4Qh (VarArg) (VanillaId) $dEq5Bh (VarArg) (VanillaId) $dOrd7Ch (VarArg) (VanillaId) $dOrd8Dh (VarArg) (VanillaId) $dOrd9Eh (VarArg) (VanillaId) $dOrd10Fh (VarArg) (VanillaId) $dOrd11Gh
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satRh =
                       (THUNK)
                         (App) (VanillaId) $c<4Sh (VarArg) (VanillaId) $dEq5Bh (VarArg) (VanillaId) $dOrd7Ch (VarArg) (VanillaId) $dOrd8Dh (VarArg) (VanillaId) $dOrd9Eh (VarArg) (VanillaId) $dOrd10Fh (VarArg) (VanillaId) $dOrd11Gh
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satTh =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare4jg (VarArg) (VanillaId) $dEq5Bh (VarArg) (VanillaId) $dOrd7Ch (VarArg) (VanillaId) $dOrd8Dh (VarArg) (VanillaId) $dOrd9Eh (VarArg) (VanillaId) $dOrd10Fh (VarArg) (VanillaId) $dOrd11Gh (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5Bh ,(VarArg) (VanillaId) satTh ,(VarArg) (VanillaId) satRh ,(VarArg) (VanillaId) satPh ,(VarArg) (VanillaId) satNh ,(VarArg) (VanillaId) satLh ,(VarArg) (VanillaId) satJh ,(VarArg) (VanillaId) satHh]
  (VanillaId) $cmin4Ih =
  (FUN)
  [(VanillaId) $dEq5Uh ,(VanillaId) $dOrd7Vh ,(VanillaId) $dOrd8Wh ,(VanillaId) $dOrd9Xh ,(VanillaId) $dOrd10Yh ,(VanillaId) $dOrd11Zh]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd12ah =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,) a8g b9g c-g d_g eAh] APPFL.Classes.$fOrd(,,,,) (VarArg) (VanillaId) $dEq5Uh (VarArg) (VanillaId) $dOrd7Vh (VarArg) (VanillaId) $dOrd8Wh (VarArg) (VanillaId) $dOrd9Xh (VarArg) (VanillaId) $dOrd10Yh (VarArg) (VanillaId) $dOrd11Zh
    in (Let) let
         (StgNonRec)
           (VanillaId) satbh =
           (FUN)
           [(VanillaId) xch ,(VanillaId) ydh]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd12ah (VarArg) (VanillaId) xch (VarArg) (VanillaId) ydh = (VanillaId) wildeh
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) ydh
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xch
       in (App) (VanillaId) satbh
  (VanillaId) $cmax4Kh =
  (FUN)
  [(VanillaId) $dEq5fh ,(VanillaId) $dOrd7gh ,(VanillaId) $dOrd8hh ,(VanillaId) $dOrd9ih ,(VanillaId) $dOrd10jh ,(VanillaId) $dOrd11kh]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd12lh =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,) a8g b9g c-g d_g eAh] APPFL.Classes.$fOrd(,,,,) (VarArg) (VanillaId) $dEq5fh (VarArg) (VanillaId) $dOrd7gh (VarArg) (VanillaId) $dOrd8hh (VarArg) (VanillaId) $dOrd9ih (VarArg) (VanillaId) $dOrd10jh (VarArg) (VanillaId) $dOrd11kh
    in (Let) let
         (StgNonRec)
           (VanillaId) satmh =
           (FUN)
           [(VanillaId) xnh ,(VanillaId) yoh]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd12lh (VarArg) (VanillaId) xnh (VarArg) (VanillaId) yoh = (VanillaId) wildph
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xnh
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yoh
       in (App) (VanillaId) satmh
  (VanillaId) $c>=4Mh =
  (FUN)
  [(VanillaId) $dEq5qh ,(VanillaId) $dOrd7rh ,(VanillaId) $dOrd8sh ,(VanillaId) $dOrd9th ,(VanillaId) $dOrd10uh ,(VanillaId) $dOrd11vh]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd12wh =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,) a8g b9g c-g d_g eAh] APPFL.Classes.$fOrd(,,,,) (VarArg) (VanillaId) $dEq5qh (VarArg) (VanillaId) $dOrd7rh (VarArg) (VanillaId) $dOrd8sh (VarArg) (VanillaId) $dOrd9th (VarArg) (VanillaId) $dOrd10uh (VarArg) (VanillaId) $dOrd11vh
    in (Let) let
         (StgNonRec)
           (VanillaId) satxh =
           (FUN)
           [(VanillaId) xyh ,(VanillaId) yzh]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12wh (VarArg) (VanillaId) xyh (VarArg) (VanillaId) yzh = (VanillaId) wild0h
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satxh
  (VanillaId) $c>4Oh =
  (FUN)
  [(VanillaId) $dEq51h ,(VanillaId) $dOrd72h ,(VanillaId) $dOrd83h ,(VanillaId) $dOrd94h ,(VanillaId) $dOrd105h ,(VanillaId) $dOrd116h]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd127h =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,) a8g b9g c-g d_g eAh] APPFL.Classes.$fOrd(,,,,) (VarArg) (VanillaId) $dEq51h (VarArg) (VanillaId) $dOrd72h (VarArg) (VanillaId) $dOrd83h (VarArg) (VanillaId) $dOrd94h (VarArg) (VanillaId) $dOrd105h (VarArg) (VanillaId) $dOrd116h
    in (Let) let
         (StgNonRec)
           (VanillaId) sat8h =
           (FUN)
           [(VanillaId) x9h ,(VanillaId) y-h]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd127h (VarArg) (VanillaId) x9h (VarArg) (VanillaId) y-h = (VanillaId) wild_h
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) sat8h
  (VanillaId) $c<=4Qh =
  (FUN)
  [(VanillaId) $dEq5Ai ,(VanillaId) $dOrd7Bi ,(VanillaId) $dOrd8Ci ,(VanillaId) $dOrd9Di ,(VanillaId) $dOrd10Ei ,(VanillaId) $dOrd11Fi]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd12Gi =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,) a8g b9g c-g d_g eAh] APPFL.Classes.$fOrd(,,,,) (VarArg) (VanillaId) $dEq5Ai (VarArg) (VanillaId) $dOrd7Bi (VarArg) (VanillaId) $dOrd8Ci (VarArg) (VanillaId) $dOrd9Di (VarArg) (VanillaId) $dOrd10Ei (VarArg) (VanillaId) $dOrd11Fi
    in (Let) let
         (StgNonRec)
           (VanillaId) satHi =
           (FUN)
           [(VanillaId) xIi ,(VanillaId) yJi]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12Gi (VarArg) (VanillaId) xIi (VarArg) (VanillaId) yJi = (VanillaId) wildKi
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satHi
  (VanillaId) $c<4Sh =
  (FUN)
  [(VanillaId) $dEq5Li ,(VanillaId) $dOrd7Mi ,(VanillaId) $dOrd8Ni ,(VanillaId) $dOrd9Oi ,(VanillaId) $dOrd10Pi ,(VanillaId) $dOrd11Qi]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd12Ri =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,) a8g b9g c-g d_g eAh] APPFL.Classes.$fOrd(,,,,) (VarArg) (VanillaId) $dEq5Li (VarArg) (VanillaId) $dOrd7Mi (VarArg) (VanillaId) $dOrd8Ni (VarArg) (VanillaId) $dOrd9Oi (VarArg) (VanillaId) $dOrd10Pi (VarArg) (VanillaId) $dOrd11Qi
    in (Let) let
         (StgNonRec)
           (VanillaId) satSi =
           (FUN)
           [(VanillaId) xTi ,(VanillaId) yUi]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12Ri (VarArg) (VanillaId) xTi (VarArg) (VanillaId) yUi = (VanillaId) wildVi
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satSi
(StgNonRec)
  (VanillaId) $ccompare5Wi =
  (FUN)
  [(VanillaId) $dEq5Xi ,(VanillaId) $dOrd7Yi ,(VanillaId) $dOrd8Zi ,(VanillaId) $dOrd9ai ,(VanillaId) $dOrd10bi ,(VanillaId) $dOrd11ci ,(VanillaId) $dOrd12di ,(VanillaId) dsei ,(VanillaId) ds1fi]
    (Case) (App) (VanillaId) dsei = (VanillaId) wildgi
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,) (VanillaId) a14hi (VanillaId) b1ii (VanillaId) c1ji (VanillaId) d1ki (VanillaId) e1li (VanillaId) f1mi
          -> (Case) (App) (VanillaId) ds1fi = (VanillaId) wild1ni
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,) (VanillaId) a15oi (VanillaId) b2pi (VanillaId) c2qi (VanillaId) d2ri (VanillaId) e2si (VanillaId) f2ti
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7Yi (VarArg) (VanillaId) a14hi (VarArg) (VanillaId) a15oi = (VanillaId) wild2ui
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2ui
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8Zi (VarArg) (VanillaId) b1ii (VarArg) (VanillaId) b2pi = (VanillaId) wild3vi
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3vi
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9ai (VarArg) (VanillaId) c1ji (VarArg) (VanillaId) c2qi = (VanillaId) wild4wi
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4wi
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10bi (VarArg) (VanillaId) d1ki (VarArg) (VanillaId) d2ri = (VanillaId) wild5xi
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5xi
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11ci (VarArg) (VanillaId) e1li (VarArg) (VanillaId) e2si = (VanillaId) wild6yi
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild6yi
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12di (VarArg) (VanillaId) f1mi (VarArg) (VanillaId) f2ti
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,) azi b0i c1i d2i e3i f4i] APPFL.Classes.$fOrd(,,,,,) =
  (FUN)
  [(VanillaId) $dEq55i ,(VanillaId) $dOrd76i ,(VanillaId) $dOrd87i ,(VanillaId) $dOrd98i ,(VanillaId) $dOrd109i ,(VanillaId) $dOrd11-i ,(VanillaId) $dOrd12_i]
    (Let) let
      (StgNonRec)
        (VanillaId) satAj =
        (THUNK)
          (App) (VanillaId) $cmin5Bj (VarArg) (VanillaId) $dEq55i (VarArg) (VanillaId) $dOrd76i (VarArg) (VanillaId) $dOrd87i (VarArg) (VanillaId) $dOrd98i (VarArg) (VanillaId) $dOrd109i (VarArg) (VanillaId) $dOrd11-i (VarArg) (VanillaId) $dOrd12_i
    in (Let) let
         (StgNonRec)
           (VanillaId) satCj =
           (THUNK)
             (App) (VanillaId) $cmax5Dj (VarArg) (VanillaId) $dEq55i (VarArg) (VanillaId) $dOrd76i (VarArg) (VanillaId) $dOrd87i (VarArg) (VanillaId) $dOrd98i (VarArg) (VanillaId) $dOrd109i (VarArg) (VanillaId) $dOrd11-i (VarArg) (VanillaId) $dOrd12_i
       in (Let) let
            (StgNonRec)
              (VanillaId) satEj =
              (THUNK)
                (App) (VanillaId) $c>=5Fj (VarArg) (VanillaId) $dEq55i (VarArg) (VanillaId) $dOrd76i (VarArg) (VanillaId) $dOrd87i (VarArg) (VanillaId) $dOrd98i (VarArg) (VanillaId) $dOrd109i (VarArg) (VanillaId) $dOrd11-i (VarArg) (VanillaId) $dOrd12_i
          in (Let) let
               (StgNonRec)
                 (VanillaId) satGj =
                 (THUNK)
                   (App) (VanillaId) $c>5Hj (VarArg) (VanillaId) $dEq55i (VarArg) (VanillaId) $dOrd76i (VarArg) (VanillaId) $dOrd87i (VarArg) (VanillaId) $dOrd98i (VarArg) (VanillaId) $dOrd109i (VarArg) (VanillaId) $dOrd11-i (VarArg) (VanillaId) $dOrd12_i
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satIj =
                    (THUNK)
                      (App) (VanillaId) $c<=5Jj (VarArg) (VanillaId) $dEq55i (VarArg) (VanillaId) $dOrd76i (VarArg) (VanillaId) $dOrd87i (VarArg) (VanillaId) $dOrd98i (VarArg) (VanillaId) $dOrd109i (VarArg) (VanillaId) $dOrd11-i (VarArg) (VanillaId) $dOrd12_i
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satKj =
                       (THUNK)
                         (App) (VanillaId) $c<5Lj (VarArg) (VanillaId) $dEq55i (VarArg) (VanillaId) $dOrd76i (VarArg) (VanillaId) $dOrd87i (VarArg) (VanillaId) $dOrd98i (VarArg) (VanillaId) $dOrd109i (VarArg) (VanillaId) $dOrd11-i (VarArg) (VanillaId) $dOrd12_i
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satMj =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare5Wi (VarArg) (VanillaId) $dEq55i (VarArg) (VanillaId) $dOrd76i (VarArg) (VanillaId) $dOrd87i (VarArg) (VanillaId) $dOrd98i (VarArg) (VanillaId) $dOrd109i (VarArg) (VanillaId) $dOrd11-i (VarArg) (VanillaId) $dOrd12_i (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq55i ,(VarArg) (VanillaId) satMj ,(VarArg) (VanillaId) satKj ,(VarArg) (VanillaId) satIj ,(VarArg) (VanillaId) satGj ,(VarArg) (VanillaId) satEj ,(VarArg) (VanillaId) satCj ,(VarArg) (VanillaId) satAj]
  (VanillaId) $cmin5Bj =
  (FUN)
  [(VanillaId) $dEq5Nj ,(VanillaId) $dOrd7Oj ,(VanillaId) $dOrd8Pj ,(VanillaId) $dOrd9Qj ,(VanillaId) $dOrd10Rj ,(VanillaId) $dOrd11Sj ,(VanillaId) $dOrd12Tj]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd13Uj =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,) azi b0i c1i d2i e3i f4i] APPFL.Classes.$fOrd(,,,,,) (VarArg) (VanillaId) $dEq5Nj (VarArg) (VanillaId) $dOrd7Oj (VarArg) (VanillaId) $dOrd8Pj (VarArg) (VanillaId) $dOrd9Qj (VarArg) (VanillaId) $dOrd10Rj (VarArg) (VanillaId) $dOrd11Sj (VarArg) (VanillaId) $dOrd12Tj
    in (Let) let
         (StgNonRec)
           (VanillaId) satVj =
           (FUN)
           [(VanillaId) xWj ,(VanillaId) yXj]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd13Uj (VarArg) (VanillaId) xWj (VarArg) (VanillaId) yXj = (VanillaId) wildYj
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) yXj
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xWj
       in (App) (VanillaId) satVj
  (VanillaId) $cmax5Dj =
  (FUN)
  [(VanillaId) $dEq5Zj ,(VanillaId) $dOrd7aj ,(VanillaId) $dOrd8bj ,(VanillaId) $dOrd9cj ,(VanillaId) $dOrd10dj ,(VanillaId) $dOrd11ej ,(VanillaId) $dOrd12fj]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd13gj =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,) azi b0i c1i d2i e3i f4i] APPFL.Classes.$fOrd(,,,,,) (VarArg) (VanillaId) $dEq5Zj (VarArg) (VanillaId) $dOrd7aj (VarArg) (VanillaId) $dOrd8bj (VarArg) (VanillaId) $dOrd9cj (VarArg) (VanillaId) $dOrd10dj (VarArg) (VanillaId) $dOrd11ej (VarArg) (VanillaId) $dOrd12fj
    in (Let) let
         (StgNonRec)
           (VanillaId) sathj =
           (FUN)
           [(VanillaId) xij ,(VanillaId) yjj]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd13gj (VarArg) (VanillaId) xij (VarArg) (VanillaId) yjj = (VanillaId) wildkj
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xij
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yjj
       in (App) (VanillaId) sathj
  (VanillaId) $c>=5Fj =
  (FUN)
  [(VanillaId) $dEq5lj ,(VanillaId) $dOrd7mj ,(VanillaId) $dOrd8nj ,(VanillaId) $dOrd9oj ,(VanillaId) $dOrd10pj ,(VanillaId) $dOrd11qj ,(VanillaId) $dOrd12rj]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd13sj =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,) azi b0i c1i d2i e3i f4i] APPFL.Classes.$fOrd(,,,,,) (VarArg) (VanillaId) $dEq5lj (VarArg) (VanillaId) $dOrd7mj (VarArg) (VanillaId) $dOrd8nj (VarArg) (VanillaId) $dOrd9oj (VarArg) (VanillaId) $dOrd10pj (VarArg) (VanillaId) $dOrd11qj (VarArg) (VanillaId) $dOrd12rj
    in (Let) let
         (StgNonRec)
           (VanillaId) sattj =
           (FUN)
           [(VanillaId) xuj ,(VanillaId) yvj]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13sj (VarArg) (VanillaId) xuj (VarArg) (VanillaId) yvj = (VanillaId) wildwj
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) sattj
  (VanillaId) $c>5Hj =
  (FUN)
  [(VanillaId) $dEq5xj ,(VanillaId) $dOrd7yj ,(VanillaId) $dOrd8zj ,(VanillaId) $dOrd90j ,(VanillaId) $dOrd101j ,(VanillaId) $dOrd112j ,(VanillaId) $dOrd123j]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd134j =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,) azi b0i c1i d2i e3i f4i] APPFL.Classes.$fOrd(,,,,,) (VarArg) (VanillaId) $dEq5xj (VarArg) (VanillaId) $dOrd7yj (VarArg) (VanillaId) $dOrd8zj (VarArg) (VanillaId) $dOrd90j (VarArg) (VanillaId) $dOrd101j (VarArg) (VanillaId) $dOrd112j (VarArg) (VanillaId) $dOrd123j
    in (Let) let
         (StgNonRec)
           (VanillaId) sat5j =
           (FUN)
           [(VanillaId) x6j ,(VanillaId) y7j]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd134j (VarArg) (VanillaId) x6j (VarArg) (VanillaId) y7j = (VanillaId) wild8j
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) sat5j
  (VanillaId) $c<=5Jj =
  (FUN)
  [(VanillaId) $dEq59j ,(VanillaId) $dOrd7-j ,(VanillaId) $dOrd8_j ,(VanillaId) $dOrd9Ak ,(VanillaId) $dOrd10Bk ,(VanillaId) $dOrd11Ck ,(VanillaId) $dOrd12Dk]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd13Ek =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,) azi b0i c1i d2i e3i f4i] APPFL.Classes.$fOrd(,,,,,) (VarArg) (VanillaId) $dEq59j (VarArg) (VanillaId) $dOrd7-j (VarArg) (VanillaId) $dOrd8_j (VarArg) (VanillaId) $dOrd9Ak (VarArg) (VanillaId) $dOrd10Bk (VarArg) (VanillaId) $dOrd11Ck (VarArg) (VanillaId) $dOrd12Dk
    in (Let) let
         (StgNonRec)
           (VanillaId) satFk =
           (FUN)
           [(VanillaId) xGk ,(VanillaId) yHk]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13Ek (VarArg) (VanillaId) xGk (VarArg) (VanillaId) yHk = (VanillaId) wildIk
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satFk
  (VanillaId) $c<5Lj =
  (FUN)
  [(VanillaId) $dEq5Jk ,(VanillaId) $dOrd7Kk ,(VanillaId) $dOrd8Lk ,(VanillaId) $dOrd9Mk ,(VanillaId) $dOrd10Nk ,(VanillaId) $dOrd11Ok ,(VanillaId) $dOrd12Pk]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd13Qk =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,) azi b0i c1i d2i e3i f4i] APPFL.Classes.$fOrd(,,,,,) (VarArg) (VanillaId) $dEq5Jk (VarArg) (VanillaId) $dOrd7Kk (VarArg) (VanillaId) $dOrd8Lk (VarArg) (VanillaId) $dOrd9Mk (VarArg) (VanillaId) $dOrd10Nk (VarArg) (VanillaId) $dOrd11Ok (VarArg) (VanillaId) $dOrd12Pk
    in (Let) let
         (StgNonRec)
           (VanillaId) satRk =
           (FUN)
           [(VanillaId) xSk ,(VanillaId) yTk]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13Qk (VarArg) (VanillaId) xSk (VarArg) (VanillaId) yTk = (VanillaId) wildUk
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satRk
(StgNonRec)
  (VanillaId) $ccompare6Vk =
  (FUN)
  [(VanillaId) $dEq5Wk ,(VanillaId) $dOrd7Xk ,(VanillaId) $dOrd8Yk ,(VanillaId) $dOrd9Zk ,(VanillaId) $dOrd10ak ,(VanillaId) $dOrd11bk ,(VanillaId) $dOrd12ck ,(VanillaId) $dOrd13dk ,(VanillaId) dsek ,(VanillaId) ds1fk]
    (Case) (App) (VanillaId) dsek = (VanillaId) wildgk
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,) (VanillaId) a14hk (VanillaId) b1ik (VanillaId) c1jk (VanillaId) d1kk (VanillaId) e1lk (VanillaId) f1mk (VanillaId) g1nk
          -> (Case) (App) (VanillaId) ds1fk = (VanillaId) wild1ok
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,) (VanillaId) a15pk (VanillaId) b2qk (VanillaId) c2rk (VanillaId) d2sk (VanillaId) e2tk (VanillaId) f2uk (VanillaId) g2vk
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7Xk (VarArg) (VanillaId) a14hk (VarArg) (VanillaId) a15pk = (VanillaId) wild2wk
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2wk
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8Yk (VarArg) (VanillaId) b1ik (VarArg) (VanillaId) b2qk = (VanillaId) wild3xk
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3xk
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9Zk (VarArg) (VanillaId) c1jk (VarArg) (VanillaId) c2rk = (VanillaId) wild4yk
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4yk
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10ak (VarArg) (VanillaId) d1kk (VarArg) (VanillaId) d2sk = (VanillaId) wild5zk
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5zk
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11bk (VarArg) (VanillaId) e1lk (VarArg) (VanillaId) e2tk = (VanillaId) wild60k
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild60k
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12ck (VarArg) (VanillaId) f1mk (VarArg) (VanillaId) f2uk = (VanillaId) wild71k
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild71k
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13dk (VarArg) (VanillaId) g1nk (VarArg) (VanillaId) g2vk
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,) a2k b3k c4k d5k e6k f7k g8k] APPFL.Classes.$fOrd(,,,,,,) =
  (FUN)
  [(VanillaId) $dEq59k ,(VanillaId) $dOrd7-k ,(VanillaId) $dOrd8_k ,(VanillaId) $dOrd9Al ,(VanillaId) $dOrd10Bl ,(VanillaId) $dOrd11Cl ,(VanillaId) $dOrd12Dl ,(VanillaId) $dOrd13El]
    (Let) let
      (StgNonRec)
        (VanillaId) satFl =
        (THUNK)
          (App) (VanillaId) $cmin6Gl (VarArg) (VanillaId) $dEq59k (VarArg) (VanillaId) $dOrd7-k (VarArg) (VanillaId) $dOrd8_k (VarArg) (VanillaId) $dOrd9Al (VarArg) (VanillaId) $dOrd10Bl (VarArg) (VanillaId) $dOrd11Cl (VarArg) (VanillaId) $dOrd12Dl (VarArg) (VanillaId) $dOrd13El
    in (Let) let
         (StgNonRec)
           (VanillaId) satHl =
           (THUNK)
             (App) (VanillaId) $cmax6Il (VarArg) (VanillaId) $dEq59k (VarArg) (VanillaId) $dOrd7-k (VarArg) (VanillaId) $dOrd8_k (VarArg) (VanillaId) $dOrd9Al (VarArg) (VanillaId) $dOrd10Bl (VarArg) (VanillaId) $dOrd11Cl (VarArg) (VanillaId) $dOrd12Dl (VarArg) (VanillaId) $dOrd13El
       in (Let) let
            (StgNonRec)
              (VanillaId) satJl =
              (THUNK)
                (App) (VanillaId) $c>=6Kl (VarArg) (VanillaId) $dEq59k (VarArg) (VanillaId) $dOrd7-k (VarArg) (VanillaId) $dOrd8_k (VarArg) (VanillaId) $dOrd9Al (VarArg) (VanillaId) $dOrd10Bl (VarArg) (VanillaId) $dOrd11Cl (VarArg) (VanillaId) $dOrd12Dl (VarArg) (VanillaId) $dOrd13El
          in (Let) let
               (StgNonRec)
                 (VanillaId) satLl =
                 (THUNK)
                   (App) (VanillaId) $c>6Ml (VarArg) (VanillaId) $dEq59k (VarArg) (VanillaId) $dOrd7-k (VarArg) (VanillaId) $dOrd8_k (VarArg) (VanillaId) $dOrd9Al (VarArg) (VanillaId) $dOrd10Bl (VarArg) (VanillaId) $dOrd11Cl (VarArg) (VanillaId) $dOrd12Dl (VarArg) (VanillaId) $dOrd13El
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satNl =
                    (THUNK)
                      (App) (VanillaId) $c<=6Ol (VarArg) (VanillaId) $dEq59k (VarArg) (VanillaId) $dOrd7-k (VarArg) (VanillaId) $dOrd8_k (VarArg) (VanillaId) $dOrd9Al (VarArg) (VanillaId) $dOrd10Bl (VarArg) (VanillaId) $dOrd11Cl (VarArg) (VanillaId) $dOrd12Dl (VarArg) (VanillaId) $dOrd13El
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satPl =
                       (THUNK)
                         (App) (VanillaId) $c<6Ql (VarArg) (VanillaId) $dEq59k (VarArg) (VanillaId) $dOrd7-k (VarArg) (VanillaId) $dOrd8_k (VarArg) (VanillaId) $dOrd9Al (VarArg) (VanillaId) $dOrd10Bl (VarArg) (VanillaId) $dOrd11Cl (VarArg) (VanillaId) $dOrd12Dl (VarArg) (VanillaId) $dOrd13El
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satRl =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare6Vk (VarArg) (VanillaId) $dEq59k (VarArg) (VanillaId) $dOrd7-k (VarArg) (VanillaId) $dOrd8_k (VarArg) (VanillaId) $dOrd9Al (VarArg) (VanillaId) $dOrd10Bl (VarArg) (VanillaId) $dOrd11Cl (VarArg) (VanillaId) $dOrd12Dl (VarArg) (VanillaId) $dOrd13El (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq59k ,(VarArg) (VanillaId) satRl ,(VarArg) (VanillaId) satPl ,(VarArg) (VanillaId) satNl ,(VarArg) (VanillaId) satLl ,(VarArg) (VanillaId) satJl ,(VarArg) (VanillaId) satHl ,(VarArg) (VanillaId) satFl]
  (VanillaId) $cmin6Gl =
  (FUN)
  [(VanillaId) $dEq5Sl ,(VanillaId) $dOrd7Tl ,(VanillaId) $dOrd8Ul ,(VanillaId) $dOrd9Vl ,(VanillaId) $dOrd10Wl ,(VanillaId) $dOrd11Xl ,(VanillaId) $dOrd12Yl ,(VanillaId) $dOrd13Zl]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd14al =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,) a2k b3k c4k d5k e6k f7k g8k] APPFL.Classes.$fOrd(,,,,,,) (VarArg) (VanillaId) $dEq5Sl (VarArg) (VanillaId) $dOrd7Tl (VarArg) (VanillaId) $dOrd8Ul (VarArg) (VanillaId) $dOrd9Vl (VarArg) (VanillaId) $dOrd10Wl (VarArg) (VanillaId) $dOrd11Xl (VarArg) (VanillaId) $dOrd12Yl (VarArg) (VanillaId) $dOrd13Zl
    in (Let) let
         (StgNonRec)
           (VanillaId) satbl =
           (FUN)
           [(VanillaId) xcl ,(VanillaId) ydl]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd14al (VarArg) (VanillaId) xcl (VarArg) (VanillaId) ydl = (VanillaId) wildel
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) ydl
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xcl
       in (App) (VanillaId) satbl
  (VanillaId) $cmax6Il =
  (FUN)
  [(VanillaId) $dEq5fl ,(VanillaId) $dOrd7gl ,(VanillaId) $dOrd8hl ,(VanillaId) $dOrd9il ,(VanillaId) $dOrd10jl ,(VanillaId) $dOrd11kl ,(VanillaId) $dOrd12ll ,(VanillaId) $dOrd13ml]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd14nl =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,) a2k b3k c4k d5k e6k f7k g8k] APPFL.Classes.$fOrd(,,,,,,) (VarArg) (VanillaId) $dEq5fl (VarArg) (VanillaId) $dOrd7gl (VarArg) (VanillaId) $dOrd8hl (VarArg) (VanillaId) $dOrd9il (VarArg) (VanillaId) $dOrd10jl (VarArg) (VanillaId) $dOrd11kl (VarArg) (VanillaId) $dOrd12ll (VarArg) (VanillaId) $dOrd13ml
    in (Let) let
         (StgNonRec)
           (VanillaId) satol =
           (FUN)
           [(VanillaId) xpl ,(VanillaId) yql]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd14nl (VarArg) (VanillaId) xpl (VarArg) (VanillaId) yql = (VanillaId) wildrl
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xpl
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yql
       in (App) (VanillaId) satol
  (VanillaId) $c>=6Kl =
  (FUN)
  [(VanillaId) $dEq5sl ,(VanillaId) $dOrd7tl ,(VanillaId) $dOrd8ul ,(VanillaId) $dOrd9vl ,(VanillaId) $dOrd10wl ,(VanillaId) $dOrd11xl ,(VanillaId) $dOrd12yl ,(VanillaId) $dOrd13zl]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd140l =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,) a2k b3k c4k d5k e6k f7k g8k] APPFL.Classes.$fOrd(,,,,,,) (VarArg) (VanillaId) $dEq5sl (VarArg) (VanillaId) $dOrd7tl (VarArg) (VanillaId) $dOrd8ul (VarArg) (VanillaId) $dOrd9vl (VarArg) (VanillaId) $dOrd10wl (VarArg) (VanillaId) $dOrd11xl (VarArg) (VanillaId) $dOrd12yl (VarArg) (VanillaId) $dOrd13zl
    in (Let) let
         (StgNonRec)
           (VanillaId) sat1l =
           (FUN)
           [(VanillaId) x2l ,(VanillaId) y3l]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd140l (VarArg) (VanillaId) x2l (VarArg) (VanillaId) y3l = (VanillaId) wild4l
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) sat1l
  (VanillaId) $c>6Ml =
  (FUN)
  [(VanillaId) $dEq55l ,(VanillaId) $dOrd76l ,(VanillaId) $dOrd87l ,(VanillaId) $dOrd98l ,(VanillaId) $dOrd109l ,(VanillaId) $dOrd11-l ,(VanillaId) $dOrd12_l ,(VanillaId) $dOrd13Am]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd14Bm =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,) a2k b3k c4k d5k e6k f7k g8k] APPFL.Classes.$fOrd(,,,,,,) (VarArg) (VanillaId) $dEq55l (VarArg) (VanillaId) $dOrd76l (VarArg) (VanillaId) $dOrd87l (VarArg) (VanillaId) $dOrd98l (VarArg) (VanillaId) $dOrd109l (VarArg) (VanillaId) $dOrd11-l (VarArg) (VanillaId) $dOrd12_l (VarArg) (VanillaId) $dOrd13Am
    in (Let) let
         (StgNonRec)
           (VanillaId) satCm =
           (FUN)
           [(VanillaId) xDm ,(VanillaId) yEm]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14Bm (VarArg) (VanillaId) xDm (VarArg) (VanillaId) yEm = (VanillaId) wildFm
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satCm
  (VanillaId) $c<=6Ol =
  (FUN)
  [(VanillaId) $dEq5Gm ,(VanillaId) $dOrd7Hm ,(VanillaId) $dOrd8Im ,(VanillaId) $dOrd9Jm ,(VanillaId) $dOrd10Km ,(VanillaId) $dOrd11Lm ,(VanillaId) $dOrd12Mm ,(VanillaId) $dOrd13Nm]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd14Om =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,) a2k b3k c4k d5k e6k f7k g8k] APPFL.Classes.$fOrd(,,,,,,) (VarArg) (VanillaId) $dEq5Gm (VarArg) (VanillaId) $dOrd7Hm (VarArg) (VanillaId) $dOrd8Im (VarArg) (VanillaId) $dOrd9Jm (VarArg) (VanillaId) $dOrd10Km (VarArg) (VanillaId) $dOrd11Lm (VarArg) (VanillaId) $dOrd12Mm (VarArg) (VanillaId) $dOrd13Nm
    in (Let) let
         (StgNonRec)
           (VanillaId) satPm =
           (FUN)
           [(VanillaId) xQm ,(VanillaId) yRm]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14Om (VarArg) (VanillaId) xQm (VarArg) (VanillaId) yRm = (VanillaId) wildSm
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satPm
  (VanillaId) $c<6Ql =
  (FUN)
  [(VanillaId) $dEq5Tm ,(VanillaId) $dOrd7Um ,(VanillaId) $dOrd8Vm ,(VanillaId) $dOrd9Wm ,(VanillaId) $dOrd10Xm ,(VanillaId) $dOrd11Ym ,(VanillaId) $dOrd12Zm ,(VanillaId) $dOrd13am]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd14bm =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,) a2k b3k c4k d5k e6k f7k g8k] APPFL.Classes.$fOrd(,,,,,,) (VarArg) (VanillaId) $dEq5Tm (VarArg) (VanillaId) $dOrd7Um (VarArg) (VanillaId) $dOrd8Vm (VarArg) (VanillaId) $dOrd9Wm (VarArg) (VanillaId) $dOrd10Xm (VarArg) (VanillaId) $dOrd11Ym (VarArg) (VanillaId) $dOrd12Zm (VarArg) (VanillaId) $dOrd13am
    in (Let) let
         (StgNonRec)
           (VanillaId) satcm =
           (FUN)
           [(VanillaId) xdm ,(VanillaId) yem]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14bm (VarArg) (VanillaId) xdm (VarArg) (VanillaId) yem = (VanillaId) wildfm
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satcm
(StgNonRec)
  (VanillaId) $ccompare7gm =
  (FUN)
  [(VanillaId) $dEq5hm ,(VanillaId) $dOrd7im ,(VanillaId) $dOrd8jm ,(VanillaId) $dOrd9km ,(VanillaId) $dOrd10lm ,(VanillaId) $dOrd11mm ,(VanillaId) $dOrd12nm ,(VanillaId) $dOrd13om ,(VanillaId) $dOrd14pm ,(VanillaId) dsqm ,(VanillaId) ds1rm]
    (Case) (App) (VanillaId) dsqm = (VanillaId) wildsm
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,) (VanillaId) a14tm (VanillaId) b1um (VanillaId) c1vm (VanillaId) d1wm (VanillaId) e1xm (VanillaId) f1ym (VanillaId) g1zm (VanillaId) h10m
          -> (Case) (App) (VanillaId) ds1rm = (VanillaId) wild11m
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,) (VanillaId) a152m (VanillaId) b23m (VanillaId) c24m (VanillaId) d25m (VanillaId) e26m (VanillaId) f27m (VanillaId) g28m (VanillaId) h29m
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7im (VarArg) (VanillaId) a14tm (VarArg) (VanillaId) a152m = (VanillaId) wild2-m
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2-m
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8jm (VarArg) (VanillaId) b1um (VarArg) (VanillaId) b23m = (VanillaId) wild3_m
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3_m
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9km (VarArg) (VanillaId) c1vm (VarArg) (VanillaId) c24m = (VanillaId) wild4An
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4An
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10lm (VarArg) (VanillaId) d1wm (VarArg) (VanillaId) d25m = (VanillaId) wild5Bn
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5Bn
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11mm (VarArg) (VanillaId) e1xm (VarArg) (VanillaId) e26m = (VanillaId) wild6Cn
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild6Cn
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12nm (VarArg) (VanillaId) f1ym (VarArg) (VanillaId) f27m = (VanillaId) wild7Dn
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild7Dn
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13om (VarArg) (VanillaId) g1zm (VarArg) (VanillaId) g28m = (VanillaId) wild8En
                                                                              (AlgAlt)
                                                                                (DEFAULT) _
                                                                                  -> (App) (VanillaId) wild8En
                                                                                (DataAlt) GHC.Types.EQ
                                                                                  -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14pm (VarArg) (VanillaId) h10m (VarArg) (VanillaId) h29m
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,) aFn bGn cHn dIn eJn fKn gLn hMn] APPFL.Classes.$fOrd(,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5Nn ,(VanillaId) $dOrd7On ,(VanillaId) $dOrd8Pn ,(VanillaId) $dOrd9Qn ,(VanillaId) $dOrd10Rn ,(VanillaId) $dOrd11Sn ,(VanillaId) $dOrd12Tn ,(VanillaId) $dOrd13Un ,(VanillaId) $dOrd14Vn]
    (Let) let
      (StgNonRec)
        (VanillaId) satWn =
        (THUNK)
          (App) (VanillaId) $cmin7Xn (VarArg) (VanillaId) $dEq5Nn (VarArg) (VanillaId) $dOrd7On (VarArg) (VanillaId) $dOrd8Pn (VarArg) (VanillaId) $dOrd9Qn (VarArg) (VanillaId) $dOrd10Rn (VarArg) (VanillaId) $dOrd11Sn (VarArg) (VanillaId) $dOrd12Tn (VarArg) (VanillaId) $dOrd13Un (VarArg) (VanillaId) $dOrd14Vn
    in (Let) let
         (StgNonRec)
           (VanillaId) satYn =
           (THUNK)
             (App) (VanillaId) $cmax7Zn (VarArg) (VanillaId) $dEq5Nn (VarArg) (VanillaId) $dOrd7On (VarArg) (VanillaId) $dOrd8Pn (VarArg) (VanillaId) $dOrd9Qn (VarArg) (VanillaId) $dOrd10Rn (VarArg) (VanillaId) $dOrd11Sn (VarArg) (VanillaId) $dOrd12Tn (VarArg) (VanillaId) $dOrd13Un (VarArg) (VanillaId) $dOrd14Vn
       in (Let) let
            (StgNonRec)
              (VanillaId) satan =
              (THUNK)
                (App) (VanillaId) $c>=7bn (VarArg) (VanillaId) $dEq5Nn (VarArg) (VanillaId) $dOrd7On (VarArg) (VanillaId) $dOrd8Pn (VarArg) (VanillaId) $dOrd9Qn (VarArg) (VanillaId) $dOrd10Rn (VarArg) (VanillaId) $dOrd11Sn (VarArg) (VanillaId) $dOrd12Tn (VarArg) (VanillaId) $dOrd13Un (VarArg) (VanillaId) $dOrd14Vn
          in (Let) let
               (StgNonRec)
                 (VanillaId) satcn =
                 (THUNK)
                   (App) (VanillaId) $c>7dn (VarArg) (VanillaId) $dEq5Nn (VarArg) (VanillaId) $dOrd7On (VarArg) (VanillaId) $dOrd8Pn (VarArg) (VanillaId) $dOrd9Qn (VarArg) (VanillaId) $dOrd10Rn (VarArg) (VanillaId) $dOrd11Sn (VarArg) (VanillaId) $dOrd12Tn (VarArg) (VanillaId) $dOrd13Un (VarArg) (VanillaId) $dOrd14Vn
             in (Let) let
                  (StgNonRec)
                    (VanillaId) saten =
                    (THUNK)
                      (App) (VanillaId) $c<=7fn (VarArg) (VanillaId) $dEq5Nn (VarArg) (VanillaId) $dOrd7On (VarArg) (VanillaId) $dOrd8Pn (VarArg) (VanillaId) $dOrd9Qn (VarArg) (VanillaId) $dOrd10Rn (VarArg) (VanillaId) $dOrd11Sn (VarArg) (VanillaId) $dOrd12Tn (VarArg) (VanillaId) $dOrd13Un (VarArg) (VanillaId) $dOrd14Vn
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satgn =
                       (THUNK)
                         (App) (VanillaId) $c<7hn (VarArg) (VanillaId) $dEq5Nn (VarArg) (VanillaId) $dOrd7On (VarArg) (VanillaId) $dOrd8Pn (VarArg) (VanillaId) $dOrd9Qn (VarArg) (VanillaId) $dOrd10Rn (VarArg) (VanillaId) $dOrd11Sn (VarArg) (VanillaId) $dOrd12Tn (VarArg) (VanillaId) $dOrd13Un (VarArg) (VanillaId) $dOrd14Vn
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satin =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare7gm (VarArg) (VanillaId) $dEq5Nn (VarArg) (VanillaId) $dOrd7On (VarArg) (VanillaId) $dOrd8Pn (VarArg) (VanillaId) $dOrd9Qn (VarArg) (VanillaId) $dOrd10Rn (VarArg) (VanillaId) $dOrd11Sn (VarArg) (VanillaId) $dOrd12Tn (VarArg) (VanillaId) $dOrd13Un (VarArg) (VanillaId) $dOrd14Vn (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5Nn ,(VarArg) (VanillaId) satin ,(VarArg) (VanillaId) satgn ,(VarArg) (VanillaId) saten ,(VarArg) (VanillaId) satcn ,(VarArg) (VanillaId) satan ,(VarArg) (VanillaId) satYn ,(VarArg) (VanillaId) satWn]
  (VanillaId) $cmin7Xn =
  (FUN)
  [(VanillaId) $dEq5jn ,(VanillaId) $dOrd7kn ,(VanillaId) $dOrd8ln ,(VanillaId) $dOrd9mn ,(VanillaId) $dOrd10nn ,(VanillaId) $dOrd11on ,(VanillaId) $dOrd12pn ,(VanillaId) $dOrd13qn ,(VanillaId) $dOrd14rn]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd15sn =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,) aFn bGn cHn dIn eJn fKn gLn hMn] APPFL.Classes.$fOrd(,,,,,,,) (VarArg) (VanillaId) $dEq5jn (VarArg) (VanillaId) $dOrd7kn (VarArg) (VanillaId) $dOrd8ln (VarArg) (VanillaId) $dOrd9mn (VarArg) (VanillaId) $dOrd10nn (VarArg) (VanillaId) $dOrd11on (VarArg) (VanillaId) $dOrd12pn (VarArg) (VanillaId) $dOrd13qn (VarArg) (VanillaId) $dOrd14rn
    in (Let) let
         (StgNonRec)
           (VanillaId) sattn =
           (FUN)
           [(VanillaId) xun ,(VanillaId) yvn]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd15sn (VarArg) (VanillaId) xun (VarArg) (VanillaId) yvn = (VanillaId) wildwn
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) yvn
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xun
       in (App) (VanillaId) sattn
  (VanillaId) $cmax7Zn =
  (FUN)
  [(VanillaId) $dEq5xn ,(VanillaId) $dOrd7yn ,(VanillaId) $dOrd8zn ,(VanillaId) $dOrd90n ,(VanillaId) $dOrd101n ,(VanillaId) $dOrd112n ,(VanillaId) $dOrd123n ,(VanillaId) $dOrd134n ,(VanillaId) $dOrd145n]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd156n =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,) aFn bGn cHn dIn eJn fKn gLn hMn] APPFL.Classes.$fOrd(,,,,,,,) (VarArg) (VanillaId) $dEq5xn (VarArg) (VanillaId) $dOrd7yn (VarArg) (VanillaId) $dOrd8zn (VarArg) (VanillaId) $dOrd90n (VarArg) (VanillaId) $dOrd101n (VarArg) (VanillaId) $dOrd112n (VarArg) (VanillaId) $dOrd123n (VarArg) (VanillaId) $dOrd134n (VarArg) (VanillaId) $dOrd145n
    in (Let) let
         (StgNonRec)
           (VanillaId) sat7n =
           (FUN)
           [(VanillaId) x8n ,(VanillaId) y9n]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd156n (VarArg) (VanillaId) x8n (VarArg) (VanillaId) y9n = (VanillaId) wild-n
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) x8n
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) y9n
       in (App) (VanillaId) sat7n
  (VanillaId) $c>=7bn =
  (FUN)
  [(VanillaId) $dEq5_n ,(VanillaId) $dOrd7Ao ,(VanillaId) $dOrd8Bo ,(VanillaId) $dOrd9Co ,(VanillaId) $dOrd10Do ,(VanillaId) $dOrd11Eo ,(VanillaId) $dOrd12Fo ,(VanillaId) $dOrd13Go ,(VanillaId) $dOrd14Ho]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd15Io =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,) aFn bGn cHn dIn eJn fKn gLn hMn] APPFL.Classes.$fOrd(,,,,,,,) (VarArg) (VanillaId) $dEq5_n (VarArg) (VanillaId) $dOrd7Ao (VarArg) (VanillaId) $dOrd8Bo (VarArg) (VanillaId) $dOrd9Co (VarArg) (VanillaId) $dOrd10Do (VarArg) (VanillaId) $dOrd11Eo (VarArg) (VanillaId) $dOrd12Fo (VarArg) (VanillaId) $dOrd13Go (VarArg) (VanillaId) $dOrd14Ho
    in (Let) let
         (StgNonRec)
           (VanillaId) satJo =
           (FUN)
           [(VanillaId) xKo ,(VanillaId) yLo]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15Io (VarArg) (VanillaId) xKo (VarArg) (VanillaId) yLo = (VanillaId) wildMo
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satJo
  (VanillaId) $c>7dn =
  (FUN)
  [(VanillaId) $dEq5No ,(VanillaId) $dOrd7Oo ,(VanillaId) $dOrd8Po ,(VanillaId) $dOrd9Qo ,(VanillaId) $dOrd10Ro ,(VanillaId) $dOrd11So ,(VanillaId) $dOrd12To ,(VanillaId) $dOrd13Uo ,(VanillaId) $dOrd14Vo]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd15Wo =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,) aFn bGn cHn dIn eJn fKn gLn hMn] APPFL.Classes.$fOrd(,,,,,,,) (VarArg) (VanillaId) $dEq5No (VarArg) (VanillaId) $dOrd7Oo (VarArg) (VanillaId) $dOrd8Po (VarArg) (VanillaId) $dOrd9Qo (VarArg) (VanillaId) $dOrd10Ro (VarArg) (VanillaId) $dOrd11So (VarArg) (VanillaId) $dOrd12To (VarArg) (VanillaId) $dOrd13Uo (VarArg) (VanillaId) $dOrd14Vo
    in (Let) let
         (StgNonRec)
           (VanillaId) satXo =
           (FUN)
           [(VanillaId) xYo ,(VanillaId) yZo]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15Wo (VarArg) (VanillaId) xYo (VarArg) (VanillaId) yZo = (VanillaId) wildao
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satXo
  (VanillaId) $c<=7fn =
  (FUN)
  [(VanillaId) $dEq5bo ,(VanillaId) $dOrd7co ,(VanillaId) $dOrd8do ,(VanillaId) $dOrd9eo ,(VanillaId) $dOrd10fo ,(VanillaId) $dOrd11go ,(VanillaId) $dOrd12ho ,(VanillaId) $dOrd13io ,(VanillaId) $dOrd14jo]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd15ko =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,) aFn bGn cHn dIn eJn fKn gLn hMn] APPFL.Classes.$fOrd(,,,,,,,) (VarArg) (VanillaId) $dEq5bo (VarArg) (VanillaId) $dOrd7co (VarArg) (VanillaId) $dOrd8do (VarArg) (VanillaId) $dOrd9eo (VarArg) (VanillaId) $dOrd10fo (VarArg) (VanillaId) $dOrd11go (VarArg) (VanillaId) $dOrd12ho (VarArg) (VanillaId) $dOrd13io (VarArg) (VanillaId) $dOrd14jo
    in (Let) let
         (StgNonRec)
           (VanillaId) satlo =
           (FUN)
           [(VanillaId) xmo ,(VanillaId) yno]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15ko (VarArg) (VanillaId) xmo (VarArg) (VanillaId) yno = (VanillaId) wildoo
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satlo
  (VanillaId) $c<7hn =
  (FUN)
  [(VanillaId) $dEq5po ,(VanillaId) $dOrd7qo ,(VanillaId) $dOrd8ro ,(VanillaId) $dOrd9so ,(VanillaId) $dOrd10to ,(VanillaId) $dOrd11uo ,(VanillaId) $dOrd12vo ,(VanillaId) $dOrd13wo ,(VanillaId) $dOrd14xo]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd15yo =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,) aFn bGn cHn dIn eJn fKn gLn hMn] APPFL.Classes.$fOrd(,,,,,,,) (VarArg) (VanillaId) $dEq5po (VarArg) (VanillaId) $dOrd7qo (VarArg) (VanillaId) $dOrd8ro (VarArg) (VanillaId) $dOrd9so (VarArg) (VanillaId) $dOrd10to (VarArg) (VanillaId) $dOrd11uo (VarArg) (VanillaId) $dOrd12vo (VarArg) (VanillaId) $dOrd13wo (VarArg) (VanillaId) $dOrd14xo
    in (Let) let
         (StgNonRec)
           (VanillaId) satzo =
           (FUN)
           [(VanillaId) x0o ,(VanillaId) y1o]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15yo (VarArg) (VanillaId) x0o (VarArg) (VanillaId) y1o = (VanillaId) wild2o
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satzo
(StgNonRec)
  (VanillaId) $ccompare83o =
  (FUN)
  [(VanillaId) $dEq54o ,(VanillaId) $dOrd75o ,(VanillaId) $dOrd86o ,(VanillaId) $dOrd97o ,(VanillaId) $dOrd108o ,(VanillaId) $dOrd119o ,(VanillaId) $dOrd12-o ,(VanillaId) $dOrd13_o ,(VanillaId) $dOrd14Ap ,(VanillaId) $dOrd15Bp ,(VanillaId) dsCp ,(VanillaId) ds1Dp]
    (Case) (App) (VanillaId) dsCp = (VanillaId) wildEp
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,) (VanillaId) a14Fp (VanillaId) b1Gp (VanillaId) c1Hp (VanillaId) d1Ip (VanillaId) e1Jp (VanillaId) f1Kp (VanillaId) g1Lp (VanillaId) h1Mp (VanillaId) i1Np
          -> (Case) (App) (VanillaId) ds1Dp = (VanillaId) wild1Op
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,) (VanillaId) a15Pp (VanillaId) b2Qp (VanillaId) c2Rp (VanillaId) d2Sp (VanillaId) e2Tp (VanillaId) f2Up (VanillaId) g2Vp (VanillaId) h2Wp (VanillaId) i2Xp
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd75o (VarArg) (VanillaId) a14Fp (VarArg) (VanillaId) a15Pp = (VanillaId) wild2Yp
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2Yp
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd86o (VarArg) (VanillaId) b1Gp (VarArg) (VanillaId) b2Qp = (VanillaId) wild3Zp
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3Zp
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd97o (VarArg) (VanillaId) c1Hp (VarArg) (VanillaId) c2Rp = (VanillaId) wild4ap
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4ap
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd108o (VarArg) (VanillaId) d1Ip (VarArg) (VanillaId) d2Sp = (VanillaId) wild5bp
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5bp
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd119o (VarArg) (VanillaId) e1Jp (VarArg) (VanillaId) e2Tp = (VanillaId) wild6cp
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild6cp
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12-o (VarArg) (VanillaId) f1Kp (VarArg) (VanillaId) f2Up = (VanillaId) wild7dp
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild7dp
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13_o (VarArg) (VanillaId) g1Lp (VarArg) (VanillaId) g2Vp = (VanillaId) wild8ep
                                                                              (AlgAlt)
                                                                                (DEFAULT) _
                                                                                  -> (App) (VanillaId) wild8ep
                                                                                (DataAlt) GHC.Types.EQ
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14Ap (VarArg) (VanillaId) h1Mp (VarArg) (VanillaId) h2Wp = (VanillaId) wild9fp
                                                                                       (AlgAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) wild9fp
                                                                                         (DataAlt) GHC.Types.EQ
                                                                                           -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15Bp (VarArg) (VanillaId) i1Np (VarArg) (VanillaId) i2Xp
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,) agp bhp cip djp ekp flp gmp hnp iop] APPFL.Classes.$fOrd(,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5pp ,(VanillaId) $dOrd7qp ,(VanillaId) $dOrd8rp ,(VanillaId) $dOrd9sp ,(VanillaId) $dOrd10tp ,(VanillaId) $dOrd11up ,(VanillaId) $dOrd12vp ,(VanillaId) $dOrd13wp ,(VanillaId) $dOrd14xp ,(VanillaId) $dOrd15yp]
    (Let) let
      (StgNonRec)
        (VanillaId) satzp =
        (THUNK)
          (App) (VanillaId) $cmin80p (VarArg) (VanillaId) $dEq5pp (VarArg) (VanillaId) $dOrd7qp (VarArg) (VanillaId) $dOrd8rp (VarArg) (VanillaId) $dOrd9sp (VarArg) (VanillaId) $dOrd10tp (VarArg) (VanillaId) $dOrd11up (VarArg) (VanillaId) $dOrd12vp (VarArg) (VanillaId) $dOrd13wp (VarArg) (VanillaId) $dOrd14xp (VarArg) (VanillaId) $dOrd15yp
    in (Let) let
         (StgNonRec)
           (VanillaId) sat1p =
           (THUNK)
             (App) (VanillaId) $cmax82p (VarArg) (VanillaId) $dEq5pp (VarArg) (VanillaId) $dOrd7qp (VarArg) (VanillaId) $dOrd8rp (VarArg) (VanillaId) $dOrd9sp (VarArg) (VanillaId) $dOrd10tp (VarArg) (VanillaId) $dOrd11up (VarArg) (VanillaId) $dOrd12vp (VarArg) (VanillaId) $dOrd13wp (VarArg) (VanillaId) $dOrd14xp (VarArg) (VanillaId) $dOrd15yp
       in (Let) let
            (StgNonRec)
              (VanillaId) sat3p =
              (THUNK)
                (App) (VanillaId) $c>=84p (VarArg) (VanillaId) $dEq5pp (VarArg) (VanillaId) $dOrd7qp (VarArg) (VanillaId) $dOrd8rp (VarArg) (VanillaId) $dOrd9sp (VarArg) (VanillaId) $dOrd10tp (VarArg) (VanillaId) $dOrd11up (VarArg) (VanillaId) $dOrd12vp (VarArg) (VanillaId) $dOrd13wp (VarArg) (VanillaId) $dOrd14xp (VarArg) (VanillaId) $dOrd15yp
          in (Let) let
               (StgNonRec)
                 (VanillaId) sat5p =
                 (THUNK)
                   (App) (VanillaId) $c>86p (VarArg) (VanillaId) $dEq5pp (VarArg) (VanillaId) $dOrd7qp (VarArg) (VanillaId) $dOrd8rp (VarArg) (VanillaId) $dOrd9sp (VarArg) (VanillaId) $dOrd10tp (VarArg) (VanillaId) $dOrd11up (VarArg) (VanillaId) $dOrd12vp (VarArg) (VanillaId) $dOrd13wp (VarArg) (VanillaId) $dOrd14xp (VarArg) (VanillaId) $dOrd15yp
             in (Let) let
                  (StgNonRec)
                    (VanillaId) sat7p =
                    (THUNK)
                      (App) (VanillaId) $c<=88p (VarArg) (VanillaId) $dEq5pp (VarArg) (VanillaId) $dOrd7qp (VarArg) (VanillaId) $dOrd8rp (VarArg) (VanillaId) $dOrd9sp (VarArg) (VanillaId) $dOrd10tp (VarArg) (VanillaId) $dOrd11up (VarArg) (VanillaId) $dOrd12vp (VarArg) (VanillaId) $dOrd13wp (VarArg) (VanillaId) $dOrd14xp (VarArg) (VanillaId) $dOrd15yp
                in (Let) let
                     (StgNonRec)
                       (VanillaId) sat9p =
                       (THUNK)
                         (App) (VanillaId) $c<8-p (VarArg) (VanillaId) $dEq5pp (VarArg) (VanillaId) $dOrd7qp (VarArg) (VanillaId) $dOrd8rp (VarArg) (VanillaId) $dOrd9sp (VarArg) (VanillaId) $dOrd10tp (VarArg) (VanillaId) $dOrd11up (VarArg) (VanillaId) $dOrd12vp (VarArg) (VanillaId) $dOrd13wp (VarArg) (VanillaId) $dOrd14xp (VarArg) (VanillaId) $dOrd15yp
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) sat_p =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare83o (VarArg) (VanillaId) $dEq5pp (VarArg) (VanillaId) $dOrd7qp (VarArg) (VanillaId) $dOrd8rp (VarArg) (VanillaId) $dOrd9sp (VarArg) (VanillaId) $dOrd10tp (VarArg) (VanillaId) $dOrd11up (VarArg) (VanillaId) $dOrd12vp (VarArg) (VanillaId) $dOrd13wp (VarArg) (VanillaId) $dOrd14xp (VarArg) (VanillaId) $dOrd15yp (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5pp ,(VarArg) (VanillaId) sat_p ,(VarArg) (VanillaId) sat9p ,(VarArg) (VanillaId) sat7p ,(VarArg) (VanillaId) sat5p ,(VarArg) (VanillaId) sat3p ,(VarArg) (VanillaId) sat1p ,(VarArg) (VanillaId) satzp]
  (VanillaId) $cmin80p =
  (FUN)
  [(VanillaId) $dEq5Aq ,(VanillaId) $dOrd7Bq ,(VanillaId) $dOrd8Cq ,(VanillaId) $dOrd9Dq ,(VanillaId) $dOrd10Eq ,(VanillaId) $dOrd11Fq ,(VanillaId) $dOrd12Gq ,(VanillaId) $dOrd13Hq ,(VanillaId) $dOrd14Iq ,(VanillaId) $dOrd15Jq]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd16Kq =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,) agp bhp cip djp ekp flp gmp hnp iop] APPFL.Classes.$fOrd(,,,,,,,,) (VarArg) (VanillaId) $dEq5Aq (VarArg) (VanillaId) $dOrd7Bq (VarArg) (VanillaId) $dOrd8Cq (VarArg) (VanillaId) $dOrd9Dq (VarArg) (VanillaId) $dOrd10Eq (VarArg) (VanillaId) $dOrd11Fq (VarArg) (VanillaId) $dOrd12Gq (VarArg) (VanillaId) $dOrd13Hq (VarArg) (VanillaId) $dOrd14Iq (VarArg) (VanillaId) $dOrd15Jq
    in (Let) let
         (StgNonRec)
           (VanillaId) satLq =
           (FUN)
           [(VanillaId) xMq ,(VanillaId) yNq]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd16Kq (VarArg) (VanillaId) xMq (VarArg) (VanillaId) yNq = (VanillaId) wildOq
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) yNq
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xMq
       in (App) (VanillaId) satLq
  (VanillaId) $cmax82p =
  (FUN)
  [(VanillaId) $dEq5Pq ,(VanillaId) $dOrd7Qq ,(VanillaId) $dOrd8Rq ,(VanillaId) $dOrd9Sq ,(VanillaId) $dOrd10Tq ,(VanillaId) $dOrd11Uq ,(VanillaId) $dOrd12Vq ,(VanillaId) $dOrd13Wq ,(VanillaId) $dOrd14Xq ,(VanillaId) $dOrd15Yq]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd16Zq =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,) agp bhp cip djp ekp flp gmp hnp iop] APPFL.Classes.$fOrd(,,,,,,,,) (VarArg) (VanillaId) $dEq5Pq (VarArg) (VanillaId) $dOrd7Qq (VarArg) (VanillaId) $dOrd8Rq (VarArg) (VanillaId) $dOrd9Sq (VarArg) (VanillaId) $dOrd10Tq (VarArg) (VanillaId) $dOrd11Uq (VarArg) (VanillaId) $dOrd12Vq (VarArg) (VanillaId) $dOrd13Wq (VarArg) (VanillaId) $dOrd14Xq (VarArg) (VanillaId) $dOrd15Yq
    in (Let) let
         (StgNonRec)
           (VanillaId) sataq =
           (FUN)
           [(VanillaId) xbq ,(VanillaId) ycq]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd16Zq (VarArg) (VanillaId) xbq (VarArg) (VanillaId) ycq = (VanillaId) wilddq
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xbq
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) ycq
       in (App) (VanillaId) sataq
  (VanillaId) $c>=84p =
  (FUN)
  [(VanillaId) $dEq5eq ,(VanillaId) $dOrd7fq ,(VanillaId) $dOrd8gq ,(VanillaId) $dOrd9hq ,(VanillaId) $dOrd10iq ,(VanillaId) $dOrd11jq ,(VanillaId) $dOrd12kq ,(VanillaId) $dOrd13lq ,(VanillaId) $dOrd14mq ,(VanillaId) $dOrd15nq]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd16oq =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,) agp bhp cip djp ekp flp gmp hnp iop] APPFL.Classes.$fOrd(,,,,,,,,) (VarArg) (VanillaId) $dEq5eq (VarArg) (VanillaId) $dOrd7fq (VarArg) (VanillaId) $dOrd8gq (VarArg) (VanillaId) $dOrd9hq (VarArg) (VanillaId) $dOrd10iq (VarArg) (VanillaId) $dOrd11jq (VarArg) (VanillaId) $dOrd12kq (VarArg) (VanillaId) $dOrd13lq (VarArg) (VanillaId) $dOrd14mq (VarArg) (VanillaId) $dOrd15nq
    in (Let) let
         (StgNonRec)
           (VanillaId) satpq =
           (FUN)
           [(VanillaId) xqq ,(VanillaId) yrq]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16oq (VarArg) (VanillaId) xqq (VarArg) (VanillaId) yrq = (VanillaId) wildsq
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satpq
  (VanillaId) $c>86p =
  (FUN)
  [(VanillaId) $dEq5tq ,(VanillaId) $dOrd7uq ,(VanillaId) $dOrd8vq ,(VanillaId) $dOrd9wq ,(VanillaId) $dOrd10xq ,(VanillaId) $dOrd11yq ,(VanillaId) $dOrd12zq ,(VanillaId) $dOrd130q ,(VanillaId) $dOrd141q ,(VanillaId) $dOrd152q]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd163q =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,) agp bhp cip djp ekp flp gmp hnp iop] APPFL.Classes.$fOrd(,,,,,,,,) (VarArg) (VanillaId) $dEq5tq (VarArg) (VanillaId) $dOrd7uq (VarArg) (VanillaId) $dOrd8vq (VarArg) (VanillaId) $dOrd9wq (VarArg) (VanillaId) $dOrd10xq (VarArg) (VanillaId) $dOrd11yq (VarArg) (VanillaId) $dOrd12zq (VarArg) (VanillaId) $dOrd130q (VarArg) (VanillaId) $dOrd141q (VarArg) (VanillaId) $dOrd152q
    in (Let) let
         (StgNonRec)
           (VanillaId) sat4q =
           (FUN)
           [(VanillaId) x5q ,(VanillaId) y6q]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd163q (VarArg) (VanillaId) x5q (VarArg) (VanillaId) y6q = (VanillaId) wild7q
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) sat4q
  (VanillaId) $c<=88p =
  (FUN)
  [(VanillaId) $dEq58q ,(VanillaId) $dOrd79q ,(VanillaId) $dOrd8-q ,(VanillaId) $dOrd9_q ,(VanillaId) $dOrd10Ar ,(VanillaId) $dOrd11Br ,(VanillaId) $dOrd12Cr ,(VanillaId) $dOrd13Dr ,(VanillaId) $dOrd14Er ,(VanillaId) $dOrd15Fr]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd16Gr =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,) agp bhp cip djp ekp flp gmp hnp iop] APPFL.Classes.$fOrd(,,,,,,,,) (VarArg) (VanillaId) $dEq58q (VarArg) (VanillaId) $dOrd79q (VarArg) (VanillaId) $dOrd8-q (VarArg) (VanillaId) $dOrd9_q (VarArg) (VanillaId) $dOrd10Ar (VarArg) (VanillaId) $dOrd11Br (VarArg) (VanillaId) $dOrd12Cr (VarArg) (VanillaId) $dOrd13Dr (VarArg) (VanillaId) $dOrd14Er (VarArg) (VanillaId) $dOrd15Fr
    in (Let) let
         (StgNonRec)
           (VanillaId) satHr =
           (FUN)
           [(VanillaId) xIr ,(VanillaId) yJr]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16Gr (VarArg) (VanillaId) xIr (VarArg) (VanillaId) yJr = (VanillaId) wildKr
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satHr
  (VanillaId) $c<8-p =
  (FUN)
  [(VanillaId) $dEq5Lr ,(VanillaId) $dOrd7Mr ,(VanillaId) $dOrd8Nr ,(VanillaId) $dOrd9Or ,(VanillaId) $dOrd10Pr ,(VanillaId) $dOrd11Qr ,(VanillaId) $dOrd12Rr ,(VanillaId) $dOrd13Sr ,(VanillaId) $dOrd14Tr ,(VanillaId) $dOrd15Ur]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd16Vr =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,) agp bhp cip djp ekp flp gmp hnp iop] APPFL.Classes.$fOrd(,,,,,,,,) (VarArg) (VanillaId) $dEq5Lr (VarArg) (VanillaId) $dOrd7Mr (VarArg) (VanillaId) $dOrd8Nr (VarArg) (VanillaId) $dOrd9Or (VarArg) (VanillaId) $dOrd10Pr (VarArg) (VanillaId) $dOrd11Qr (VarArg) (VanillaId) $dOrd12Rr (VarArg) (VanillaId) $dOrd13Sr (VarArg) (VanillaId) $dOrd14Tr (VarArg) (VanillaId) $dOrd15Ur
    in (Let) let
         (StgNonRec)
           (VanillaId) satWr =
           (FUN)
           [(VanillaId) xXr ,(VanillaId) yYr]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16Vr (VarArg) (VanillaId) xXr (VarArg) (VanillaId) yYr = (VanillaId) wildZr
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satWr
(StgNonRec)
  (VanillaId) $ccompare9ar =
  (FUN)
  [(VanillaId) $dEq5br ,(VanillaId) $dOrd7cr ,(VanillaId) $dOrd8dr ,(VanillaId) $dOrd9er ,(VanillaId) $dOrd10fr ,(VanillaId) $dOrd11gr ,(VanillaId) $dOrd12hr ,(VanillaId) $dOrd13ir ,(VanillaId) $dOrd14jr ,(VanillaId) $dOrd15kr ,(VanillaId) $dOrd16lr ,(VanillaId) dsmr ,(VanillaId) ds1nr]
    (Case) (App) (VanillaId) dsmr = (VanillaId) wildor
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,) (VanillaId) a14pr (VanillaId) b1qr (VanillaId) c1rr (VanillaId) d1sr (VanillaId) e1tr (VanillaId) f1ur (VanillaId) g1vr (VanillaId) h1wr (VanillaId) i1xr (VanillaId) j1yr
          -> (Case) (App) (VanillaId) ds1nr = (VanillaId) wild1zr
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,) (VanillaId) a150r (VanillaId) b21r (VanillaId) c22r (VanillaId) d23r (VanillaId) e24r (VanillaId) f25r (VanillaId) g26r (VanillaId) h27r (VanillaId) i28r (VanillaId) j29r
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7cr (VarArg) (VanillaId) a14pr (VarArg) (VanillaId) a150r = (VanillaId) wild2-r
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2-r
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8dr (VarArg) (VanillaId) b1qr (VarArg) (VanillaId) b21r = (VanillaId) wild3_r
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3_r
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9er (VarArg) (VanillaId) c1rr (VarArg) (VanillaId) c22r = (VanillaId) wild4As
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4As
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10fr (VarArg) (VanillaId) d1sr (VarArg) (VanillaId) d23r = (VanillaId) wild5Bs
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5Bs
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11gr (VarArg) (VanillaId) e1tr (VarArg) (VanillaId) e24r = (VanillaId) wild6Cs
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild6Cs
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12hr (VarArg) (VanillaId) f1ur (VarArg) (VanillaId) f25r = (VanillaId) wild7Ds
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild7Ds
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13ir (VarArg) (VanillaId) g1vr (VarArg) (VanillaId) g26r = (VanillaId) wild8Es
                                                                              (AlgAlt)
                                                                                (DEFAULT) _
                                                                                  -> (App) (VanillaId) wild8Es
                                                                                (DataAlt) GHC.Types.EQ
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14jr (VarArg) (VanillaId) h1wr (VarArg) (VanillaId) h27r = (VanillaId) wild9Fs
                                                                                       (AlgAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) wild9Fs
                                                                                         (DataAlt) GHC.Types.EQ
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15kr (VarArg) (VanillaId) i1xr (VarArg) (VanillaId) i28r = (VanillaId) wild10Gs
                                                                                                (AlgAlt)
                                                                                                  (DEFAULT) _
                                                                                                    -> (App) (VanillaId) wild10Gs
                                                                                                  (DataAlt) GHC.Types.EQ
                                                                                                    -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16lr (VarArg) (VanillaId) j1yr (VarArg) (VanillaId) j29r
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,) aHs bIs cJs dKs eLs fMs gNs hOs iPs jQs] APPFL.Classes.$fOrd(,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5Rs ,(VanillaId) $dOrd7Ss ,(VanillaId) $dOrd8Ts ,(VanillaId) $dOrd9Us ,(VanillaId) $dOrd10Vs ,(VanillaId) $dOrd11Ws ,(VanillaId) $dOrd12Xs ,(VanillaId) $dOrd13Ys ,(VanillaId) $dOrd14Zs ,(VanillaId) $dOrd15as ,(VanillaId) $dOrd16bs]
    (Let) let
      (StgNonRec)
        (VanillaId) satcs =
        (THUNK)
          (App) (VanillaId) $cmin9ds (VarArg) (VanillaId) $dEq5Rs (VarArg) (VanillaId) $dOrd7Ss (VarArg) (VanillaId) $dOrd8Ts (VarArg) (VanillaId) $dOrd9Us (VarArg) (VanillaId) $dOrd10Vs (VarArg) (VanillaId) $dOrd11Ws (VarArg) (VanillaId) $dOrd12Xs (VarArg) (VanillaId) $dOrd13Ys (VarArg) (VanillaId) $dOrd14Zs (VarArg) (VanillaId) $dOrd15as (VarArg) (VanillaId) $dOrd16bs
    in (Let) let
         (StgNonRec)
           (VanillaId) sates =
           (THUNK)
             (App) (VanillaId) $cmax9fs (VarArg) (VanillaId) $dEq5Rs (VarArg) (VanillaId) $dOrd7Ss (VarArg) (VanillaId) $dOrd8Ts (VarArg) (VanillaId) $dOrd9Us (VarArg) (VanillaId) $dOrd10Vs (VarArg) (VanillaId) $dOrd11Ws (VarArg) (VanillaId) $dOrd12Xs (VarArg) (VanillaId) $dOrd13Ys (VarArg) (VanillaId) $dOrd14Zs (VarArg) (VanillaId) $dOrd15as (VarArg) (VanillaId) $dOrd16bs
       in (Let) let
            (StgNonRec)
              (VanillaId) satgs =
              (THUNK)
                (App) (VanillaId) $c>=9hs (VarArg) (VanillaId) $dEq5Rs (VarArg) (VanillaId) $dOrd7Ss (VarArg) (VanillaId) $dOrd8Ts (VarArg) (VanillaId) $dOrd9Us (VarArg) (VanillaId) $dOrd10Vs (VarArg) (VanillaId) $dOrd11Ws (VarArg) (VanillaId) $dOrd12Xs (VarArg) (VanillaId) $dOrd13Ys (VarArg) (VanillaId) $dOrd14Zs (VarArg) (VanillaId) $dOrd15as (VarArg) (VanillaId) $dOrd16bs
          in (Let) let
               (StgNonRec)
                 (VanillaId) satis =
                 (THUNK)
                   (App) (VanillaId) $c>9js (VarArg) (VanillaId) $dEq5Rs (VarArg) (VanillaId) $dOrd7Ss (VarArg) (VanillaId) $dOrd8Ts (VarArg) (VanillaId) $dOrd9Us (VarArg) (VanillaId) $dOrd10Vs (VarArg) (VanillaId) $dOrd11Ws (VarArg) (VanillaId) $dOrd12Xs (VarArg) (VanillaId) $dOrd13Ys (VarArg) (VanillaId) $dOrd14Zs (VarArg) (VanillaId) $dOrd15as (VarArg) (VanillaId) $dOrd16bs
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satks =
                    (THUNK)
                      (App) (VanillaId) $c<=9ls (VarArg) (VanillaId) $dEq5Rs (VarArg) (VanillaId) $dOrd7Ss (VarArg) (VanillaId) $dOrd8Ts (VarArg) (VanillaId) $dOrd9Us (VarArg) (VanillaId) $dOrd10Vs (VarArg) (VanillaId) $dOrd11Ws (VarArg) (VanillaId) $dOrd12Xs (VarArg) (VanillaId) $dOrd13Ys (VarArg) (VanillaId) $dOrd14Zs (VarArg) (VanillaId) $dOrd15as (VarArg) (VanillaId) $dOrd16bs
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satms =
                       (THUNK)
                         (App) (VanillaId) $c<9ns (VarArg) (VanillaId) $dEq5Rs (VarArg) (VanillaId) $dOrd7Ss (VarArg) (VanillaId) $dOrd8Ts (VarArg) (VanillaId) $dOrd9Us (VarArg) (VanillaId) $dOrd10Vs (VarArg) (VanillaId) $dOrd11Ws (VarArg) (VanillaId) $dOrd12Xs (VarArg) (VanillaId) $dOrd13Ys (VarArg) (VanillaId) $dOrd14Zs (VarArg) (VanillaId) $dOrd15as (VarArg) (VanillaId) $dOrd16bs
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satos =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare9ar (VarArg) (VanillaId) $dEq5Rs (VarArg) (VanillaId) $dOrd7Ss (VarArg) (VanillaId) $dOrd8Ts (VarArg) (VanillaId) $dOrd9Us (VarArg) (VanillaId) $dOrd10Vs (VarArg) (VanillaId) $dOrd11Ws (VarArg) (VanillaId) $dOrd12Xs (VarArg) (VanillaId) $dOrd13Ys (VarArg) (VanillaId) $dOrd14Zs (VarArg) (VanillaId) $dOrd15as (VarArg) (VanillaId) $dOrd16bs (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5Rs ,(VarArg) (VanillaId) satos ,(VarArg) (VanillaId) satms ,(VarArg) (VanillaId) satks ,(VarArg) (VanillaId) satis ,(VarArg) (VanillaId) satgs ,(VarArg) (VanillaId) sates ,(VarArg) (VanillaId) satcs]
  (VanillaId) $cmin9ds =
  (FUN)
  [(VanillaId) $dEq5ps ,(VanillaId) $dOrd7qs ,(VanillaId) $dOrd8rs ,(VanillaId) $dOrd9ss ,(VanillaId) $dOrd10ts ,(VanillaId) $dOrd11us ,(VanillaId) $dOrd12vs ,(VanillaId) $dOrd13ws ,(VanillaId) $dOrd14xs ,(VanillaId) $dOrd15ys ,(VanillaId) $dOrd16zs]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd170s =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,) aHs bIs cJs dKs eLs fMs gNs hOs iPs jQs] APPFL.Classes.$fOrd(,,,,,,,,,) (VarArg) (VanillaId) $dEq5ps (VarArg) (VanillaId) $dOrd7qs (VarArg) (VanillaId) $dOrd8rs (VarArg) (VanillaId) $dOrd9ss (VarArg) (VanillaId) $dOrd10ts (VarArg) (VanillaId) $dOrd11us (VarArg) (VanillaId) $dOrd12vs (VarArg) (VanillaId) $dOrd13ws (VarArg) (VanillaId) $dOrd14xs (VarArg) (VanillaId) $dOrd15ys (VarArg) (VanillaId) $dOrd16zs
    in (Let) let
         (StgNonRec)
           (VanillaId) sat1s =
           (FUN)
           [(VanillaId) x2s ,(VanillaId) y3s]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd170s (VarArg) (VanillaId) x2s (VarArg) (VanillaId) y3s = (VanillaId) wild4s
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) y3s
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) x2s
       in (App) (VanillaId) sat1s
  (VanillaId) $cmax9fs =
  (FUN)
  [(VanillaId) $dEq55s ,(VanillaId) $dOrd76s ,(VanillaId) $dOrd87s ,(VanillaId) $dOrd98s ,(VanillaId) $dOrd109s ,(VanillaId) $dOrd11-s ,(VanillaId) $dOrd12_s ,(VanillaId) $dOrd13At ,(VanillaId) $dOrd14Bt ,(VanillaId) $dOrd15Ct ,(VanillaId) $dOrd16Dt]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd17Et =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,) aHs bIs cJs dKs eLs fMs gNs hOs iPs jQs] APPFL.Classes.$fOrd(,,,,,,,,,) (VarArg) (VanillaId) $dEq55s (VarArg) (VanillaId) $dOrd76s (VarArg) (VanillaId) $dOrd87s (VarArg) (VanillaId) $dOrd98s (VarArg) (VanillaId) $dOrd109s (VarArg) (VanillaId) $dOrd11-s (VarArg) (VanillaId) $dOrd12_s (VarArg) (VanillaId) $dOrd13At (VarArg) (VanillaId) $dOrd14Bt (VarArg) (VanillaId) $dOrd15Ct (VarArg) (VanillaId) $dOrd16Dt
    in (Let) let
         (StgNonRec)
           (VanillaId) satFt =
           (FUN)
           [(VanillaId) xGt ,(VanillaId) yHt]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd17Et (VarArg) (VanillaId) xGt (VarArg) (VanillaId) yHt = (VanillaId) wildIt
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xGt
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yHt
       in (App) (VanillaId) satFt
  (VanillaId) $c>=9hs =
  (FUN)
  [(VanillaId) $dEq5Jt ,(VanillaId) $dOrd7Kt ,(VanillaId) $dOrd8Lt ,(VanillaId) $dOrd9Mt ,(VanillaId) $dOrd10Nt ,(VanillaId) $dOrd11Ot ,(VanillaId) $dOrd12Pt ,(VanillaId) $dOrd13Qt ,(VanillaId) $dOrd14Rt ,(VanillaId) $dOrd15St ,(VanillaId) $dOrd16Tt]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd17Ut =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,) aHs bIs cJs dKs eLs fMs gNs hOs iPs jQs] APPFL.Classes.$fOrd(,,,,,,,,,) (VarArg) (VanillaId) $dEq5Jt (VarArg) (VanillaId) $dOrd7Kt (VarArg) (VanillaId) $dOrd8Lt (VarArg) (VanillaId) $dOrd9Mt (VarArg) (VanillaId) $dOrd10Nt (VarArg) (VanillaId) $dOrd11Ot (VarArg) (VanillaId) $dOrd12Pt (VarArg) (VanillaId) $dOrd13Qt (VarArg) (VanillaId) $dOrd14Rt (VarArg) (VanillaId) $dOrd15St (VarArg) (VanillaId) $dOrd16Tt
    in (Let) let
         (StgNonRec)
           (VanillaId) satVt =
           (FUN)
           [(VanillaId) xWt ,(VanillaId) yXt]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd17Ut (VarArg) (VanillaId) xWt (VarArg) (VanillaId) yXt = (VanillaId) wildYt
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satVt
  (VanillaId) $c>9js =
  (FUN)
  [(VanillaId) $dEq5Zt ,(VanillaId) $dOrd7at ,(VanillaId) $dOrd8bt ,(VanillaId) $dOrd9ct ,(VanillaId) $dOrd10dt ,(VanillaId) $dOrd11et ,(VanillaId) $dOrd12ft ,(VanillaId) $dOrd13gt ,(VanillaId) $dOrd14ht ,(VanillaId) $dOrd15it ,(VanillaId) $dOrd16jt]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd17kt =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,) aHs bIs cJs dKs eLs fMs gNs hOs iPs jQs] APPFL.Classes.$fOrd(,,,,,,,,,) (VarArg) (VanillaId) $dEq5Zt (VarArg) (VanillaId) $dOrd7at (VarArg) (VanillaId) $dOrd8bt (VarArg) (VanillaId) $dOrd9ct (VarArg) (VanillaId) $dOrd10dt (VarArg) (VanillaId) $dOrd11et (VarArg) (VanillaId) $dOrd12ft (VarArg) (VanillaId) $dOrd13gt (VarArg) (VanillaId) $dOrd14ht (VarArg) (VanillaId) $dOrd15it (VarArg) (VanillaId) $dOrd16jt
    in (Let) let
         (StgNonRec)
           (VanillaId) satlt =
           (FUN)
           [(VanillaId) xmt ,(VanillaId) ynt]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd17kt (VarArg) (VanillaId) xmt (VarArg) (VanillaId) ynt = (VanillaId) wildot
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satlt
  (VanillaId) $c<=9ls =
  (FUN)
  [(VanillaId) $dEq5pt ,(VanillaId) $dOrd7qt ,(VanillaId) $dOrd8rt ,(VanillaId) $dOrd9st ,(VanillaId) $dOrd10tt ,(VanillaId) $dOrd11ut ,(VanillaId) $dOrd12vt ,(VanillaId) $dOrd13wt ,(VanillaId) $dOrd14xt ,(VanillaId) $dOrd15yt ,(VanillaId) $dOrd16zt]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd170t =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,) aHs bIs cJs dKs eLs fMs gNs hOs iPs jQs] APPFL.Classes.$fOrd(,,,,,,,,,) (VarArg) (VanillaId) $dEq5pt (VarArg) (VanillaId) $dOrd7qt (VarArg) (VanillaId) $dOrd8rt (VarArg) (VanillaId) $dOrd9st (VarArg) (VanillaId) $dOrd10tt (VarArg) (VanillaId) $dOrd11ut (VarArg) (VanillaId) $dOrd12vt (VarArg) (VanillaId) $dOrd13wt (VarArg) (VanillaId) $dOrd14xt (VarArg) (VanillaId) $dOrd15yt (VarArg) (VanillaId) $dOrd16zt
    in (Let) let
         (StgNonRec)
           (VanillaId) sat1t =
           (FUN)
           [(VanillaId) x2t ,(VanillaId) y3t]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd170t (VarArg) (VanillaId) x2t (VarArg) (VanillaId) y3t = (VanillaId) wild4t
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) sat1t
  (VanillaId) $c<9ns =
  (FUN)
  [(VanillaId) $dEq55t ,(VanillaId) $dOrd76t ,(VanillaId) $dOrd87t ,(VanillaId) $dOrd98t ,(VanillaId) $dOrd109t ,(VanillaId) $dOrd11-t ,(VanillaId) $dOrd12_t ,(VanillaId) $dOrd13Au ,(VanillaId) $dOrd14Bu ,(VanillaId) $dOrd15Cu ,(VanillaId) $dOrd16Du]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd17Eu =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,) aHs bIs cJs dKs eLs fMs gNs hOs iPs jQs] APPFL.Classes.$fOrd(,,,,,,,,,) (VarArg) (VanillaId) $dEq55t (VarArg) (VanillaId) $dOrd76t (VarArg) (VanillaId) $dOrd87t (VarArg) (VanillaId) $dOrd98t (VarArg) (VanillaId) $dOrd109t (VarArg) (VanillaId) $dOrd11-t (VarArg) (VanillaId) $dOrd12_t (VarArg) (VanillaId) $dOrd13Au (VarArg) (VanillaId) $dOrd14Bu (VarArg) (VanillaId) $dOrd15Cu (VarArg) (VanillaId) $dOrd16Du
    in (Let) let
         (StgNonRec)
           (VanillaId) satFu =
           (FUN)
           [(VanillaId) xGu ,(VanillaId) yHu]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd17Eu (VarArg) (VanillaId) xGu (VarArg) (VanillaId) yHu = (VanillaId) wildIu
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satFu
(StgNonRec)
  (VanillaId) $ccompare10Ju =
  (FUN)
  [(VanillaId) $dEq5Ku ,(VanillaId) $dOrd7Lu ,(VanillaId) $dOrd8Mu ,(VanillaId) $dOrd9Nu ,(VanillaId) $dOrd10Ou ,(VanillaId) $dOrd11Pu ,(VanillaId) $dOrd12Qu ,(VanillaId) $dOrd13Ru ,(VanillaId) $dOrd14Su ,(VanillaId) $dOrd15Tu ,(VanillaId) $dOrd16Uu ,(VanillaId) $dOrd17Vu ,(VanillaId) dsWu ,(VanillaId) ds1Xu]
    (Case) (App) (VanillaId) dsWu = (VanillaId) wildYu
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,) (VanillaId) a14Zu (VanillaId) b1au (VanillaId) c1bu (VanillaId) d1cu (VanillaId) e1du (VanillaId) f1eu (VanillaId) g1fu (VanillaId) h1gu (VanillaId) i1hu (VanillaId) j1iu (VanillaId) k1ju
          -> (Case) (App) (VanillaId) ds1Xu = (VanillaId) wild1ku
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,) (VanillaId) a15lu (VanillaId) b2mu (VanillaId) c2nu (VanillaId) d2ou (VanillaId) e2pu (VanillaId) f2qu (VanillaId) g2ru (VanillaId) h2su (VanillaId) i2tu (VanillaId) j2uu (VanillaId) k2vu
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7Lu (VarArg) (VanillaId) a14Zu (VarArg) (VanillaId) a15lu = (VanillaId) wild2wu
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2wu
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8Mu (VarArg) (VanillaId) b1au (VarArg) (VanillaId) b2mu = (VanillaId) wild3xu
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3xu
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9Nu (VarArg) (VanillaId) c1bu (VarArg) (VanillaId) c2nu = (VanillaId) wild4yu
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4yu
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10Ou (VarArg) (VanillaId) d1cu (VarArg) (VanillaId) d2ou = (VanillaId) wild5zu
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5zu
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11Pu (VarArg) (VanillaId) e1du (VarArg) (VanillaId) e2pu = (VanillaId) wild60u
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild60u
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12Qu (VarArg) (VanillaId) f1eu (VarArg) (VanillaId) f2qu = (VanillaId) wild71u
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild71u
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13Ru (VarArg) (VanillaId) g1fu (VarArg) (VanillaId) g2ru = (VanillaId) wild82u
                                                                              (AlgAlt)
                                                                                (DEFAULT) _
                                                                                  -> (App) (VanillaId) wild82u
                                                                                (DataAlt) GHC.Types.EQ
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14Su (VarArg) (VanillaId) h1gu (VarArg) (VanillaId) h2su = (VanillaId) wild93u
                                                                                       (AlgAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) wild93u
                                                                                         (DataAlt) GHC.Types.EQ
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15Tu (VarArg) (VanillaId) i1hu (VarArg) (VanillaId) i2tu = (VanillaId) wild104u
                                                                                                (AlgAlt)
                                                                                                  (DEFAULT) _
                                                                                                    -> (App) (VanillaId) wild104u
                                                                                                  (DataAlt) GHC.Types.EQ
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16Uu (VarArg) (VanillaId) j1iu (VarArg) (VanillaId) j2uu = (VanillaId) wild115u
                                                                                                         (AlgAlt)
                                                                                                           (DEFAULT) _
                                                                                                             -> (App) (VanillaId) wild115u
                                                                                                           (DataAlt) GHC.Types.EQ
                                                                                                             -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd17Vu (VarArg) (VanillaId) k1ju (VarArg) (VanillaId) k2vu
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,) a6u b7u c8u d9u e-u f_u gAv hBv iCv jDv kEv] APPFL.Classes.$fOrd(,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5Fv ,(VanillaId) $dOrd7Gv ,(VanillaId) $dOrd8Hv ,(VanillaId) $dOrd9Iv ,(VanillaId) $dOrd10Jv ,(VanillaId) $dOrd11Kv ,(VanillaId) $dOrd12Lv ,(VanillaId) $dOrd13Mv ,(VanillaId) $dOrd14Nv ,(VanillaId) $dOrd15Ov ,(VanillaId) $dOrd16Pv ,(VanillaId) $dOrd17Qv]
    (Let) let
      (StgNonRec)
        (VanillaId) satRv =
        (THUNK)
          (App) (VanillaId) $cmin10Sv (VarArg) (VanillaId) $dEq5Fv (VarArg) (VanillaId) $dOrd7Gv (VarArg) (VanillaId) $dOrd8Hv (VarArg) (VanillaId) $dOrd9Iv (VarArg) (VanillaId) $dOrd10Jv (VarArg) (VanillaId) $dOrd11Kv (VarArg) (VanillaId) $dOrd12Lv (VarArg) (VanillaId) $dOrd13Mv (VarArg) (VanillaId) $dOrd14Nv (VarArg) (VanillaId) $dOrd15Ov (VarArg) (VanillaId) $dOrd16Pv (VarArg) (VanillaId) $dOrd17Qv
    in (Let) let
         (StgNonRec)
           (VanillaId) satTv =
           (THUNK)
             (App) (VanillaId) $cmax10Uv (VarArg) (VanillaId) $dEq5Fv (VarArg) (VanillaId) $dOrd7Gv (VarArg) (VanillaId) $dOrd8Hv (VarArg) (VanillaId) $dOrd9Iv (VarArg) (VanillaId) $dOrd10Jv (VarArg) (VanillaId) $dOrd11Kv (VarArg) (VanillaId) $dOrd12Lv (VarArg) (VanillaId) $dOrd13Mv (VarArg) (VanillaId) $dOrd14Nv (VarArg) (VanillaId) $dOrd15Ov (VarArg) (VanillaId) $dOrd16Pv (VarArg) (VanillaId) $dOrd17Qv
       in (Let) let
            (StgNonRec)
              (VanillaId) satVv =
              (THUNK)
                (App) (VanillaId) $c>=10Wv (VarArg) (VanillaId) $dEq5Fv (VarArg) (VanillaId) $dOrd7Gv (VarArg) (VanillaId) $dOrd8Hv (VarArg) (VanillaId) $dOrd9Iv (VarArg) (VanillaId) $dOrd10Jv (VarArg) (VanillaId) $dOrd11Kv (VarArg) (VanillaId) $dOrd12Lv (VarArg) (VanillaId) $dOrd13Mv (VarArg) (VanillaId) $dOrd14Nv (VarArg) (VanillaId) $dOrd15Ov (VarArg) (VanillaId) $dOrd16Pv (VarArg) (VanillaId) $dOrd17Qv
          in (Let) let
               (StgNonRec)
                 (VanillaId) satXv =
                 (THUNK)
                   (App) (VanillaId) $c>10Yv (VarArg) (VanillaId) $dEq5Fv (VarArg) (VanillaId) $dOrd7Gv (VarArg) (VanillaId) $dOrd8Hv (VarArg) (VanillaId) $dOrd9Iv (VarArg) (VanillaId) $dOrd10Jv (VarArg) (VanillaId) $dOrd11Kv (VarArg) (VanillaId) $dOrd12Lv (VarArg) (VanillaId) $dOrd13Mv (VarArg) (VanillaId) $dOrd14Nv (VarArg) (VanillaId) $dOrd15Ov (VarArg) (VanillaId) $dOrd16Pv (VarArg) (VanillaId) $dOrd17Qv
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satZv =
                    (THUNK)
                      (App) (VanillaId) $c<=10av (VarArg) (VanillaId) $dEq5Fv (VarArg) (VanillaId) $dOrd7Gv (VarArg) (VanillaId) $dOrd8Hv (VarArg) (VanillaId) $dOrd9Iv (VarArg) (VanillaId) $dOrd10Jv (VarArg) (VanillaId) $dOrd11Kv (VarArg) (VanillaId) $dOrd12Lv (VarArg) (VanillaId) $dOrd13Mv (VarArg) (VanillaId) $dOrd14Nv (VarArg) (VanillaId) $dOrd15Ov (VarArg) (VanillaId) $dOrd16Pv (VarArg) (VanillaId) $dOrd17Qv
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satbv =
                       (THUNK)
                         (App) (VanillaId) $c<10cv (VarArg) (VanillaId) $dEq5Fv (VarArg) (VanillaId) $dOrd7Gv (VarArg) (VanillaId) $dOrd8Hv (VarArg) (VanillaId) $dOrd9Iv (VarArg) (VanillaId) $dOrd10Jv (VarArg) (VanillaId) $dOrd11Kv (VarArg) (VanillaId) $dOrd12Lv (VarArg) (VanillaId) $dOrd13Mv (VarArg) (VanillaId) $dOrd14Nv (VarArg) (VanillaId) $dOrd15Ov (VarArg) (VanillaId) $dOrd16Pv (VarArg) (VanillaId) $dOrd17Qv
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satdv =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare10Ju (VarArg) (VanillaId) $dEq5Fv (VarArg) (VanillaId) $dOrd7Gv (VarArg) (VanillaId) $dOrd8Hv (VarArg) (VanillaId) $dOrd9Iv (VarArg) (VanillaId) $dOrd10Jv (VarArg) (VanillaId) $dOrd11Kv (VarArg) (VanillaId) $dOrd12Lv (VarArg) (VanillaId) $dOrd13Mv (VarArg) (VanillaId) $dOrd14Nv (VarArg) (VanillaId) $dOrd15Ov (VarArg) (VanillaId) $dOrd16Pv (VarArg) (VanillaId) $dOrd17Qv (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5Fv ,(VarArg) (VanillaId) satdv ,(VarArg) (VanillaId) satbv ,(VarArg) (VanillaId) satZv ,(VarArg) (VanillaId) satXv ,(VarArg) (VanillaId) satVv ,(VarArg) (VanillaId) satTv ,(VarArg) (VanillaId) satRv]
  (VanillaId) $cmin10Sv =
  (FUN)
  [(VanillaId) $dEq5ev ,(VanillaId) $dOrd7fv ,(VanillaId) $dOrd8gv ,(VanillaId) $dOrd9hv ,(VanillaId) $dOrd10iv ,(VanillaId) $dOrd11jv ,(VanillaId) $dOrd12kv ,(VanillaId) $dOrd13lv ,(VanillaId) $dOrd14mv ,(VanillaId) $dOrd15nv ,(VanillaId) $dOrd16ov ,(VanillaId) $dOrd17pv]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd18qv =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,) a6u b7u c8u d9u e-u f_u gAv hBv iCv jDv kEv] APPFL.Classes.$fOrd(,,,,,,,,,,) (VarArg) (VanillaId) $dEq5ev (VarArg) (VanillaId) $dOrd7fv (VarArg) (VanillaId) $dOrd8gv (VarArg) (VanillaId) $dOrd9hv (VarArg) (VanillaId) $dOrd10iv (VarArg) (VanillaId) $dOrd11jv (VarArg) (VanillaId) $dOrd12kv (VarArg) (VanillaId) $dOrd13lv (VarArg) (VanillaId) $dOrd14mv (VarArg) (VanillaId) $dOrd15nv (VarArg) (VanillaId) $dOrd16ov (VarArg) (VanillaId) $dOrd17pv
    in (Let) let
         (StgNonRec)
           (VanillaId) satrv =
           (FUN)
           [(VanillaId) xsv ,(VanillaId) ytv]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd18qv (VarArg) (VanillaId) xsv (VarArg) (VanillaId) ytv = (VanillaId) wilduv
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) ytv
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xsv
       in (App) (VanillaId) satrv
  (VanillaId) $cmax10Uv =
  (FUN)
  [(VanillaId) $dEq5vv ,(VanillaId) $dOrd7wv ,(VanillaId) $dOrd8xv ,(VanillaId) $dOrd9yv ,(VanillaId) $dOrd10zv ,(VanillaId) $dOrd110v ,(VanillaId) $dOrd121v ,(VanillaId) $dOrd132v ,(VanillaId) $dOrd143v ,(VanillaId) $dOrd154v ,(VanillaId) $dOrd165v ,(VanillaId) $dOrd176v]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd187v =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,) a6u b7u c8u d9u e-u f_u gAv hBv iCv jDv kEv] APPFL.Classes.$fOrd(,,,,,,,,,,) (VarArg) (VanillaId) $dEq5vv (VarArg) (VanillaId) $dOrd7wv (VarArg) (VanillaId) $dOrd8xv (VarArg) (VanillaId) $dOrd9yv (VarArg) (VanillaId) $dOrd10zv (VarArg) (VanillaId) $dOrd110v (VarArg) (VanillaId) $dOrd121v (VarArg) (VanillaId) $dOrd132v (VarArg) (VanillaId) $dOrd143v (VarArg) (VanillaId) $dOrd154v (VarArg) (VanillaId) $dOrd165v (VarArg) (VanillaId) $dOrd176v
    in (Let) let
         (StgNonRec)
           (VanillaId) sat8v =
           (FUN)
           [(VanillaId) x9v ,(VanillaId) y-v]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd187v (VarArg) (VanillaId) x9v (VarArg) (VanillaId) y-v = (VanillaId) wild_v
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) x9v
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) y-v
       in (App) (VanillaId) sat8v
  (VanillaId) $c>=10Wv =
  (FUN)
  [(VanillaId) $dEq5Aw ,(VanillaId) $dOrd7Bw ,(VanillaId) $dOrd8Cw ,(VanillaId) $dOrd9Dw ,(VanillaId) $dOrd10Ew ,(VanillaId) $dOrd11Fw ,(VanillaId) $dOrd12Gw ,(VanillaId) $dOrd13Hw ,(VanillaId) $dOrd14Iw ,(VanillaId) $dOrd15Jw ,(VanillaId) $dOrd16Kw ,(VanillaId) $dOrd17Lw]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd18Mw =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,) a6u b7u c8u d9u e-u f_u gAv hBv iCv jDv kEv] APPFL.Classes.$fOrd(,,,,,,,,,,) (VarArg) (VanillaId) $dEq5Aw (VarArg) (VanillaId) $dOrd7Bw (VarArg) (VanillaId) $dOrd8Cw (VarArg) (VanillaId) $dOrd9Dw (VarArg) (VanillaId) $dOrd10Ew (VarArg) (VanillaId) $dOrd11Fw (VarArg) (VanillaId) $dOrd12Gw (VarArg) (VanillaId) $dOrd13Hw (VarArg) (VanillaId) $dOrd14Iw (VarArg) (VanillaId) $dOrd15Jw (VarArg) (VanillaId) $dOrd16Kw (VarArg) (VanillaId) $dOrd17Lw
    in (Let) let
         (StgNonRec)
           (VanillaId) satNw =
           (FUN)
           [(VanillaId) xOw ,(VanillaId) yPw]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd18Mw (VarArg) (VanillaId) xOw (VarArg) (VanillaId) yPw = (VanillaId) wildQw
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satNw
  (VanillaId) $c>10Yv =
  (FUN)
  [(VanillaId) $dEq5Rw ,(VanillaId) $dOrd7Sw ,(VanillaId) $dOrd8Tw ,(VanillaId) $dOrd9Uw ,(VanillaId) $dOrd10Vw ,(VanillaId) $dOrd11Ww ,(VanillaId) $dOrd12Xw ,(VanillaId) $dOrd13Yw ,(VanillaId) $dOrd14Zw ,(VanillaId) $dOrd15aw ,(VanillaId) $dOrd16bw ,(VanillaId) $dOrd17cw]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd18dw =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,) a6u b7u c8u d9u e-u f_u gAv hBv iCv jDv kEv] APPFL.Classes.$fOrd(,,,,,,,,,,) (VarArg) (VanillaId) $dEq5Rw (VarArg) (VanillaId) $dOrd7Sw (VarArg) (VanillaId) $dOrd8Tw (VarArg) (VanillaId) $dOrd9Uw (VarArg) (VanillaId) $dOrd10Vw (VarArg) (VanillaId) $dOrd11Ww (VarArg) (VanillaId) $dOrd12Xw (VarArg) (VanillaId) $dOrd13Yw (VarArg) (VanillaId) $dOrd14Zw (VarArg) (VanillaId) $dOrd15aw (VarArg) (VanillaId) $dOrd16bw (VarArg) (VanillaId) $dOrd17cw
    in (Let) let
         (StgNonRec)
           (VanillaId) satew =
           (FUN)
           [(VanillaId) xfw ,(VanillaId) ygw]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd18dw (VarArg) (VanillaId) xfw (VarArg) (VanillaId) ygw = (VanillaId) wildhw
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satew
  (VanillaId) $c<=10av =
  (FUN)
  [(VanillaId) $dEq5iw ,(VanillaId) $dOrd7jw ,(VanillaId) $dOrd8kw ,(VanillaId) $dOrd9lw ,(VanillaId) $dOrd10mw ,(VanillaId) $dOrd11nw ,(VanillaId) $dOrd12ow ,(VanillaId) $dOrd13pw ,(VanillaId) $dOrd14qw ,(VanillaId) $dOrd15rw ,(VanillaId) $dOrd16sw ,(VanillaId) $dOrd17tw]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd18uw =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,) a6u b7u c8u d9u e-u f_u gAv hBv iCv jDv kEv] APPFL.Classes.$fOrd(,,,,,,,,,,) (VarArg) (VanillaId) $dEq5iw (VarArg) (VanillaId) $dOrd7jw (VarArg) (VanillaId) $dOrd8kw (VarArg) (VanillaId) $dOrd9lw (VarArg) (VanillaId) $dOrd10mw (VarArg) (VanillaId) $dOrd11nw (VarArg) (VanillaId) $dOrd12ow (VarArg) (VanillaId) $dOrd13pw (VarArg) (VanillaId) $dOrd14qw (VarArg) (VanillaId) $dOrd15rw (VarArg) (VanillaId) $dOrd16sw (VarArg) (VanillaId) $dOrd17tw
    in (Let) let
         (StgNonRec)
           (VanillaId) satvw =
           (FUN)
           [(VanillaId) xww ,(VanillaId) yxw]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd18uw (VarArg) (VanillaId) xww (VarArg) (VanillaId) yxw = (VanillaId) wildyw
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satvw
  (VanillaId) $c<10cv =
  (FUN)
  [(VanillaId) $dEq5zw ,(VanillaId) $dOrd70w ,(VanillaId) $dOrd81w ,(VanillaId) $dOrd92w ,(VanillaId) $dOrd103w ,(VanillaId) $dOrd114w ,(VanillaId) $dOrd125w ,(VanillaId) $dOrd136w ,(VanillaId) $dOrd147w ,(VanillaId) $dOrd158w ,(VanillaId) $dOrd169w ,(VanillaId) $dOrd17-w]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd18_w =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,) a6u b7u c8u d9u e-u f_u gAv hBv iCv jDv kEv] APPFL.Classes.$fOrd(,,,,,,,,,,) (VarArg) (VanillaId) $dEq5zw (VarArg) (VanillaId) $dOrd70w (VarArg) (VanillaId) $dOrd81w (VarArg) (VanillaId) $dOrd92w (VarArg) (VanillaId) $dOrd103w (VarArg) (VanillaId) $dOrd114w (VarArg) (VanillaId) $dOrd125w (VarArg) (VanillaId) $dOrd136w (VarArg) (VanillaId) $dOrd147w (VarArg) (VanillaId) $dOrd158w (VarArg) (VanillaId) $dOrd169w (VarArg) (VanillaId) $dOrd17-w
    in (Let) let
         (StgNonRec)
           (VanillaId) satAx =
           (FUN)
           [(VanillaId) xBx ,(VanillaId) yCx]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd18_w (VarArg) (VanillaId) xBx (VarArg) (VanillaId) yCx = (VanillaId) wildDx
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satAx
(StgNonRec)
  (VanillaId) $ccompare11Ex =
  (FUN)
  [(VanillaId) $dEq5Fx ,(VanillaId) $dOrd7Gx ,(VanillaId) $dOrd8Hx ,(VanillaId) $dOrd9Ix ,(VanillaId) $dOrd10Jx ,(VanillaId) $dOrd11Kx ,(VanillaId) $dOrd12Lx ,(VanillaId) $dOrd13Mx ,(VanillaId) $dOrd14Nx ,(VanillaId) $dOrd15Ox ,(VanillaId) $dOrd16Px ,(VanillaId) $dOrd17Qx ,(VanillaId) $dOrd18Rx ,(VanillaId) dsSx ,(VanillaId) ds1Tx]
    (Case) (App) (VanillaId) dsSx = (VanillaId) wildUx
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,,) (VanillaId) a14Vx (VanillaId) b1Wx (VanillaId) c1Xx (VanillaId) d1Yx (VanillaId) e1Zx (VanillaId) f1ax (VanillaId) g1bx (VanillaId) h1cx (VanillaId) i1dx (VanillaId) j1ex (VanillaId) k1fx (VanillaId) l1gx
          -> (Case) (App) (VanillaId) ds1Tx = (VanillaId) wild1hx
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,,) (VanillaId) a15ix (VanillaId) b2jx (VanillaId) c2kx (VanillaId) d2lx (VanillaId) e2mx (VanillaId) f2nx (VanillaId) g2ox (VanillaId) h2px (VanillaId) i2qx (VanillaId) j2rx (VanillaId) k2sx (VanillaId) l2tx
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7Gx (VarArg) (VanillaId) a14Vx (VarArg) (VanillaId) a15ix = (VanillaId) wild2ux
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2ux
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8Hx (VarArg) (VanillaId) b1Wx (VarArg) (VanillaId) b2jx = (VanillaId) wild3vx
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3vx
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9Ix (VarArg) (VanillaId) c1Xx (VarArg) (VanillaId) c2kx = (VanillaId) wild4wx
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4wx
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10Jx (VarArg) (VanillaId) d1Yx (VarArg) (VanillaId) d2lx = (VanillaId) wild5xx
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5xx
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11Kx (VarArg) (VanillaId) e1Zx (VarArg) (VanillaId) e2mx = (VanillaId) wild6yx
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild6yx
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12Lx (VarArg) (VanillaId) f1ax (VarArg) (VanillaId) f2nx = (VanillaId) wild7zx
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild7zx
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13Mx (VarArg) (VanillaId) g1bx (VarArg) (VanillaId) g2ox = (VanillaId) wild80x
                                                                              (AlgAlt)
                                                                                (DEFAULT) _
                                                                                  -> (App) (VanillaId) wild80x
                                                                                (DataAlt) GHC.Types.EQ
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14Nx (VarArg) (VanillaId) h1cx (VarArg) (VanillaId) h2px = (VanillaId) wild91x
                                                                                       (AlgAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) wild91x
                                                                                         (DataAlt) GHC.Types.EQ
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15Ox (VarArg) (VanillaId) i1dx (VarArg) (VanillaId) i2qx = (VanillaId) wild102x
                                                                                                (AlgAlt)
                                                                                                  (DEFAULT) _
                                                                                                    -> (App) (VanillaId) wild102x
                                                                                                  (DataAlt) GHC.Types.EQ
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16Px (VarArg) (VanillaId) j1ex (VarArg) (VanillaId) j2rx = (VanillaId) wild113x
                                                                                                         (AlgAlt)
                                                                                                           (DEFAULT) _
                                                                                                             -> (App) (VanillaId) wild113x
                                                                                                           (DataAlt) GHC.Types.EQ
                                                                                                             -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd17Qx (VarArg) (VanillaId) k1fx (VarArg) (VanillaId) k2sx = (VanillaId) wild124x
                                                                                                                  (AlgAlt)
                                                                                                                    (DEFAULT) _
                                                                                                                      -> (App) (VanillaId) wild124x
                                                                                                                    (DataAlt) GHC.Types.EQ
                                                                                                                      -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd18Rx (VarArg) (VanillaId) l1gx (VarArg) (VanillaId) l2tx
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,) a5x b6x c7x d8x e9x f-x g_x hAy iBy jCy kDy lEy] APPFL.Classes.$fOrd(,,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5Fy ,(VanillaId) $dOrd7Gy ,(VanillaId) $dOrd8Hy ,(VanillaId) $dOrd9Iy ,(VanillaId) $dOrd10Jy ,(VanillaId) $dOrd11Ky ,(VanillaId) $dOrd12Ly ,(VanillaId) $dOrd13My ,(VanillaId) $dOrd14Ny ,(VanillaId) $dOrd15Oy ,(VanillaId) $dOrd16Py ,(VanillaId) $dOrd17Qy ,(VanillaId) $dOrd18Ry]
    (Let) let
      (StgNonRec)
        (VanillaId) satSy =
        (THUNK)
          (App) (VanillaId) $cmin11Ty (VarArg) (VanillaId) $dEq5Fy (VarArg) (VanillaId) $dOrd7Gy (VarArg) (VanillaId) $dOrd8Hy (VarArg) (VanillaId) $dOrd9Iy (VarArg) (VanillaId) $dOrd10Jy (VarArg) (VanillaId) $dOrd11Ky (VarArg) (VanillaId) $dOrd12Ly (VarArg) (VanillaId) $dOrd13My (VarArg) (VanillaId) $dOrd14Ny (VarArg) (VanillaId) $dOrd15Oy (VarArg) (VanillaId) $dOrd16Py (VarArg) (VanillaId) $dOrd17Qy (VarArg) (VanillaId) $dOrd18Ry
    in (Let) let
         (StgNonRec)
           (VanillaId) satUy =
           (THUNK)
             (App) (VanillaId) $cmax11Vy (VarArg) (VanillaId) $dEq5Fy (VarArg) (VanillaId) $dOrd7Gy (VarArg) (VanillaId) $dOrd8Hy (VarArg) (VanillaId) $dOrd9Iy (VarArg) (VanillaId) $dOrd10Jy (VarArg) (VanillaId) $dOrd11Ky (VarArg) (VanillaId) $dOrd12Ly (VarArg) (VanillaId) $dOrd13My (VarArg) (VanillaId) $dOrd14Ny (VarArg) (VanillaId) $dOrd15Oy (VarArg) (VanillaId) $dOrd16Py (VarArg) (VanillaId) $dOrd17Qy (VarArg) (VanillaId) $dOrd18Ry
       in (Let) let
            (StgNonRec)
              (VanillaId) satWy =
              (THUNK)
                (App) (VanillaId) $c>=11Xy (VarArg) (VanillaId) $dEq5Fy (VarArg) (VanillaId) $dOrd7Gy (VarArg) (VanillaId) $dOrd8Hy (VarArg) (VanillaId) $dOrd9Iy (VarArg) (VanillaId) $dOrd10Jy (VarArg) (VanillaId) $dOrd11Ky (VarArg) (VanillaId) $dOrd12Ly (VarArg) (VanillaId) $dOrd13My (VarArg) (VanillaId) $dOrd14Ny (VarArg) (VanillaId) $dOrd15Oy (VarArg) (VanillaId) $dOrd16Py (VarArg) (VanillaId) $dOrd17Qy (VarArg) (VanillaId) $dOrd18Ry
          in (Let) let
               (StgNonRec)
                 (VanillaId) satYy =
                 (THUNK)
                   (App) (VanillaId) $c>11Zy (VarArg) (VanillaId) $dEq5Fy (VarArg) (VanillaId) $dOrd7Gy (VarArg) (VanillaId) $dOrd8Hy (VarArg) (VanillaId) $dOrd9Iy (VarArg) (VanillaId) $dOrd10Jy (VarArg) (VanillaId) $dOrd11Ky (VarArg) (VanillaId) $dOrd12Ly (VarArg) (VanillaId) $dOrd13My (VarArg) (VanillaId) $dOrd14Ny (VarArg) (VanillaId) $dOrd15Oy (VarArg) (VanillaId) $dOrd16Py (VarArg) (VanillaId) $dOrd17Qy (VarArg) (VanillaId) $dOrd18Ry
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satay =
                    (THUNK)
                      (App) (VanillaId) $c<=11by (VarArg) (VanillaId) $dEq5Fy (VarArg) (VanillaId) $dOrd7Gy (VarArg) (VanillaId) $dOrd8Hy (VarArg) (VanillaId) $dOrd9Iy (VarArg) (VanillaId) $dOrd10Jy (VarArg) (VanillaId) $dOrd11Ky (VarArg) (VanillaId) $dOrd12Ly (VarArg) (VanillaId) $dOrd13My (VarArg) (VanillaId) $dOrd14Ny (VarArg) (VanillaId) $dOrd15Oy (VarArg) (VanillaId) $dOrd16Py (VarArg) (VanillaId) $dOrd17Qy (VarArg) (VanillaId) $dOrd18Ry
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satcy =
                       (THUNK)
                         (App) (VanillaId) $c<11dy (VarArg) (VanillaId) $dEq5Fy (VarArg) (VanillaId) $dOrd7Gy (VarArg) (VanillaId) $dOrd8Hy (VarArg) (VanillaId) $dOrd9Iy (VarArg) (VanillaId) $dOrd10Jy (VarArg) (VanillaId) $dOrd11Ky (VarArg) (VanillaId) $dOrd12Ly (VarArg) (VanillaId) $dOrd13My (VarArg) (VanillaId) $dOrd14Ny (VarArg) (VanillaId) $dOrd15Oy (VarArg) (VanillaId) $dOrd16Py (VarArg) (VanillaId) $dOrd17Qy (VarArg) (VanillaId) $dOrd18Ry
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satey =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare11Ex (VarArg) (VanillaId) $dEq5Fy (VarArg) (VanillaId) $dOrd7Gy (VarArg) (VanillaId) $dOrd8Hy (VarArg) (VanillaId) $dOrd9Iy (VarArg) (VanillaId) $dOrd10Jy (VarArg) (VanillaId) $dOrd11Ky (VarArg) (VanillaId) $dOrd12Ly (VarArg) (VanillaId) $dOrd13My (VarArg) (VanillaId) $dOrd14Ny (VarArg) (VanillaId) $dOrd15Oy (VarArg) (VanillaId) $dOrd16Py (VarArg) (VanillaId) $dOrd17Qy (VarArg) (VanillaId) $dOrd18Ry (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5Fy ,(VarArg) (VanillaId) satey ,(VarArg) (VanillaId) satcy ,(VarArg) (VanillaId) satay ,(VarArg) (VanillaId) satYy ,(VarArg) (VanillaId) satWy ,(VarArg) (VanillaId) satUy ,(VarArg) (VanillaId) satSy]
  (VanillaId) $cmin11Ty =
  (FUN)
  [(VanillaId) $dEq5fy ,(VanillaId) $dOrd7gy ,(VanillaId) $dOrd8hy ,(VanillaId) $dOrd9iy ,(VanillaId) $dOrd10jy ,(VanillaId) $dOrd11ky ,(VanillaId) $dOrd12ly ,(VanillaId) $dOrd13my ,(VanillaId) $dOrd14ny ,(VanillaId) $dOrd15oy ,(VanillaId) $dOrd16py ,(VanillaId) $dOrd17qy ,(VanillaId) $dOrd18ry]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd19sy =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,) a5x b6x c7x d8x e9x f-x g_x hAy iBy jCy kDy lEy] APPFL.Classes.$fOrd(,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5fy (VarArg) (VanillaId) $dOrd7gy (VarArg) (VanillaId) $dOrd8hy (VarArg) (VanillaId) $dOrd9iy (VarArg) (VanillaId) $dOrd10jy (VarArg) (VanillaId) $dOrd11ky (VarArg) (VanillaId) $dOrd12ly (VarArg) (VanillaId) $dOrd13my (VarArg) (VanillaId) $dOrd14ny (VarArg) (VanillaId) $dOrd15oy (VarArg) (VanillaId) $dOrd16py (VarArg) (VanillaId) $dOrd17qy (VarArg) (VanillaId) $dOrd18ry
    in (Let) let
         (StgNonRec)
           (VanillaId) satty =
           (FUN)
           [(VanillaId) xuy ,(VanillaId) yvy]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd19sy (VarArg) (VanillaId) xuy (VarArg) (VanillaId) yvy = (VanillaId) wildwy
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) yvy
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xuy
       in (App) (VanillaId) satty
  (VanillaId) $cmax11Vy =
  (FUN)
  [(VanillaId) $dEq5xy ,(VanillaId) $dOrd7yy ,(VanillaId) $dOrd8zy ,(VanillaId) $dOrd90y ,(VanillaId) $dOrd101y ,(VanillaId) $dOrd112y ,(VanillaId) $dOrd123y ,(VanillaId) $dOrd134y ,(VanillaId) $dOrd145y ,(VanillaId) $dOrd156y ,(VanillaId) $dOrd167y ,(VanillaId) $dOrd178y ,(VanillaId) $dOrd189y]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd19-y =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,) a5x b6x c7x d8x e9x f-x g_x hAy iBy jCy kDy lEy] APPFL.Classes.$fOrd(,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5xy (VarArg) (VanillaId) $dOrd7yy (VarArg) (VanillaId) $dOrd8zy (VarArg) (VanillaId) $dOrd90y (VarArg) (VanillaId) $dOrd101y (VarArg) (VanillaId) $dOrd112y (VarArg) (VanillaId) $dOrd123y (VarArg) (VanillaId) $dOrd134y (VarArg) (VanillaId) $dOrd145y (VarArg) (VanillaId) $dOrd156y (VarArg) (VanillaId) $dOrd167y (VarArg) (VanillaId) $dOrd178y (VarArg) (VanillaId) $dOrd189y
    in (Let) let
         (StgNonRec)
           (VanillaId) sat_y =
           (FUN)
           [(VanillaId) xAz ,(VanillaId) yBz]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd19-y (VarArg) (VanillaId) xAz (VarArg) (VanillaId) yBz = (VanillaId) wildCz
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xAz
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yBz
       in (App) (VanillaId) sat_y
  (VanillaId) $c>=11Xy =
  (FUN)
  [(VanillaId) $dEq5Dz ,(VanillaId) $dOrd7Ez ,(VanillaId) $dOrd8Fz ,(VanillaId) $dOrd9Gz ,(VanillaId) $dOrd10Hz ,(VanillaId) $dOrd11Iz ,(VanillaId) $dOrd12Jz ,(VanillaId) $dOrd13Kz ,(VanillaId) $dOrd14Lz ,(VanillaId) $dOrd15Mz ,(VanillaId) $dOrd16Nz ,(VanillaId) $dOrd17Oz ,(VanillaId) $dOrd18Pz]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd19Qz =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,) a5x b6x c7x d8x e9x f-x g_x hAy iBy jCy kDy lEy] APPFL.Classes.$fOrd(,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5Dz (VarArg) (VanillaId) $dOrd7Ez (VarArg) (VanillaId) $dOrd8Fz (VarArg) (VanillaId) $dOrd9Gz (VarArg) (VanillaId) $dOrd10Hz (VarArg) (VanillaId) $dOrd11Iz (VarArg) (VanillaId) $dOrd12Jz (VarArg) (VanillaId) $dOrd13Kz (VarArg) (VanillaId) $dOrd14Lz (VarArg) (VanillaId) $dOrd15Mz (VarArg) (VanillaId) $dOrd16Nz (VarArg) (VanillaId) $dOrd17Oz (VarArg) (VanillaId) $dOrd18Pz
    in (Let) let
         (StgNonRec)
           (VanillaId) satRz =
           (FUN)
           [(VanillaId) xSz ,(VanillaId) yTz]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd19Qz (VarArg) (VanillaId) xSz (VarArg) (VanillaId) yTz = (VanillaId) wildUz
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satRz
  (VanillaId) $c>11Zy =
  (FUN)
  [(VanillaId) $dEq5Vz ,(VanillaId) $dOrd7Wz ,(VanillaId) $dOrd8Xz ,(VanillaId) $dOrd9Yz ,(VanillaId) $dOrd10Zz ,(VanillaId) $dOrd11az ,(VanillaId) $dOrd12bz ,(VanillaId) $dOrd13cz ,(VanillaId) $dOrd14dz ,(VanillaId) $dOrd15ez ,(VanillaId) $dOrd16fz ,(VanillaId) $dOrd17gz ,(VanillaId) $dOrd18hz]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd19iz =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,) a5x b6x c7x d8x e9x f-x g_x hAy iBy jCy kDy lEy] APPFL.Classes.$fOrd(,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5Vz (VarArg) (VanillaId) $dOrd7Wz (VarArg) (VanillaId) $dOrd8Xz (VarArg) (VanillaId) $dOrd9Yz (VarArg) (VanillaId) $dOrd10Zz (VarArg) (VanillaId) $dOrd11az (VarArg) (VanillaId) $dOrd12bz (VarArg) (VanillaId) $dOrd13cz (VarArg) (VanillaId) $dOrd14dz (VarArg) (VanillaId) $dOrd15ez (VarArg) (VanillaId) $dOrd16fz (VarArg) (VanillaId) $dOrd17gz (VarArg) (VanillaId) $dOrd18hz
    in (Let) let
         (StgNonRec)
           (VanillaId) satjz =
           (FUN)
           [(VanillaId) xkz ,(VanillaId) ylz]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd19iz (VarArg) (VanillaId) xkz (VarArg) (VanillaId) ylz = (VanillaId) wildmz
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satjz
  (VanillaId) $c<=11by =
  (FUN)
  [(VanillaId) $dEq5nz ,(VanillaId) $dOrd7oz ,(VanillaId) $dOrd8pz ,(VanillaId) $dOrd9qz ,(VanillaId) $dOrd10rz ,(VanillaId) $dOrd11sz ,(VanillaId) $dOrd12tz ,(VanillaId) $dOrd13uz ,(VanillaId) $dOrd14vz ,(VanillaId) $dOrd15wz ,(VanillaId) $dOrd16xz ,(VanillaId) $dOrd17yz ,(VanillaId) $dOrd18zz]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd190z =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,) a5x b6x c7x d8x e9x f-x g_x hAy iBy jCy kDy lEy] APPFL.Classes.$fOrd(,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5nz (VarArg) (VanillaId) $dOrd7oz (VarArg) (VanillaId) $dOrd8pz (VarArg) (VanillaId) $dOrd9qz (VarArg) (VanillaId) $dOrd10rz (VarArg) (VanillaId) $dOrd11sz (VarArg) (VanillaId) $dOrd12tz (VarArg) (VanillaId) $dOrd13uz (VarArg) (VanillaId) $dOrd14vz (VarArg) (VanillaId) $dOrd15wz (VarArg) (VanillaId) $dOrd16xz (VarArg) (VanillaId) $dOrd17yz (VarArg) (VanillaId) $dOrd18zz
    in (Let) let
         (StgNonRec)
           (VanillaId) sat1z =
           (FUN)
           [(VanillaId) x2z ,(VanillaId) y3z]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd190z (VarArg) (VanillaId) x2z (VarArg) (VanillaId) y3z = (VanillaId) wild4z
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) sat1z
  (VanillaId) $c<11dy =
  (FUN)
  [(VanillaId) $dEq55z ,(VanillaId) $dOrd76z ,(VanillaId) $dOrd87z ,(VanillaId) $dOrd98z ,(VanillaId) $dOrd109z ,(VanillaId) $dOrd11-z ,(VanillaId) $dOrd12_z ,(VanillaId) $dOrd13A0 ,(VanillaId) $dOrd14B0 ,(VanillaId) $dOrd15C0 ,(VanillaId) $dOrd16D0 ,(VanillaId) $dOrd17E0 ,(VanillaId) $dOrd18F0]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd19G0 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,) a5x b6x c7x d8x e9x f-x g_x hAy iBy jCy kDy lEy] APPFL.Classes.$fOrd(,,,,,,,,,,,) (VarArg) (VanillaId) $dEq55z (VarArg) (VanillaId) $dOrd76z (VarArg) (VanillaId) $dOrd87z (VarArg) (VanillaId) $dOrd98z (VarArg) (VanillaId) $dOrd109z (VarArg) (VanillaId) $dOrd11-z (VarArg) (VanillaId) $dOrd12_z (VarArg) (VanillaId) $dOrd13A0 (VarArg) (VanillaId) $dOrd14B0 (VarArg) (VanillaId) $dOrd15C0 (VarArg) (VanillaId) $dOrd16D0 (VarArg) (VanillaId) $dOrd17E0 (VarArg) (VanillaId) $dOrd18F0
    in (Let) let
         (StgNonRec)
           (VanillaId) satH0 =
           (FUN)
           [(VanillaId) xI0 ,(VanillaId) yJ0]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd19G0 (VarArg) (VanillaId) xI0 (VarArg) (VanillaId) yJ0 = (VanillaId) wildK0
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satH0
(StgNonRec)
  (VanillaId) $ccompare12L0 =
  (FUN)
  [(VanillaId) $dEq5M0 ,(VanillaId) $dOrd7N0 ,(VanillaId) $dOrd8O0 ,(VanillaId) $dOrd9P0 ,(VanillaId) $dOrd10Q0 ,(VanillaId) $dOrd11R0 ,(VanillaId) $dOrd12S0 ,(VanillaId) $dOrd13T0 ,(VanillaId) $dOrd14U0 ,(VanillaId) $dOrd15V0 ,(VanillaId) $dOrd16W0 ,(VanillaId) $dOrd17X0 ,(VanillaId) $dOrd18Y0 ,(VanillaId) $dOrd19Z0 ,(VanillaId) dsa0 ,(VanillaId) ds1b0]
    (Case) (App) (VanillaId) dsa0 = (VanillaId) wildc0
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,,,) (VanillaId) a14d0 (VanillaId) b1e0 (VanillaId) c1f0 (VanillaId) d1g0 (VanillaId) e1h0 (VanillaId) f1i0 (VanillaId) g1j0 (VanillaId) h1k0 (VanillaId) i1l0 (VanillaId) j1m0 (VanillaId) k1n0 (VanillaId) l1o0 (VanillaId) m1p0
          -> (Case) (App) (VanillaId) ds1b0 = (VanillaId) wild1q0
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,,,) (VanillaId) a15r0 (VanillaId) b2s0 (VanillaId) c2t0 (VanillaId) d2u0 (VanillaId) e2v0 (VanillaId) f2w0 (VanillaId) g2x0 (VanillaId) h2y0 (VanillaId) i2z0 (VanillaId) j200 (VanillaId) k210 (VanillaId) l220 (VanillaId) m230
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7N0 (VarArg) (VanillaId) a14d0 (VarArg) (VanillaId) a15r0 = (VanillaId) wild240
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild240
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8O0 (VarArg) (VanillaId) b1e0 (VarArg) (VanillaId) b2s0 = (VanillaId) wild350
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild350
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9P0 (VarArg) (VanillaId) c1f0 (VarArg) (VanillaId) c2t0 = (VanillaId) wild460
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild460
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10Q0 (VarArg) (VanillaId) d1g0 (VarArg) (VanillaId) d2u0 = (VanillaId) wild570
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild570
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11R0 (VarArg) (VanillaId) e1h0 (VarArg) (VanillaId) e2v0 = (VanillaId) wild680
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild680
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12S0 (VarArg) (VanillaId) f1i0 (VarArg) (VanillaId) f2w0 = (VanillaId) wild790
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild790
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13T0 (VarArg) (VanillaId) g1j0 (VarArg) (VanillaId) g2x0 = (VanillaId) wild8-0
                                                                              (AlgAlt)
                                                                                (DEFAULT) _
                                                                                  -> (App) (VanillaId) wild8-0
                                                                                (DataAlt) GHC.Types.EQ
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14U0 (VarArg) (VanillaId) h1k0 (VarArg) (VanillaId) h2y0 = (VanillaId) wild9_0
                                                                                       (AlgAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) wild9_0
                                                                                         (DataAlt) GHC.Types.EQ
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15V0 (VarArg) (VanillaId) i1l0 (VarArg) (VanillaId) i2z0 = (VanillaId) wild10A1
                                                                                                (AlgAlt)
                                                                                                  (DEFAULT) _
                                                                                                    -> (App) (VanillaId) wild10A1
                                                                                                  (DataAlt) GHC.Types.EQ
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16W0 (VarArg) (VanillaId) j1m0 (VarArg) (VanillaId) j200 = (VanillaId) wild11B1
                                                                                                         (AlgAlt)
                                                                                                           (DEFAULT) _
                                                                                                             -> (App) (VanillaId) wild11B1
                                                                                                           (DataAlt) GHC.Types.EQ
                                                                                                             -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd17X0 (VarArg) (VanillaId) k1n0 (VarArg) (VanillaId) k210 = (VanillaId) wild12C1
                                                                                                                  (AlgAlt)
                                                                                                                    (DEFAULT) _
                                                                                                                      -> (App) (VanillaId) wild12C1
                                                                                                                    (DataAlt) GHC.Types.EQ
                                                                                                                      -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd18Y0 (VarArg) (VanillaId) l1o0 (VarArg) (VanillaId) l220 = (VanillaId) wild13D1
                                                                                                                           (AlgAlt)
                                                                                                                             (DEFAULT) _
                                                                                                                               -> (App) (VanillaId) wild13D1
                                                                                                                             (DataAlt) GHC.Types.EQ
                                                                                                                               -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd19Z0 (VarArg) (VanillaId) m1p0 (VarArg) (VanillaId) m230
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,) aE1 bF1 cG1 dH1 eI1 fJ1 gK1 hL1 iM1 jN1 kO1 lP1 mQ1] APPFL.Classes.$fOrd(,,,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5R1 ,(VanillaId) $dOrd7S1 ,(VanillaId) $dOrd8T1 ,(VanillaId) $dOrd9U1 ,(VanillaId) $dOrd10V1 ,(VanillaId) $dOrd11W1 ,(VanillaId) $dOrd12X1 ,(VanillaId) $dOrd13Y1 ,(VanillaId) $dOrd14Z1 ,(VanillaId) $dOrd15a1 ,(VanillaId) $dOrd16b1 ,(VanillaId) $dOrd17c1 ,(VanillaId) $dOrd18d1 ,(VanillaId) $dOrd19e1]
    (Let) let
      (StgNonRec)
        (VanillaId) satf1 =
        (THUNK)
          (App) (VanillaId) $cmin12g1 (VarArg) (VanillaId) $dEq5R1 (VarArg) (VanillaId) $dOrd7S1 (VarArg) (VanillaId) $dOrd8T1 (VarArg) (VanillaId) $dOrd9U1 (VarArg) (VanillaId) $dOrd10V1 (VarArg) (VanillaId) $dOrd11W1 (VarArg) (VanillaId) $dOrd12X1 (VarArg) (VanillaId) $dOrd13Y1 (VarArg) (VanillaId) $dOrd14Z1 (VarArg) (VanillaId) $dOrd15a1 (VarArg) (VanillaId) $dOrd16b1 (VarArg) (VanillaId) $dOrd17c1 (VarArg) (VanillaId) $dOrd18d1 (VarArg) (VanillaId) $dOrd19e1
    in (Let) let
         (StgNonRec)
           (VanillaId) sath1 =
           (THUNK)
             (App) (VanillaId) $cmax12i1 (VarArg) (VanillaId) $dEq5R1 (VarArg) (VanillaId) $dOrd7S1 (VarArg) (VanillaId) $dOrd8T1 (VarArg) (VanillaId) $dOrd9U1 (VarArg) (VanillaId) $dOrd10V1 (VarArg) (VanillaId) $dOrd11W1 (VarArg) (VanillaId) $dOrd12X1 (VarArg) (VanillaId) $dOrd13Y1 (VarArg) (VanillaId) $dOrd14Z1 (VarArg) (VanillaId) $dOrd15a1 (VarArg) (VanillaId) $dOrd16b1 (VarArg) (VanillaId) $dOrd17c1 (VarArg) (VanillaId) $dOrd18d1 (VarArg) (VanillaId) $dOrd19e1
       in (Let) let
            (StgNonRec)
              (VanillaId) satj1 =
              (THUNK)
                (App) (VanillaId) $c>=12k1 (VarArg) (VanillaId) $dEq5R1 (VarArg) (VanillaId) $dOrd7S1 (VarArg) (VanillaId) $dOrd8T1 (VarArg) (VanillaId) $dOrd9U1 (VarArg) (VanillaId) $dOrd10V1 (VarArg) (VanillaId) $dOrd11W1 (VarArg) (VanillaId) $dOrd12X1 (VarArg) (VanillaId) $dOrd13Y1 (VarArg) (VanillaId) $dOrd14Z1 (VarArg) (VanillaId) $dOrd15a1 (VarArg) (VanillaId) $dOrd16b1 (VarArg) (VanillaId) $dOrd17c1 (VarArg) (VanillaId) $dOrd18d1 (VarArg) (VanillaId) $dOrd19e1
          in (Let) let
               (StgNonRec)
                 (VanillaId) satl1 =
                 (THUNK)
                   (App) (VanillaId) $c>12m1 (VarArg) (VanillaId) $dEq5R1 (VarArg) (VanillaId) $dOrd7S1 (VarArg) (VanillaId) $dOrd8T1 (VarArg) (VanillaId) $dOrd9U1 (VarArg) (VanillaId) $dOrd10V1 (VarArg) (VanillaId) $dOrd11W1 (VarArg) (VanillaId) $dOrd12X1 (VarArg) (VanillaId) $dOrd13Y1 (VarArg) (VanillaId) $dOrd14Z1 (VarArg) (VanillaId) $dOrd15a1 (VarArg) (VanillaId) $dOrd16b1 (VarArg) (VanillaId) $dOrd17c1 (VarArg) (VanillaId) $dOrd18d1 (VarArg) (VanillaId) $dOrd19e1
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satn1 =
                    (THUNK)
                      (App) (VanillaId) $c<=12o1 (VarArg) (VanillaId) $dEq5R1 (VarArg) (VanillaId) $dOrd7S1 (VarArg) (VanillaId) $dOrd8T1 (VarArg) (VanillaId) $dOrd9U1 (VarArg) (VanillaId) $dOrd10V1 (VarArg) (VanillaId) $dOrd11W1 (VarArg) (VanillaId) $dOrd12X1 (VarArg) (VanillaId) $dOrd13Y1 (VarArg) (VanillaId) $dOrd14Z1 (VarArg) (VanillaId) $dOrd15a1 (VarArg) (VanillaId) $dOrd16b1 (VarArg) (VanillaId) $dOrd17c1 (VarArg) (VanillaId) $dOrd18d1 (VarArg) (VanillaId) $dOrd19e1
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satp1 =
                       (THUNK)
                         (App) (VanillaId) $c<12q1 (VarArg) (VanillaId) $dEq5R1 (VarArg) (VanillaId) $dOrd7S1 (VarArg) (VanillaId) $dOrd8T1 (VarArg) (VanillaId) $dOrd9U1 (VarArg) (VanillaId) $dOrd10V1 (VarArg) (VanillaId) $dOrd11W1 (VarArg) (VanillaId) $dOrd12X1 (VarArg) (VanillaId) $dOrd13Y1 (VarArg) (VanillaId) $dOrd14Z1 (VarArg) (VanillaId) $dOrd15a1 (VarArg) (VanillaId) $dOrd16b1 (VarArg) (VanillaId) $dOrd17c1 (VarArg) (VanillaId) $dOrd18d1 (VarArg) (VanillaId) $dOrd19e1
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satr1 =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare12L0 (VarArg) (VanillaId) $dEq5R1 (VarArg) (VanillaId) $dOrd7S1 (VarArg) (VanillaId) $dOrd8T1 (VarArg) (VanillaId) $dOrd9U1 (VarArg) (VanillaId) $dOrd10V1 (VarArg) (VanillaId) $dOrd11W1 (VarArg) (VanillaId) $dOrd12X1 (VarArg) (VanillaId) $dOrd13Y1 (VarArg) (VanillaId) $dOrd14Z1 (VarArg) (VanillaId) $dOrd15a1 (VarArg) (VanillaId) $dOrd16b1 (VarArg) (VanillaId) $dOrd17c1 (VarArg) (VanillaId) $dOrd18d1 (VarArg) (VanillaId) $dOrd19e1 (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5R1 ,(VarArg) (VanillaId) satr1 ,(VarArg) (VanillaId) satp1 ,(VarArg) (VanillaId) satn1 ,(VarArg) (VanillaId) satl1 ,(VarArg) (VanillaId) satj1 ,(VarArg) (VanillaId) sath1 ,(VarArg) (VanillaId) satf1]
  (VanillaId) $cmin12g1 =
  (FUN)
  [(VanillaId) $dEq5s1 ,(VanillaId) $dOrd7t1 ,(VanillaId) $dOrd8u1 ,(VanillaId) $dOrd9v1 ,(VanillaId) $dOrd10w1 ,(VanillaId) $dOrd11x1 ,(VanillaId) $dOrd12y1 ,(VanillaId) $dOrd13z1 ,(VanillaId) $dOrd1401 ,(VanillaId) $dOrd1511 ,(VanillaId) $dOrd1621 ,(VanillaId) $dOrd1731 ,(VanillaId) $dOrd1841 ,(VanillaId) $dOrd1951]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd2061 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,) aE1 bF1 cG1 dH1 eI1 fJ1 gK1 hL1 iM1 jN1 kO1 lP1 mQ1] APPFL.Classes.$fOrd(,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5s1 (VarArg) (VanillaId) $dOrd7t1 (VarArg) (VanillaId) $dOrd8u1 (VarArg) (VanillaId) $dOrd9v1 (VarArg) (VanillaId) $dOrd10w1 (VarArg) (VanillaId) $dOrd11x1 (VarArg) (VanillaId) $dOrd12y1 (VarArg) (VanillaId) $dOrd13z1 (VarArg) (VanillaId) $dOrd1401 (VarArg) (VanillaId) $dOrd1511 (VarArg) (VanillaId) $dOrd1621 (VarArg) (VanillaId) $dOrd1731 (VarArg) (VanillaId) $dOrd1841 (VarArg) (VanillaId) $dOrd1951
    in (Let) let
         (StgNonRec)
           (VanillaId) sat71 =
           (FUN)
           [(VanillaId) x81 ,(VanillaId) y91]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd2061 (VarArg) (VanillaId) x81 (VarArg) (VanillaId) y91 = (VanillaId) wild-1
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) y91
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) x81
       in (App) (VanillaId) sat71
  (VanillaId) $cmax12i1 =
  (FUN)
  [(VanillaId) $dEq5_1 ,(VanillaId) $dOrd7A2 ,(VanillaId) $dOrd8B2 ,(VanillaId) $dOrd9C2 ,(VanillaId) $dOrd10D2 ,(VanillaId) $dOrd11E2 ,(VanillaId) $dOrd12F2 ,(VanillaId) $dOrd13G2 ,(VanillaId) $dOrd14H2 ,(VanillaId) $dOrd15I2 ,(VanillaId) $dOrd16J2 ,(VanillaId) $dOrd17K2 ,(VanillaId) $dOrd18L2 ,(VanillaId) $dOrd19M2]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd20N2 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,) aE1 bF1 cG1 dH1 eI1 fJ1 gK1 hL1 iM1 jN1 kO1 lP1 mQ1] APPFL.Classes.$fOrd(,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5_1 (VarArg) (VanillaId) $dOrd7A2 (VarArg) (VanillaId) $dOrd8B2 (VarArg) (VanillaId) $dOrd9C2 (VarArg) (VanillaId) $dOrd10D2 (VarArg) (VanillaId) $dOrd11E2 (VarArg) (VanillaId) $dOrd12F2 (VarArg) (VanillaId) $dOrd13G2 (VarArg) (VanillaId) $dOrd14H2 (VarArg) (VanillaId) $dOrd15I2 (VarArg) (VanillaId) $dOrd16J2 (VarArg) (VanillaId) $dOrd17K2 (VarArg) (VanillaId) $dOrd18L2 (VarArg) (VanillaId) $dOrd19M2
    in (Let) let
         (StgNonRec)
           (VanillaId) satO2 =
           (FUN)
           [(VanillaId) xP2 ,(VanillaId) yQ2]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd20N2 (VarArg) (VanillaId) xP2 (VarArg) (VanillaId) yQ2 = (VanillaId) wildR2
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xP2
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yQ2
       in (App) (VanillaId) satO2
  (VanillaId) $c>=12k1 =
  (FUN)
  [(VanillaId) $dEq5S2 ,(VanillaId) $dOrd7T2 ,(VanillaId) $dOrd8U2 ,(VanillaId) $dOrd9V2 ,(VanillaId) $dOrd10W2 ,(VanillaId) $dOrd11X2 ,(VanillaId) $dOrd12Y2 ,(VanillaId) $dOrd13Z2 ,(VanillaId) $dOrd14a2 ,(VanillaId) $dOrd15b2 ,(VanillaId) $dOrd16c2 ,(VanillaId) $dOrd17d2 ,(VanillaId) $dOrd18e2 ,(VanillaId) $dOrd19f2]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd20g2 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,) aE1 bF1 cG1 dH1 eI1 fJ1 gK1 hL1 iM1 jN1 kO1 lP1 mQ1] APPFL.Classes.$fOrd(,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5S2 (VarArg) (VanillaId) $dOrd7T2 (VarArg) (VanillaId) $dOrd8U2 (VarArg) (VanillaId) $dOrd9V2 (VarArg) (VanillaId) $dOrd10W2 (VarArg) (VanillaId) $dOrd11X2 (VarArg) (VanillaId) $dOrd12Y2 (VarArg) (VanillaId) $dOrd13Z2 (VarArg) (VanillaId) $dOrd14a2 (VarArg) (VanillaId) $dOrd15b2 (VarArg) (VanillaId) $dOrd16c2 (VarArg) (VanillaId) $dOrd17d2 (VarArg) (VanillaId) $dOrd18e2 (VarArg) (VanillaId) $dOrd19f2
    in (Let) let
         (StgNonRec)
           (VanillaId) sath2 =
           (FUN)
           [(VanillaId) xi2 ,(VanillaId) yj2]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd20g2 (VarArg) (VanillaId) xi2 (VarArg) (VanillaId) yj2 = (VanillaId) wildk2
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) sath2
  (VanillaId) $c>12m1 =
  (FUN)
  [(VanillaId) $dEq5l2 ,(VanillaId) $dOrd7m2 ,(VanillaId) $dOrd8n2 ,(VanillaId) $dOrd9o2 ,(VanillaId) $dOrd10p2 ,(VanillaId) $dOrd11q2 ,(VanillaId) $dOrd12r2 ,(VanillaId) $dOrd13s2 ,(VanillaId) $dOrd14t2 ,(VanillaId) $dOrd15u2 ,(VanillaId) $dOrd16v2 ,(VanillaId) $dOrd17w2 ,(VanillaId) $dOrd18x2 ,(VanillaId) $dOrd19y2]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd20z2 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,) aE1 bF1 cG1 dH1 eI1 fJ1 gK1 hL1 iM1 jN1 kO1 lP1 mQ1] APPFL.Classes.$fOrd(,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5l2 (VarArg) (VanillaId) $dOrd7m2 (VarArg) (VanillaId) $dOrd8n2 (VarArg) (VanillaId) $dOrd9o2 (VarArg) (VanillaId) $dOrd10p2 (VarArg) (VanillaId) $dOrd11q2 (VarArg) (VanillaId) $dOrd12r2 (VarArg) (VanillaId) $dOrd13s2 (VarArg) (VanillaId) $dOrd14t2 (VarArg) (VanillaId) $dOrd15u2 (VarArg) (VanillaId) $dOrd16v2 (VarArg) (VanillaId) $dOrd17w2 (VarArg) (VanillaId) $dOrd18x2 (VarArg) (VanillaId) $dOrd19y2
    in (Let) let
         (StgNonRec)
           (VanillaId) sat02 =
           (FUN)
           [(VanillaId) x12 ,(VanillaId) y22]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd20z2 (VarArg) (VanillaId) x12 (VarArg) (VanillaId) y22 = (VanillaId) wild32
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) sat02
  (VanillaId) $c<=12o1 =
  (FUN)
  [(VanillaId) $dEq542 ,(VanillaId) $dOrd752 ,(VanillaId) $dOrd862 ,(VanillaId) $dOrd972 ,(VanillaId) $dOrd1082 ,(VanillaId) $dOrd1192 ,(VanillaId) $dOrd12-2 ,(VanillaId) $dOrd13_2 ,(VanillaId) $dOrd14A3 ,(VanillaId) $dOrd15B3 ,(VanillaId) $dOrd16C3 ,(VanillaId) $dOrd17D3 ,(VanillaId) $dOrd18E3 ,(VanillaId) $dOrd19F3]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd20G3 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,) aE1 bF1 cG1 dH1 eI1 fJ1 gK1 hL1 iM1 jN1 kO1 lP1 mQ1] APPFL.Classes.$fOrd(,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq542 (VarArg) (VanillaId) $dOrd752 (VarArg) (VanillaId) $dOrd862 (VarArg) (VanillaId) $dOrd972 (VarArg) (VanillaId) $dOrd1082 (VarArg) (VanillaId) $dOrd1192 (VarArg) (VanillaId) $dOrd12-2 (VarArg) (VanillaId) $dOrd13_2 (VarArg) (VanillaId) $dOrd14A3 (VarArg) (VanillaId) $dOrd15B3 (VarArg) (VanillaId) $dOrd16C3 (VarArg) (VanillaId) $dOrd17D3 (VarArg) (VanillaId) $dOrd18E3 (VarArg) (VanillaId) $dOrd19F3
    in (Let) let
         (StgNonRec)
           (VanillaId) satH3 =
           (FUN)
           [(VanillaId) xI3 ,(VanillaId) yJ3]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd20G3 (VarArg) (VanillaId) xI3 (VarArg) (VanillaId) yJ3 = (VanillaId) wildK3
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satH3
  (VanillaId) $c<12q1 =
  (FUN)
  [(VanillaId) $dEq5L3 ,(VanillaId) $dOrd7M3 ,(VanillaId) $dOrd8N3 ,(VanillaId) $dOrd9O3 ,(VanillaId) $dOrd10P3 ,(VanillaId) $dOrd11Q3 ,(VanillaId) $dOrd12R3 ,(VanillaId) $dOrd13S3 ,(VanillaId) $dOrd14T3 ,(VanillaId) $dOrd15U3 ,(VanillaId) $dOrd16V3 ,(VanillaId) $dOrd17W3 ,(VanillaId) $dOrd18X3 ,(VanillaId) $dOrd19Y3]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd20Z3 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,) aE1 bF1 cG1 dH1 eI1 fJ1 gK1 hL1 iM1 jN1 kO1 lP1 mQ1] APPFL.Classes.$fOrd(,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5L3 (VarArg) (VanillaId) $dOrd7M3 (VarArg) (VanillaId) $dOrd8N3 (VarArg) (VanillaId) $dOrd9O3 (VarArg) (VanillaId) $dOrd10P3 (VarArg) (VanillaId) $dOrd11Q3 (VarArg) (VanillaId) $dOrd12R3 (VarArg) (VanillaId) $dOrd13S3 (VarArg) (VanillaId) $dOrd14T3 (VarArg) (VanillaId) $dOrd15U3 (VarArg) (VanillaId) $dOrd16V3 (VarArg) (VanillaId) $dOrd17W3 (VarArg) (VanillaId) $dOrd18X3 (VarArg) (VanillaId) $dOrd19Y3
    in (Let) let
         (StgNonRec)
           (VanillaId) sata3 =
           (FUN)
           [(VanillaId) xb3 ,(VanillaId) yc3]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd20Z3 (VarArg) (VanillaId) xb3 (VarArg) (VanillaId) yc3 = (VanillaId) wildd3
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) sata3
(StgNonRec)
  (VanillaId) $ccompare13e3 =
  (FUN)
  [(VanillaId) $dEq5f3 ,(VanillaId) $dOrd7g3 ,(VanillaId) $dOrd8h3 ,(VanillaId) $dOrd9i3 ,(VanillaId) $dOrd10j3 ,(VanillaId) $dOrd11k3 ,(VanillaId) $dOrd12l3 ,(VanillaId) $dOrd13m3 ,(VanillaId) $dOrd14n3 ,(VanillaId) $dOrd15o3 ,(VanillaId) $dOrd16p3 ,(VanillaId) $dOrd17q3 ,(VanillaId) $dOrd18r3 ,(VanillaId) $dOrd19s3 ,(VanillaId) $dOrd20t3 ,(VanillaId) dsu3 ,(VanillaId) ds1v3]
    (Case) (App) (VanillaId) dsu3 = (VanillaId) wildw3
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,,,,) (VanillaId) a14x3 (VanillaId) b1y3 (VanillaId) c1z3 (VanillaId) d103 (VanillaId) e113 (VanillaId) f123 (VanillaId) g133 (VanillaId) h143 (VanillaId) i153 (VanillaId) j163 (VanillaId) k173 (VanillaId) l183 (VanillaId) m193 (VanillaId) n1-3
          -> (Case) (App) (VanillaId) ds1v3 = (VanillaId) wild1_3
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,,,,) (VanillaId) a15A4 (VanillaId) b2B4 (VanillaId) c2C4 (VanillaId) d2D4 (VanillaId) e2E4 (VanillaId) f2F4 (VanillaId) g2G4 (VanillaId) h2H4 (VanillaId) i2I4 (VanillaId) j2J4 (VanillaId) k2K4 (VanillaId) l2L4 (VanillaId) m2M4 (VanillaId) n2N4
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7g3 (VarArg) (VanillaId) a14x3 (VarArg) (VanillaId) a15A4 = (VanillaId) wild2O4
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2O4
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8h3 (VarArg) (VanillaId) b1y3 (VarArg) (VanillaId) b2B4 = (VanillaId) wild3P4
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3P4
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9i3 (VarArg) (VanillaId) c1z3 (VarArg) (VanillaId) c2C4 = (VanillaId) wild4Q4
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4Q4
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10j3 (VarArg) (VanillaId) d103 (VarArg) (VanillaId) d2D4 = (VanillaId) wild5R4
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5R4
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11k3 (VarArg) (VanillaId) e113 (VarArg) (VanillaId) e2E4 = (VanillaId) wild6S4
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild6S4
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12l3 (VarArg) (VanillaId) f123 (VarArg) (VanillaId) f2F4 = (VanillaId) wild7T4
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild7T4
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13m3 (VarArg) (VanillaId) g133 (VarArg) (VanillaId) g2G4 = (VanillaId) wild8U4
                                                                              (AlgAlt)
                                                                                (DEFAULT) _
                                                                                  -> (App) (VanillaId) wild8U4
                                                                                (DataAlt) GHC.Types.EQ
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14n3 (VarArg) (VanillaId) h143 (VarArg) (VanillaId) h2H4 = (VanillaId) wild9V4
                                                                                       (AlgAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) wild9V4
                                                                                         (DataAlt) GHC.Types.EQ
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15o3 (VarArg) (VanillaId) i153 (VarArg) (VanillaId) i2I4 = (VanillaId) wild10W4
                                                                                                (AlgAlt)
                                                                                                  (DEFAULT) _
                                                                                                    -> (App) (VanillaId) wild10W4
                                                                                                  (DataAlt) GHC.Types.EQ
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16p3 (VarArg) (VanillaId) j163 (VarArg) (VanillaId) j2J4 = (VanillaId) wild11X4
                                                                                                         (AlgAlt)
                                                                                                           (DEFAULT) _
                                                                                                             -> (App) (VanillaId) wild11X4
                                                                                                           (DataAlt) GHC.Types.EQ
                                                                                                             -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd17q3 (VarArg) (VanillaId) k173 (VarArg) (VanillaId) k2K4 = (VanillaId) wild12Y4
                                                                                                                  (AlgAlt)
                                                                                                                    (DEFAULT) _
                                                                                                                      -> (App) (VanillaId) wild12Y4
                                                                                                                    (DataAlt) GHC.Types.EQ
                                                                                                                      -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd18r3 (VarArg) (VanillaId) l183 (VarArg) (VanillaId) l2L4 = (VanillaId) wild13Z4
                                                                                                                           (AlgAlt)
                                                                                                                             (DEFAULT) _
                                                                                                                               -> (App) (VanillaId) wild13Z4
                                                                                                                             (DataAlt) GHC.Types.EQ
                                                                                                                               -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd19s3 (VarArg) (VanillaId) m193 (VarArg) (VanillaId) m2M4 = (VanillaId) wild14a4
                                                                                                                                    (AlgAlt)
                                                                                                                                      (DEFAULT) _
                                                                                                                                        -> (App) (VanillaId) wild14a4
                                                                                                                                      (DataAlt) GHC.Types.EQ
                                                                                                                                        -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd20t3 (VarArg) (VanillaId) n1-3 (VarArg) (VanillaId) n2N4
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,) ab4 bc4 cd4 de4 ef4 fg4 gh4 hi4 ij4 jk4 kl4 lm4 mn4 no4] APPFL.Classes.$fOrd(,,,,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5p4 ,(VanillaId) $dOrd7q4 ,(VanillaId) $dOrd8r4 ,(VanillaId) $dOrd9s4 ,(VanillaId) $dOrd10t4 ,(VanillaId) $dOrd11u4 ,(VanillaId) $dOrd12v4 ,(VanillaId) $dOrd13w4 ,(VanillaId) $dOrd14x4 ,(VanillaId) $dOrd15y4 ,(VanillaId) $dOrd16z4 ,(VanillaId) $dOrd1704 ,(VanillaId) $dOrd1814 ,(VanillaId) $dOrd1924 ,(VanillaId) $dOrd2034]
    (Let) let
      (StgNonRec)
        (VanillaId) sat44 =
        (THUNK)
          (App) (VanillaId) $cmin1354 (VarArg) (VanillaId) $dEq5p4 (VarArg) (VanillaId) $dOrd7q4 (VarArg) (VanillaId) $dOrd8r4 (VarArg) (VanillaId) $dOrd9s4 (VarArg) (VanillaId) $dOrd10t4 (VarArg) (VanillaId) $dOrd11u4 (VarArg) (VanillaId) $dOrd12v4 (VarArg) (VanillaId) $dOrd13w4 (VarArg) (VanillaId) $dOrd14x4 (VarArg) (VanillaId) $dOrd15y4 (VarArg) (VanillaId) $dOrd16z4 (VarArg) (VanillaId) $dOrd1704 (VarArg) (VanillaId) $dOrd1814 (VarArg) (VanillaId) $dOrd1924 (VarArg) (VanillaId) $dOrd2034
    in (Let) let
         (StgNonRec)
           (VanillaId) sat64 =
           (THUNK)
             (App) (VanillaId) $cmax1374 (VarArg) (VanillaId) $dEq5p4 (VarArg) (VanillaId) $dOrd7q4 (VarArg) (VanillaId) $dOrd8r4 (VarArg) (VanillaId) $dOrd9s4 (VarArg) (VanillaId) $dOrd10t4 (VarArg) (VanillaId) $dOrd11u4 (VarArg) (VanillaId) $dOrd12v4 (VarArg) (VanillaId) $dOrd13w4 (VarArg) (VanillaId) $dOrd14x4 (VarArg) (VanillaId) $dOrd15y4 (VarArg) (VanillaId) $dOrd16z4 (VarArg) (VanillaId) $dOrd1704 (VarArg) (VanillaId) $dOrd1814 (VarArg) (VanillaId) $dOrd1924 (VarArg) (VanillaId) $dOrd2034
       in (Let) let
            (StgNonRec)
              (VanillaId) sat84 =
              (THUNK)
                (App) (VanillaId) $c>=1394 (VarArg) (VanillaId) $dEq5p4 (VarArg) (VanillaId) $dOrd7q4 (VarArg) (VanillaId) $dOrd8r4 (VarArg) (VanillaId) $dOrd9s4 (VarArg) (VanillaId) $dOrd10t4 (VarArg) (VanillaId) $dOrd11u4 (VarArg) (VanillaId) $dOrd12v4 (VarArg) (VanillaId) $dOrd13w4 (VarArg) (VanillaId) $dOrd14x4 (VarArg) (VanillaId) $dOrd15y4 (VarArg) (VanillaId) $dOrd16z4 (VarArg) (VanillaId) $dOrd1704 (VarArg) (VanillaId) $dOrd1814 (VarArg) (VanillaId) $dOrd1924 (VarArg) (VanillaId) $dOrd2034
          in (Let) let
               (StgNonRec)
                 (VanillaId) sat-4 =
                 (THUNK)
                   (App) (VanillaId) $c>13_4 (VarArg) (VanillaId) $dEq5p4 (VarArg) (VanillaId) $dOrd7q4 (VarArg) (VanillaId) $dOrd8r4 (VarArg) (VanillaId) $dOrd9s4 (VarArg) (VanillaId) $dOrd10t4 (VarArg) (VanillaId) $dOrd11u4 (VarArg) (VanillaId) $dOrd12v4 (VarArg) (VanillaId) $dOrd13w4 (VarArg) (VanillaId) $dOrd14x4 (VarArg) (VanillaId) $dOrd15y4 (VarArg) (VanillaId) $dOrd16z4 (VarArg) (VanillaId) $dOrd1704 (VarArg) (VanillaId) $dOrd1814 (VarArg) (VanillaId) $dOrd1924 (VarArg) (VanillaId) $dOrd2034
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satA5 =
                    (THUNK)
                      (App) (VanillaId) $c<=13B5 (VarArg) (VanillaId) $dEq5p4 (VarArg) (VanillaId) $dOrd7q4 (VarArg) (VanillaId) $dOrd8r4 (VarArg) (VanillaId) $dOrd9s4 (VarArg) (VanillaId) $dOrd10t4 (VarArg) (VanillaId) $dOrd11u4 (VarArg) (VanillaId) $dOrd12v4 (VarArg) (VanillaId) $dOrd13w4 (VarArg) (VanillaId) $dOrd14x4 (VarArg) (VanillaId) $dOrd15y4 (VarArg) (VanillaId) $dOrd16z4 (VarArg) (VanillaId) $dOrd1704 (VarArg) (VanillaId) $dOrd1814 (VarArg) (VanillaId) $dOrd1924 (VarArg) (VanillaId) $dOrd2034
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satC5 =
                       (THUNK)
                         (App) (VanillaId) $c<13D5 (VarArg) (VanillaId) $dEq5p4 (VarArg) (VanillaId) $dOrd7q4 (VarArg) (VanillaId) $dOrd8r4 (VarArg) (VanillaId) $dOrd9s4 (VarArg) (VanillaId) $dOrd10t4 (VarArg) (VanillaId) $dOrd11u4 (VarArg) (VanillaId) $dOrd12v4 (VarArg) (VanillaId) $dOrd13w4 (VarArg) (VanillaId) $dOrd14x4 (VarArg) (VanillaId) $dOrd15y4 (VarArg) (VanillaId) $dOrd16z4 (VarArg) (VanillaId) $dOrd1704 (VarArg) (VanillaId) $dOrd1814 (VarArg) (VanillaId) $dOrd1924 (VarArg) (VanillaId) $dOrd2034
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satE5 =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare13e3 (VarArg) (VanillaId) $dEq5p4 (VarArg) (VanillaId) $dOrd7q4 (VarArg) (VanillaId) $dOrd8r4 (VarArg) (VanillaId) $dOrd9s4 (VarArg) (VanillaId) $dOrd10t4 (VarArg) (VanillaId) $dOrd11u4 (VarArg) (VanillaId) $dOrd12v4 (VarArg) (VanillaId) $dOrd13w4 (VarArg) (VanillaId) $dOrd14x4 (VarArg) (VanillaId) $dOrd15y4 (VarArg) (VanillaId) $dOrd16z4 (VarArg) (VanillaId) $dOrd1704 (VarArg) (VanillaId) $dOrd1814 (VarArg) (VanillaId) $dOrd1924 (VarArg) (VanillaId) $dOrd2034 (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5p4 ,(VarArg) (VanillaId) satE5 ,(VarArg) (VanillaId) satC5 ,(VarArg) (VanillaId) satA5 ,(VarArg) (VanillaId) sat-4 ,(VarArg) (VanillaId) sat84 ,(VarArg) (VanillaId) sat64 ,(VarArg) (VanillaId) sat44]
  (VanillaId) $cmin1354 =
  (FUN)
  [(VanillaId) $dEq5F5 ,(VanillaId) $dOrd7G5 ,(VanillaId) $dOrd8H5 ,(VanillaId) $dOrd9I5 ,(VanillaId) $dOrd10J5 ,(VanillaId) $dOrd11K5 ,(VanillaId) $dOrd12L5 ,(VanillaId) $dOrd13M5 ,(VanillaId) $dOrd14N5 ,(VanillaId) $dOrd15O5 ,(VanillaId) $dOrd16P5 ,(VanillaId) $dOrd17Q5 ,(VanillaId) $dOrd18R5 ,(VanillaId) $dOrd19S5 ,(VanillaId) $dOrd20T5]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd21U5 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,) ab4 bc4 cd4 de4 ef4 fg4 gh4 hi4 ij4 jk4 kl4 lm4 mn4 no4] APPFL.Classes.$fOrd(,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5F5 (VarArg) (VanillaId) $dOrd7G5 (VarArg) (VanillaId) $dOrd8H5 (VarArg) (VanillaId) $dOrd9I5 (VarArg) (VanillaId) $dOrd10J5 (VarArg) (VanillaId) $dOrd11K5 (VarArg) (VanillaId) $dOrd12L5 (VarArg) (VanillaId) $dOrd13M5 (VarArg) (VanillaId) $dOrd14N5 (VarArg) (VanillaId) $dOrd15O5 (VarArg) (VanillaId) $dOrd16P5 (VarArg) (VanillaId) $dOrd17Q5 (VarArg) (VanillaId) $dOrd18R5 (VarArg) (VanillaId) $dOrd19S5 (VarArg) (VanillaId) $dOrd20T5
    in (Let) let
         (StgNonRec)
           (VanillaId) satV5 =
           (FUN)
           [(VanillaId) xW5 ,(VanillaId) yX5]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd21U5 (VarArg) (VanillaId) xW5 (VarArg) (VanillaId) yX5 = (VanillaId) wildY5
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) yX5
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) xW5
       in (App) (VanillaId) satV5
  (VanillaId) $cmax1374 =
  (FUN)
  [(VanillaId) $dEq5Z5 ,(VanillaId) $dOrd7a5 ,(VanillaId) $dOrd8b5 ,(VanillaId) $dOrd9c5 ,(VanillaId) $dOrd10d5 ,(VanillaId) $dOrd11e5 ,(VanillaId) $dOrd12f5 ,(VanillaId) $dOrd13g5 ,(VanillaId) $dOrd14h5 ,(VanillaId) $dOrd15i5 ,(VanillaId) $dOrd16j5 ,(VanillaId) $dOrd17k5 ,(VanillaId) $dOrd18l5 ,(VanillaId) $dOrd19m5 ,(VanillaId) $dOrd20n5]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd21o5 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,) ab4 bc4 cd4 de4 ef4 fg4 gh4 hi4 ij4 jk4 kl4 lm4 mn4 no4] APPFL.Classes.$fOrd(,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5Z5 (VarArg) (VanillaId) $dOrd7a5 (VarArg) (VanillaId) $dOrd8b5 (VarArg) (VanillaId) $dOrd9c5 (VarArg) (VanillaId) $dOrd10d5 (VarArg) (VanillaId) $dOrd11e5 (VarArg) (VanillaId) $dOrd12f5 (VarArg) (VanillaId) $dOrd13g5 (VarArg) (VanillaId) $dOrd14h5 (VarArg) (VanillaId) $dOrd15i5 (VarArg) (VanillaId) $dOrd16j5 (VarArg) (VanillaId) $dOrd17k5 (VarArg) (VanillaId) $dOrd18l5 (VarArg) (VanillaId) $dOrd19m5 (VarArg) (VanillaId) $dOrd20n5
    in (Let) let
         (StgNonRec)
           (VanillaId) satp5 =
           (FUN)
           [(VanillaId) xq5 ,(VanillaId) yr5]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd21o5 (VarArg) (VanillaId) xq5 (VarArg) (VanillaId) yr5 = (VanillaId) wilds5
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xq5
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yr5
       in (App) (VanillaId) satp5
  (VanillaId) $c>=1394 =
  (FUN)
  [(VanillaId) $dEq5t5 ,(VanillaId) $dOrd7u5 ,(VanillaId) $dOrd8v5 ,(VanillaId) $dOrd9w5 ,(VanillaId) $dOrd10x5 ,(VanillaId) $dOrd11y5 ,(VanillaId) $dOrd12z5 ,(VanillaId) $dOrd1305 ,(VanillaId) $dOrd1415 ,(VanillaId) $dOrd1525 ,(VanillaId) $dOrd1635 ,(VanillaId) $dOrd1745 ,(VanillaId) $dOrd1855 ,(VanillaId) $dOrd1965 ,(VanillaId) $dOrd2075]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd2185 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,) ab4 bc4 cd4 de4 ef4 fg4 gh4 hi4 ij4 jk4 kl4 lm4 mn4 no4] APPFL.Classes.$fOrd(,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5t5 (VarArg) (VanillaId) $dOrd7u5 (VarArg) (VanillaId) $dOrd8v5 (VarArg) (VanillaId) $dOrd9w5 (VarArg) (VanillaId) $dOrd10x5 (VarArg) (VanillaId) $dOrd11y5 (VarArg) (VanillaId) $dOrd12z5 (VarArg) (VanillaId) $dOrd1305 (VarArg) (VanillaId) $dOrd1415 (VarArg) (VanillaId) $dOrd1525 (VarArg) (VanillaId) $dOrd1635 (VarArg) (VanillaId) $dOrd1745 (VarArg) (VanillaId) $dOrd1855 (VarArg) (VanillaId) $dOrd1965 (VarArg) (VanillaId) $dOrd2075
    in (Let) let
         (StgNonRec)
           (VanillaId) sat95 =
           (FUN)
           [(VanillaId) x-5 ,(VanillaId) y_5]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd2185 (VarArg) (VanillaId) x-5 (VarArg) (VanillaId) y_5 = (VanillaId) wildA6
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) sat95
  (VanillaId) $c>13_4 =
  (FUN)
  [(VanillaId) $dEq5B6 ,(VanillaId) $dOrd7C6 ,(VanillaId) $dOrd8D6 ,(VanillaId) $dOrd9E6 ,(VanillaId) $dOrd10F6 ,(VanillaId) $dOrd11G6 ,(VanillaId) $dOrd12H6 ,(VanillaId) $dOrd13I6 ,(VanillaId) $dOrd14J6 ,(VanillaId) $dOrd15K6 ,(VanillaId) $dOrd16L6 ,(VanillaId) $dOrd17M6 ,(VanillaId) $dOrd18N6 ,(VanillaId) $dOrd19O6 ,(VanillaId) $dOrd20P6]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd21Q6 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,) ab4 bc4 cd4 de4 ef4 fg4 gh4 hi4 ij4 jk4 kl4 lm4 mn4 no4] APPFL.Classes.$fOrd(,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5B6 (VarArg) (VanillaId) $dOrd7C6 (VarArg) (VanillaId) $dOrd8D6 (VarArg) (VanillaId) $dOrd9E6 (VarArg) (VanillaId) $dOrd10F6 (VarArg) (VanillaId) $dOrd11G6 (VarArg) (VanillaId) $dOrd12H6 (VarArg) (VanillaId) $dOrd13I6 (VarArg) (VanillaId) $dOrd14J6 (VarArg) (VanillaId) $dOrd15K6 (VarArg) (VanillaId) $dOrd16L6 (VarArg) (VanillaId) $dOrd17M6 (VarArg) (VanillaId) $dOrd18N6 (VarArg) (VanillaId) $dOrd19O6 (VarArg) (VanillaId) $dOrd20P6
    in (Let) let
         (StgNonRec)
           (VanillaId) satR6 =
           (FUN)
           [(VanillaId) xS6 ,(VanillaId) yT6]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd21Q6 (VarArg) (VanillaId) xS6 (VarArg) (VanillaId) yT6 = (VanillaId) wildU6
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satR6
  (VanillaId) $c<=13B5 =
  (FUN)
  [(VanillaId) $dEq5V6 ,(VanillaId) $dOrd7W6 ,(VanillaId) $dOrd8X6 ,(VanillaId) $dOrd9Y6 ,(VanillaId) $dOrd10Z6 ,(VanillaId) $dOrd11a6 ,(VanillaId) $dOrd12b6 ,(VanillaId) $dOrd13c6 ,(VanillaId) $dOrd14d6 ,(VanillaId) $dOrd15e6 ,(VanillaId) $dOrd16f6 ,(VanillaId) $dOrd17g6 ,(VanillaId) $dOrd18h6 ,(VanillaId) $dOrd19i6 ,(VanillaId) $dOrd20j6]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd21k6 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,) ab4 bc4 cd4 de4 ef4 fg4 gh4 hi4 ij4 jk4 kl4 lm4 mn4 no4] APPFL.Classes.$fOrd(,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5V6 (VarArg) (VanillaId) $dOrd7W6 (VarArg) (VanillaId) $dOrd8X6 (VarArg) (VanillaId) $dOrd9Y6 (VarArg) (VanillaId) $dOrd10Z6 (VarArg) (VanillaId) $dOrd11a6 (VarArg) (VanillaId) $dOrd12b6 (VarArg) (VanillaId) $dOrd13c6 (VarArg) (VanillaId) $dOrd14d6 (VarArg) (VanillaId) $dOrd15e6 (VarArg) (VanillaId) $dOrd16f6 (VarArg) (VanillaId) $dOrd17g6 (VarArg) (VanillaId) $dOrd18h6 (VarArg) (VanillaId) $dOrd19i6 (VarArg) (VanillaId) $dOrd20j6
    in (Let) let
         (StgNonRec)
           (VanillaId) satl6 =
           (FUN)
           [(VanillaId) xm6 ,(VanillaId) yn6]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd21k6 (VarArg) (VanillaId) xm6 (VarArg) (VanillaId) yn6 = (VanillaId) wildo6
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satl6
  (VanillaId) $c<13D5 =
  (FUN)
  [(VanillaId) $dEq5p6 ,(VanillaId) $dOrd7q6 ,(VanillaId) $dOrd8r6 ,(VanillaId) $dOrd9s6 ,(VanillaId) $dOrd10t6 ,(VanillaId) $dOrd11u6 ,(VanillaId) $dOrd12v6 ,(VanillaId) $dOrd13w6 ,(VanillaId) $dOrd14x6 ,(VanillaId) $dOrd15y6 ,(VanillaId) $dOrd16z6 ,(VanillaId) $dOrd1706 ,(VanillaId) $dOrd1816 ,(VanillaId) $dOrd1926 ,(VanillaId) $dOrd2036]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd2146 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,) ab4 bc4 cd4 de4 ef4 fg4 gh4 hi4 ij4 jk4 kl4 lm4 mn4 no4] APPFL.Classes.$fOrd(,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5p6 (VarArg) (VanillaId) $dOrd7q6 (VarArg) (VanillaId) $dOrd8r6 (VarArg) (VanillaId) $dOrd9s6 (VarArg) (VanillaId) $dOrd10t6 (VarArg) (VanillaId) $dOrd11u6 (VarArg) (VanillaId) $dOrd12v6 (VarArg) (VanillaId) $dOrd13w6 (VarArg) (VanillaId) $dOrd14x6 (VarArg) (VanillaId) $dOrd15y6 (VarArg) (VanillaId) $dOrd16z6 (VarArg) (VanillaId) $dOrd1706 (VarArg) (VanillaId) $dOrd1816 (VarArg) (VanillaId) $dOrd1926 (VarArg) (VanillaId) $dOrd2036
    in (Let) let
         (StgNonRec)
           (VanillaId) sat56 =
           (FUN)
           [(VanillaId) x66 ,(VanillaId) y76]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd2146 (VarArg) (VanillaId) x66 (VarArg) (VanillaId) y76 = (VanillaId) wild86
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) sat56
(StgNonRec)
  (VanillaId) $ccompare1496 =
  (FUN)
  [(VanillaId) $dEq5-6 ,(VanillaId) $dOrd7_6 ,(VanillaId) $dOrd8A7 ,(VanillaId) $dOrd9B7 ,(VanillaId) $dOrd10C7 ,(VanillaId) $dOrd11D7 ,(VanillaId) $dOrd12E7 ,(VanillaId) $dOrd13F7 ,(VanillaId) $dOrd14G7 ,(VanillaId) $dOrd15H7 ,(VanillaId) $dOrd16I7 ,(VanillaId) $dOrd17J7 ,(VanillaId) $dOrd18K7 ,(VanillaId) $dOrd19L7 ,(VanillaId) $dOrd20M7 ,(VanillaId) $dOrd21N7 ,(VanillaId) dsO7 ,(VanillaId) ds1P7]
    (Case) (App) (VanillaId) dsO7 = (VanillaId) wildQ7
      (AlgAlt)
        (DataAlt) GHC.Tuple.(,,,,,,,,,,,,,,) (VanillaId) a14R7 (VanillaId) b1S7 (VanillaId) c1T7 (VanillaId) d1U7 (VanillaId) e1V7 (VanillaId) f1W7 (VanillaId) g1X7 (VanillaId) h1Y7 (VanillaId) i1Z7 (VanillaId) j1a7 (VanillaId) k1b7 (VanillaId) l1c7 (VanillaId) m1d7 (VanillaId) n1e7 (VanillaId) o1f7
          -> (Case) (App) (VanillaId) ds1P7 = (VanillaId) wild1g7
               (AlgAlt)
                 (DataAlt) GHC.Tuple.(,,,,,,,,,,,,,,) (VanillaId) a15h7 (VanillaId) b2i7 (VanillaId) c2j7 (VanillaId) d2k7 (VanillaId) e2l7 (VanillaId) f2m7 (VanillaId) g2n7 (VanillaId) h2o7 (VanillaId) i2p7 (VanillaId) j2q7 (VanillaId) k2r7 (VanillaId) l2s7 (VanillaId) m2t7 (VanillaId) n2u7 (VanillaId) o2v7
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7_6 (VarArg) (VanillaId) a14R7 (VarArg) (VanillaId) a15h7 = (VanillaId) wild2w7
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild2w7
                          (DataAlt) GHC.Types.EQ
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8A7 (VarArg) (VanillaId) b1S7 (VarArg) (VanillaId) b2i7 = (VanillaId) wild3x7
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild3x7
                                   (DataAlt) GHC.Types.EQ
                                     -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd9B7 (VarArg) (VanillaId) c1T7 (VarArg) (VanillaId) c2j7 = (VanillaId) wild4y7
                                          (AlgAlt)
                                            (DEFAULT) _ -> (App) (VanillaId) wild4y7
                                            (DataAlt) GHC.Types.EQ
                                              -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd10C7 (VarArg) (VanillaId) d1U7 (VarArg) (VanillaId) d2k7 = (VanillaId) wild5z7
                                                   (AlgAlt)
                                                     (DEFAULT) _ -> (App) (VanillaId) wild5z7
                                                     (DataAlt) GHC.Types.EQ
                                                       -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd11D7 (VarArg) (VanillaId) e1V7 (VarArg) (VanillaId) e2l7 = (VanillaId) wild607
                                                            (AlgAlt)
                                                              (DEFAULT) _
                                                                -> (App) (VanillaId) wild607
                                                              (DataAlt) GHC.Types.EQ
                                                                -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd12E7 (VarArg) (VanillaId) f1W7 (VarArg) (VanillaId) f2m7 = (VanillaId) wild717
                                                                     (AlgAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) wild717
                                                                       (DataAlt) GHC.Types.EQ
                                                                         -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd13F7 (VarArg) (VanillaId) g1X7 (VarArg) (VanillaId) g2n7 = (VanillaId) wild827
                                                                              (AlgAlt)
                                                                                (DEFAULT) _
                                                                                  -> (App) (VanillaId) wild827
                                                                                (DataAlt) GHC.Types.EQ
                                                                                  -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd14G7 (VarArg) (VanillaId) h1Y7 (VarArg) (VanillaId) h2o7 = (VanillaId) wild937
                                                                                       (AlgAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) wild937
                                                                                         (DataAlt) GHC.Types.EQ
                                                                                           -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd15H7 (VarArg) (VanillaId) i1Z7 (VarArg) (VanillaId) i2p7 = (VanillaId) wild1047
                                                                                                (AlgAlt)
                                                                                                  (DEFAULT) _
                                                                                                    -> (App) (VanillaId) wild1047
                                                                                                  (DataAlt) GHC.Types.EQ
                                                                                                    -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd16I7 (VarArg) (VanillaId) j1a7 (VarArg) (VanillaId) j2q7 = (VanillaId) wild1157
                                                                                                         (AlgAlt)
                                                                                                           (DEFAULT) _
                                                                                                             -> (App) (VanillaId) wild1157
                                                                                                           (DataAlt) GHC.Types.EQ
                                                                                                             -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd17J7 (VarArg) (VanillaId) k1b7 (VarArg) (VanillaId) k2r7 = (VanillaId) wild1267
                                                                                                                  (AlgAlt)
                                                                                                                    (DEFAULT) _
                                                                                                                      -> (App) (VanillaId) wild1267
                                                                                                                    (DataAlt) GHC.Types.EQ
                                                                                                                      -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd18K7 (VarArg) (VanillaId) l1c7 (VarArg) (VanillaId) l2s7 = (VanillaId) wild1377
                                                                                                                           (AlgAlt)
                                                                                                                             (DEFAULT) _
                                                                                                                               -> (App) (VanillaId) wild1377
                                                                                                                             (DataAlt) GHC.Types.EQ
                                                                                                                               -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd19L7 (VarArg) (VanillaId) m1d7 (VarArg) (VanillaId) m2t7 = (VanillaId) wild1487
                                                                                                                                    (AlgAlt)
                                                                                                                                      (DEFAULT) _
                                                                                                                                        -> (App) (VanillaId) wild1487
                                                                                                                                      (DataAlt) GHC.Types.EQ
                                                                                                                                        -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd20M7 (VarArg) (VanillaId) n1e7 (VarArg) (VanillaId) n2u7 = (VanillaId) wild1597
                                                                                                                                             (AlgAlt)
                                                                                                                                               (DEFAULT) _
                                                                                                                                                 -> (App) (VanillaId) wild1597
                                                                                                                                               (DataAlt) GHC.Types.EQ
                                                                                                                                                 -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd21N7 (VarArg) (VanillaId) o1f7 (VarArg) (VanillaId) o2v7
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,,) a-7 b_7 cA8 dB8 eC8 fD8 gE8 hF8 iG8 jH8 kI8 lJ8 mK8 nL8 oM8] APPFL.Classes.$fOrd(,,,,,,,,,,,,,,) =
  (FUN)
  [(VanillaId) $dEq5N8 ,(VanillaId) $dOrd7O8 ,(VanillaId) $dOrd8P8 ,(VanillaId) $dOrd9Q8 ,(VanillaId) $dOrd10R8 ,(VanillaId) $dOrd11S8 ,(VanillaId) $dOrd12T8 ,(VanillaId) $dOrd13U8 ,(VanillaId) $dOrd14V8 ,(VanillaId) $dOrd15W8 ,(VanillaId) $dOrd16X8 ,(VanillaId) $dOrd17Y8 ,(VanillaId) $dOrd18Z8 ,(VanillaId) $dOrd19a8 ,(VanillaId) $dOrd20b8 ,(VanillaId) $dOrd21c8]
    (Let) let
      (StgNonRec)
        (VanillaId) satd8 =
        (THUNK)
          (App) (VanillaId) $cmin14e8 (VarArg) (VanillaId) $dEq5N8 (VarArg) (VanillaId) $dOrd7O8 (VarArg) (VanillaId) $dOrd8P8 (VarArg) (VanillaId) $dOrd9Q8 (VarArg) (VanillaId) $dOrd10R8 (VarArg) (VanillaId) $dOrd11S8 (VarArg) (VanillaId) $dOrd12T8 (VarArg) (VanillaId) $dOrd13U8 (VarArg) (VanillaId) $dOrd14V8 (VarArg) (VanillaId) $dOrd15W8 (VarArg) (VanillaId) $dOrd16X8 (VarArg) (VanillaId) $dOrd17Y8 (VarArg) (VanillaId) $dOrd18Z8 (VarArg) (VanillaId) $dOrd19a8 (VarArg) (VanillaId) $dOrd20b8 (VarArg) (VanillaId) $dOrd21c8
    in (Let) let
         (StgNonRec)
           (VanillaId) satf8 =
           (THUNK)
             (App) (VanillaId) $cmax14g8 (VarArg) (VanillaId) $dEq5N8 (VarArg) (VanillaId) $dOrd7O8 (VarArg) (VanillaId) $dOrd8P8 (VarArg) (VanillaId) $dOrd9Q8 (VarArg) (VanillaId) $dOrd10R8 (VarArg) (VanillaId) $dOrd11S8 (VarArg) (VanillaId) $dOrd12T8 (VarArg) (VanillaId) $dOrd13U8 (VarArg) (VanillaId) $dOrd14V8 (VarArg) (VanillaId) $dOrd15W8 (VarArg) (VanillaId) $dOrd16X8 (VarArg) (VanillaId) $dOrd17Y8 (VarArg) (VanillaId) $dOrd18Z8 (VarArg) (VanillaId) $dOrd19a8 (VarArg) (VanillaId) $dOrd20b8 (VarArg) (VanillaId) $dOrd21c8
       in (Let) let
            (StgNonRec)
              (VanillaId) sath8 =
              (THUNK)
                (App) (VanillaId) $c>=14i8 (VarArg) (VanillaId) $dEq5N8 (VarArg) (VanillaId) $dOrd7O8 (VarArg) (VanillaId) $dOrd8P8 (VarArg) (VanillaId) $dOrd9Q8 (VarArg) (VanillaId) $dOrd10R8 (VarArg) (VanillaId) $dOrd11S8 (VarArg) (VanillaId) $dOrd12T8 (VarArg) (VanillaId) $dOrd13U8 (VarArg) (VanillaId) $dOrd14V8 (VarArg) (VanillaId) $dOrd15W8 (VarArg) (VanillaId) $dOrd16X8 (VarArg) (VanillaId) $dOrd17Y8 (VarArg) (VanillaId) $dOrd18Z8 (VarArg) (VanillaId) $dOrd19a8 (VarArg) (VanillaId) $dOrd20b8 (VarArg) (VanillaId) $dOrd21c8
          in (Let) let
               (StgNonRec)
                 (VanillaId) satj8 =
                 (THUNK)
                   (App) (VanillaId) $c>14k8 (VarArg) (VanillaId) $dEq5N8 (VarArg) (VanillaId) $dOrd7O8 (VarArg) (VanillaId) $dOrd8P8 (VarArg) (VanillaId) $dOrd9Q8 (VarArg) (VanillaId) $dOrd10R8 (VarArg) (VanillaId) $dOrd11S8 (VarArg) (VanillaId) $dOrd12T8 (VarArg) (VanillaId) $dOrd13U8 (VarArg) (VanillaId) $dOrd14V8 (VarArg) (VanillaId) $dOrd15W8 (VarArg) (VanillaId) $dOrd16X8 (VarArg) (VanillaId) $dOrd17Y8 (VarArg) (VanillaId) $dOrd18Z8 (VarArg) (VanillaId) $dOrd19a8 (VarArg) (VanillaId) $dOrd20b8 (VarArg) (VanillaId) $dOrd21c8
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satl8 =
                    (THUNK)
                      (App) (VanillaId) $c<=14m8 (VarArg) (VanillaId) $dEq5N8 (VarArg) (VanillaId) $dOrd7O8 (VarArg) (VanillaId) $dOrd8P8 (VarArg) (VanillaId) $dOrd9Q8 (VarArg) (VanillaId) $dOrd10R8 (VarArg) (VanillaId) $dOrd11S8 (VarArg) (VanillaId) $dOrd12T8 (VarArg) (VanillaId) $dOrd13U8 (VarArg) (VanillaId) $dOrd14V8 (VarArg) (VanillaId) $dOrd15W8 (VarArg) (VanillaId) $dOrd16X8 (VarArg) (VanillaId) $dOrd17Y8 (VarArg) (VanillaId) $dOrd18Z8 (VarArg) (VanillaId) $dOrd19a8 (VarArg) (VanillaId) $dOrd20b8 (VarArg) (VanillaId) $dOrd21c8
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satn8 =
                       (THUNK)
                         (App) (VanillaId) $c<14o8 (VarArg) (VanillaId) $dEq5N8 (VarArg) (VanillaId) $dOrd7O8 (VarArg) (VanillaId) $dOrd8P8 (VarArg) (VanillaId) $dOrd9Q8 (VarArg) (VanillaId) $dOrd10R8 (VarArg) (VanillaId) $dOrd11S8 (VarArg) (VanillaId) $dOrd12T8 (VarArg) (VanillaId) $dOrd13U8 (VarArg) (VanillaId) $dOrd14V8 (VarArg) (VanillaId) $dOrd15W8 (VarArg) (VanillaId) $dOrd16X8 (VarArg) (VanillaId) $dOrd17Y8 (VarArg) (VanillaId) $dOrd18Z8 (VarArg) (VanillaId) $dOrd19a8 (VarArg) (VanillaId) $dOrd20b8 (VarArg) (VanillaId) $dOrd21c8
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satp8 =
                          (FUN)
                          [(VanillaId) etaH ,(VanillaId) etaG]
                            (App) (VanillaId) $ccompare1496 (VarArg) (VanillaId) $dEq5N8 (VarArg) (VanillaId) $dOrd7O8 (VarArg) (VanillaId) $dOrd8P8 (VarArg) (VanillaId) $dOrd9Q8 (VarArg) (VanillaId) $dOrd10R8 (VarArg) (VanillaId) $dOrd11S8 (VarArg) (VanillaId) $dOrd12T8 (VarArg) (VanillaId) $dOrd13U8 (VarArg) (VanillaId) $dOrd14V8 (VarArg) (VanillaId) $dOrd15W8 (VarArg) (VanillaId) $dOrd16X8 (VarArg) (VanillaId) $dOrd17Y8 (VarArg) (VanillaId) $dOrd18Z8 (VarArg) (VanillaId) $dOrd19a8 (VarArg) (VanillaId) $dOrd20b8 (VarArg) (VanillaId) $dOrd21c8 (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5N8 ,(VarArg) (VanillaId) satp8 ,(VarArg) (VanillaId) satn8 ,(VarArg) (VanillaId) satl8 ,(VarArg) (VanillaId) satj8 ,(VarArg) (VanillaId) sath8 ,(VarArg) (VanillaId) satf8 ,(VarArg) (VanillaId) satd8]
  (VanillaId) $cmin14e8 =
  (FUN)
  [(VanillaId) $dEq5q8 ,(VanillaId) $dOrd7r8 ,(VanillaId) $dOrd8s8 ,(VanillaId) $dOrd9t8 ,(VanillaId) $dOrd10u8 ,(VanillaId) $dOrd11v8 ,(VanillaId) $dOrd12w8 ,(VanillaId) $dOrd13x8 ,(VanillaId) $dOrd14y8 ,(VanillaId) $dOrd15z8 ,(VanillaId) $dOrd1608 ,(VanillaId) $dOrd1718 ,(VanillaId) $dOrd1828 ,(VanillaId) $dOrd1938 ,(VanillaId) $dOrd2048 ,(VanillaId) $dOrd2158]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd2268 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,,) a-7 b_7 cA8 dB8 eC8 fD8 gE8 hF8 iG8 jH8 kI8 lJ8 mK8 nL8 oM8] APPFL.Classes.$fOrd(,,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5q8 (VarArg) (VanillaId) $dOrd7r8 (VarArg) (VanillaId) $dOrd8s8 (VarArg) (VanillaId) $dOrd9t8 (VarArg) (VanillaId) $dOrd10u8 (VarArg) (VanillaId) $dOrd11v8 (VarArg) (VanillaId) $dOrd12w8 (VarArg) (VanillaId) $dOrd13x8 (VarArg) (VanillaId) $dOrd14y8 (VarArg) (VanillaId) $dOrd15z8 (VarArg) (VanillaId) $dOrd1608 (VarArg) (VanillaId) $dOrd1718 (VarArg) (VanillaId) $dOrd1828 (VarArg) (VanillaId) $dOrd1938 (VarArg) (VanillaId) $dOrd2048 (VarArg) (VanillaId) $dOrd2158
    in (Let) let
         (StgNonRec)
           (VanillaId) sat78 =
           (FUN)
           [(VanillaId) x88 ,(VanillaId) y98]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd2268 (VarArg) (VanillaId) x88 (VarArg) (VanillaId) y98 = (VanillaId) wild-8
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) y98
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) x88
       in (App) (VanillaId) sat78
  (VanillaId) $cmax14g8 =
  (FUN)
  [(VanillaId) $dEq5_8 ,(VanillaId) $dOrd7A9 ,(VanillaId) $dOrd8B9 ,(VanillaId) $dOrd9C9 ,(VanillaId) $dOrd10D9 ,(VanillaId) $dOrd11E9 ,(VanillaId) $dOrd12F9 ,(VanillaId) $dOrd13G9 ,(VanillaId) $dOrd14H9 ,(VanillaId) $dOrd15I9 ,(VanillaId) $dOrd16J9 ,(VanillaId) $dOrd17K9 ,(VanillaId) $dOrd18L9 ,(VanillaId) $dOrd19M9 ,(VanillaId) $dOrd20N9 ,(VanillaId) $dOrd21O9]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd22P9 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,,) a-7 b_7 cA8 dB8 eC8 fD8 gE8 hF8 iG8 jH8 kI8 lJ8 mK8 nL8 oM8] APPFL.Classes.$fOrd(,,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5_8 (VarArg) (VanillaId) $dOrd7A9 (VarArg) (VanillaId) $dOrd8B9 (VarArg) (VanillaId) $dOrd9C9 (VarArg) (VanillaId) $dOrd10D9 (VarArg) (VanillaId) $dOrd11E9 (VarArg) (VanillaId) $dOrd12F9 (VarArg) (VanillaId) $dOrd13G9 (VarArg) (VanillaId) $dOrd14H9 (VarArg) (VanillaId) $dOrd15I9 (VarArg) (VanillaId) $dOrd16J9 (VarArg) (VanillaId) $dOrd17K9 (VarArg) (VanillaId) $dOrd18L9 (VarArg) (VanillaId) $dOrd19M9 (VarArg) (VanillaId) $dOrd20N9 (VarArg) (VanillaId) $dOrd21O9
    in (Let) let
         (StgNonRec)
           (VanillaId) satQ9 =
           (FUN)
           [(VanillaId) xR9 ,(VanillaId) yS9]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd22P9 (VarArg) (VanillaId) xR9 (VarArg) (VanillaId) yS9 = (VanillaId) wildT9
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xR9
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yS9
       in (App) (VanillaId) satQ9
  (VanillaId) $c>=14i8 =
  (FUN)
  [(VanillaId) $dEq5U9 ,(VanillaId) $dOrd7V9 ,(VanillaId) $dOrd8W9 ,(VanillaId) $dOrd9X9 ,(VanillaId) $dOrd10Y9 ,(VanillaId) $dOrd11Z9 ,(VanillaId) $dOrd12a9 ,(VanillaId) $dOrd13b9 ,(VanillaId) $dOrd14c9 ,(VanillaId) $dOrd15d9 ,(VanillaId) $dOrd16e9 ,(VanillaId) $dOrd17f9 ,(VanillaId) $dOrd18g9 ,(VanillaId) $dOrd19h9 ,(VanillaId) $dOrd20i9 ,(VanillaId) $dOrd21j9]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd22k9 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,,) a-7 b_7 cA8 dB8 eC8 fD8 gE8 hF8 iG8 jH8 kI8 lJ8 mK8 nL8 oM8] APPFL.Classes.$fOrd(,,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5U9 (VarArg) (VanillaId) $dOrd7V9 (VarArg) (VanillaId) $dOrd8W9 (VarArg) (VanillaId) $dOrd9X9 (VarArg) (VanillaId) $dOrd10Y9 (VarArg) (VanillaId) $dOrd11Z9 (VarArg) (VanillaId) $dOrd12a9 (VarArg) (VanillaId) $dOrd13b9 (VarArg) (VanillaId) $dOrd14c9 (VarArg) (VanillaId) $dOrd15d9 (VarArg) (VanillaId) $dOrd16e9 (VarArg) (VanillaId) $dOrd17f9 (VarArg) (VanillaId) $dOrd18g9 (VarArg) (VanillaId) $dOrd19h9 (VarArg) (VanillaId) $dOrd20i9 (VarArg) (VanillaId) $dOrd21j9
    in (Let) let
         (StgNonRec)
           (VanillaId) satl9 =
           (FUN)
           [(VanillaId) xm9 ,(VanillaId) yn9]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd22k9 (VarArg) (VanillaId) xm9 (VarArg) (VanillaId) yn9 = (VanillaId) wildo9
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satl9
  (VanillaId) $c>14k8 =
  (FUN)
  [(VanillaId) $dEq5p9 ,(VanillaId) $dOrd7q9 ,(VanillaId) $dOrd8r9 ,(VanillaId) $dOrd9s9 ,(VanillaId) $dOrd10t9 ,(VanillaId) $dOrd11u9 ,(VanillaId) $dOrd12v9 ,(VanillaId) $dOrd13w9 ,(VanillaId) $dOrd14x9 ,(VanillaId) $dOrd15y9 ,(VanillaId) $dOrd16z9 ,(VanillaId) $dOrd1709 ,(VanillaId) $dOrd1819 ,(VanillaId) $dOrd1929 ,(VanillaId) $dOrd2039 ,(VanillaId) $dOrd2149]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd2259 =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,,) a-7 b_7 cA8 dB8 eC8 fD8 gE8 hF8 iG8 jH8 kI8 lJ8 mK8 nL8 oM8] APPFL.Classes.$fOrd(,,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5p9 (VarArg) (VanillaId) $dOrd7q9 (VarArg) (VanillaId) $dOrd8r9 (VarArg) (VanillaId) $dOrd9s9 (VarArg) (VanillaId) $dOrd10t9 (VarArg) (VanillaId) $dOrd11u9 (VarArg) (VanillaId) $dOrd12v9 (VarArg) (VanillaId) $dOrd13w9 (VarArg) (VanillaId) $dOrd14x9 (VarArg) (VanillaId) $dOrd15y9 (VarArg) (VanillaId) $dOrd16z9 (VarArg) (VanillaId) $dOrd1709 (VarArg) (VanillaId) $dOrd1819 (VarArg) (VanillaId) $dOrd1929 (VarArg) (VanillaId) $dOrd2039 (VarArg) (VanillaId) $dOrd2149
    in (Let) let
         (StgNonRec)
           (VanillaId) sat69 =
           (FUN)
           [(VanillaId) x79 ,(VanillaId) y89]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd2259 (VarArg) (VanillaId) x79 (VarArg) (VanillaId) y89 = (VanillaId) wild99
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) sat69
  (VanillaId) $c<=14m8 =
  (FUN)
  [(VanillaId) $dEq5-9 ,(VanillaId) $dOrd7_9 ,(VanillaId) $dOrd8A- ,(VanillaId) $dOrd9B- ,(VanillaId) $dOrd10C- ,(VanillaId) $dOrd11D- ,(VanillaId) $dOrd12E- ,(VanillaId) $dOrd13F- ,(VanillaId) $dOrd14G- ,(VanillaId) $dOrd15H- ,(VanillaId) $dOrd16I- ,(VanillaId) $dOrd17J- ,(VanillaId) $dOrd18K- ,(VanillaId) $dOrd19L- ,(VanillaId) $dOrd20M- ,(VanillaId) $dOrd21N-]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd22O- =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,,) a-7 b_7 cA8 dB8 eC8 fD8 gE8 hF8 iG8 jH8 kI8 lJ8 mK8 nL8 oM8] APPFL.Classes.$fOrd(,,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5-9 (VarArg) (VanillaId) $dOrd7_9 (VarArg) (VanillaId) $dOrd8A- (VarArg) (VanillaId) $dOrd9B- (VarArg) (VanillaId) $dOrd10C- (VarArg) (VanillaId) $dOrd11D- (VarArg) (VanillaId) $dOrd12E- (VarArg) (VanillaId) $dOrd13F- (VarArg) (VanillaId) $dOrd14G- (VarArg) (VanillaId) $dOrd15H- (VarArg) (VanillaId) $dOrd16I- (VarArg) (VanillaId) $dOrd17J- (VarArg) (VanillaId) $dOrd18K- (VarArg) (VanillaId) $dOrd19L- (VarArg) (VanillaId) $dOrd20M- (VarArg) (VanillaId) $dOrd21N-
    in (Let) let
         (StgNonRec)
           (VanillaId) satP- =
           (FUN)
           [(VanillaId) xQ- ,(VanillaId) yR-]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd22O- (VarArg) (VanillaId) xQ- (VarArg) (VanillaId) yR- = (VanillaId) wildS-
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satP-
  (VanillaId) $c<14o8 =
  (FUN)
  [(VanillaId) $dEq5T- ,(VanillaId) $dOrd7U- ,(VanillaId) $dOrd8V- ,(VanillaId) $dOrd9W- ,(VanillaId) $dOrd10X- ,(VanillaId) $dOrd11Y- ,(VanillaId) $dOrd12Z- ,(VanillaId) $dOrd13a- ,(VanillaId) $dOrd14b- ,(VanillaId) $dOrd15c- ,(VanillaId) $dOrd16d- ,(VanillaId) $dOrd17e- ,(VanillaId) $dOrd18f- ,(VanillaId) $dOrd19g- ,(VanillaId) $dOrd20h- ,(VanillaId) $dOrd21i-]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd22j- =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Tuple.(,,,,,,,,,,,,,,) a-7 b_7 cA8 dB8 eC8 fD8 gE8 hF8 iG8 jH8 kI8 lJ8 mK8 nL8 oM8] APPFL.Classes.$fOrd(,,,,,,,,,,,,,,) (VarArg) (VanillaId) $dEq5T- (VarArg) (VanillaId) $dOrd7U- (VarArg) (VanillaId) $dOrd8V- (VarArg) (VanillaId) $dOrd9W- (VarArg) (VanillaId) $dOrd10X- (VarArg) (VanillaId) $dOrd11Y- (VarArg) (VanillaId) $dOrd12Z- (VarArg) (VanillaId) $dOrd13a- (VarArg) (VanillaId) $dOrd14b- (VarArg) (VanillaId) $dOrd15c- (VarArg) (VanillaId) $dOrd16d- (VarArg) (VanillaId) $dOrd17e- (VarArg) (VanillaId) $dOrd18f- (VarArg) (VanillaId) $dOrd19g- (VarArg) (VanillaId) $dOrd20h- (VarArg) (VanillaId) $dOrd21i-
    in (Let) let
         (StgNonRec)
           (VanillaId) satk- =
           (FUN)
           [(VanillaId) xl- ,(VanillaId) ym-]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd22j- (VarArg) (VanillaId) xl- (VarArg) (VanillaId) ym- = (VanillaId) wildn-
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satk-
(StgNonRec)
  (VanillaId) $c>=15o- =
  (FUN)
  [(VanillaId) dsp- ,(VanillaId) ds1q-]
    (Case) (App) (VanillaId) dsp- = (VanillaId) wildr-
      (AlgAlt)
        (DataAlt) GHC.Types.C# (VanillaId) c1s-
          -> (Case) (App) (VanillaId) ds1q- = (VanillaId) wild1t-
               (AlgAlt)
                 (DataAlt) GHC.Types.C# (VanillaId) c2u-
                   -> (Case) (Op) (Prim) geChar# [(VarArg) (VanillaId) c1s- ,(VarArg) (VanillaId) c2u-] = (VanillaId) satv-
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satv-
(StgNonRec)
  (VanillaId) $c>15w- =
  (FUN)
  [(VanillaId) dsx- ,(VanillaId) ds1y-]
    (Case) (App) (VanillaId) dsx- = (VanillaId) wildz-
      (AlgAlt)
        (DataAlt) GHC.Types.C# (VanillaId) c10-
          -> (Case) (App) (VanillaId) ds1y- = (VanillaId) wild11-
               (AlgAlt)
                 (DataAlt) GHC.Types.C# (VanillaId) c22-
                   -> (Case) (Op) (Prim) gtChar# [(VarArg) (VanillaId) c10- ,(VarArg) (VanillaId) c22-] = (VanillaId) sat3-
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat3-
(StgNonRec)
  (VanillaId) $c<=154- =
  (FUN)
  [(VanillaId) ds5- ,(VanillaId) ds16-]
    (Case) (App) (VanillaId) ds5- = (VanillaId) wild7-
      (AlgAlt)
        (DataAlt) GHC.Types.C# (VanillaId) c18-
          -> (Case) (App) (VanillaId) ds16- = (VanillaId) wild19-
               (AlgAlt)
                 (DataAlt) GHC.Types.C# (VanillaId) c2--
                   -> (Case) (Op) (Prim) leChar# [(VarArg) (VanillaId) c18- ,(VarArg) (VanillaId) c2--] = (VanillaId) sat_-
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat_-
(StgNonRec)
  (VanillaId) $c<15A_ =
  (FUN)
  [(VanillaId) dsB_ ,(VanillaId) ds1C_]
    (Case) (App) (VanillaId) dsB_ = (VanillaId) wildD_
      (AlgAlt)
        (DataAlt) GHC.Types.C# (VanillaId) c1E_
          -> (Case) (App) (VanillaId) ds1C_ = (VanillaId) wild1F_
               (AlgAlt)
                 (DataAlt) GHC.Types.C# (VanillaId) c2G_
                   -> (Case) (Op) (Prim) ltChar# [(VarArg) (VanillaId) c1E_ ,(VarArg) (VanillaId) c2G_] = (VanillaId) satH_
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satH_
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [Char] APPFL.Classes.$fOrdChar =
  (CONish) APPFL.Classes.D:Ord [(VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Char] APPFL.Classes.$fEqChar ,(VarArg) (VanillaId) $ccompare15I_ ,(VarArg) (VanillaId) $c<15A_ ,(VarArg) (VanillaId) $c<=154- ,(VarArg) (VanillaId) $c>15w- ,(VarArg) (VanillaId) $c>=15o- ,(VarArg) (VanillaId) $cmax15J_ ,(VarArg) (VanillaId) $cmin15K_]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Ord
  (VanillaId) $cmin15K_ =
  (FUN)
  [(VanillaId) xL_ ,(VanillaId) yM_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Char] APPFL.Classes.$fOrdChar (VarArg) (VanillaId) xL_ (VarArg) (VanillaId) yM_ = (VanillaId) wildN_
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) yM_
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xL_
  (VanillaId) $cmax15J_ =
  (FUN)
  [(VanillaId) xO_ ,(VanillaId) yP_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Char] APPFL.Classes.$fOrdChar (VarArg) (VanillaId) xO_ (VarArg) (VanillaId) yP_ = (VanillaId) wildQ_
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) xO_
        (DataAlt) GHC.Types.True -> (App) (VanillaId) yP_
  (VanillaId) $ccompare15I_ =
  (FUN)
  [(VanillaId) etaR_ ,(VanillaId) eta1S_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.$p1Ord (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Char] APPFL.Classes.$fOrdChar = (VanillaId) satT_
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satT_ (VarArg) (VanillaId) etaR_ (VarArg) (VanillaId) eta1S_ = (VanillaId) wildU_
               (AlgAlt)
                 (DataAlt) GHC.Types.False
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Char] APPFL.Classes.$fOrdChar (VarArg) (VanillaId) etaR_ (VarArg) (VanillaId) eta1S_ = (VanillaId) wild1V_
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.GT []
                          (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.LT []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.EQ []
(StgNonRec)
  (VanillaId) $ccompare16W_ =
  (FUN)
  [(VanillaId) dsX_ ,(VanillaId) ds1Y_]
    (Case) (App) (VanillaId) dsX_ = (VanillaId) wildZ_
      (AlgAlt)
        (DataAlt) GHC.Types.False
          -> (Case) (App) (VanillaId) ds1Y_ = (VanillaId) wild1a_
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.EQ []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.LT []
        (DataAlt) GHC.Types.True
          -> (Case) (App) (VanillaId) ds1Y_ = (VanillaId) wild1b_
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.GT []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.EQ []
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Types.Bool] APPFL.Classes.$fEqBool =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) $c==15Qb ,(VarArg) (VanillaId) $c/=17c_]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
  (VanillaId) $c/=17c_ =
  (FUN)
  [(VanillaId) xd_ ,(VanillaId) ye_]
    (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Types.Bool] APPFL.Classes.$fEqBool (VarArg) (VanillaId) xd_ (VarArg) (VanillaId) ye_ = (VanillaId) wildf_
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Bool] APPFL.Classes.$fOrdBool =
  (CONish) APPFL.Classes.D:Ord [(VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Types.Bool] APPFL.Classes.$fEqBool ,(VarArg) (VanillaId) $ccompare16W_ ,(VarArg) (VanillaId) $c<16g_ ,(VarArg) (VanillaId) $c<=16h_ ,(VarArg) (VanillaId) $c>16i_ ,(VarArg) (VanillaId) $c>=16j_ ,(VarArg) (VanillaId) $cmax16k_ ,(VarArg) (VanillaId) $cmin16l_]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Ord
  (VanillaId) $cmin16l_ =
  (FUN)
  [(VanillaId) xm_ ,(VanillaId) yn_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Bool] APPFL.Classes.$fOrdBool (VarArg) (VanillaId) xm_ (VarArg) (VanillaId) yn_ = (VanillaId) wildo_
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) yn_
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xm_
  (VanillaId) $cmax16k_ =
  (FUN)
  [(VanillaId) xp_ ,(VanillaId) yq_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Bool] APPFL.Classes.$fOrdBool (VarArg) (VanillaId) xp_ (VarArg) (VanillaId) yq_ = (VanillaId) wildr_
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) xp_
        (DataAlt) GHC.Types.True -> (App) (VanillaId) yq_
  (VanillaId) $c>=16j_ =
  (FUN)
  [(VanillaId) xs_ ,(VanillaId) yt_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Bool] APPFL.Classes.$fOrdBool (VarArg) (VanillaId) xs_ (VarArg) (VanillaId) yt_ = (VanillaId) wildu_
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
  (VanillaId) $c>16i_ =
  (FUN)
  [(VanillaId) xv_ ,(VanillaId) yw_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Bool] APPFL.Classes.$fOrdBool (VarArg) (VanillaId) xv_ (VarArg) (VanillaId) yw_ = (VanillaId) wildx_
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
  (VanillaId) $c<=16h_ =
  (FUN)
  [(VanillaId) xy_ ,(VanillaId) yz_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Bool] APPFL.Classes.$fOrdBool (VarArg) (VanillaId) xy_ (VarArg) (VanillaId) yz_ = (VanillaId) wild0_
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
  (VanillaId) $c<16g_ =
  (FUN)
  [(VanillaId) x1_ ,(VanillaId) y2_]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Bool] APPFL.Classes.$fOrdBool (VarArg) (VanillaId) x1_ (VarArg) (VanillaId) y2_ = (VanillaId) wild3_
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Types.Ordering] APPFL.Classes.$fEqOrdering =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) $c==184_ ,(VarArg) (VanillaId) $c/=185_]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
  (VanillaId) $c/=185_ =
  (FUN)
  [(VanillaId) eta6_ ,(VanillaId) eta17_]
    (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Types.Ordering] APPFL.Classes.$fEqOrdering (VarArg) (VanillaId) eta6_ (VarArg) (VanillaId) eta17_ = (VanillaId) wild8_
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering =
  (CONish) APPFL.Classes.D:Ord [(VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Types.Ordering] APPFL.Classes.$fEqOrdering ,(VarArg) (VanillaId) $ccompare179_ ,(VarArg) (VanillaId) $c<17-_ ,(VarArg) (VanillaId) $c<=17__ ,(VarArg) (VanillaId) $c>17AAB ,(VarArg) (VanillaId) $c>=17BAB ,(VarArg) (VanillaId) $cmax17CAB ,(VarArg) (VanillaId) $cmin17DAB]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Ord
  (VanillaId) $c==184_ =
  (FUN)
  [(VanillaId) a13EAB ,(VanillaId) bFAB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering (VarArg) (VanillaId) a13EAB (VarArg) (VanillaId) bFAB = (VanillaId) wildGAB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.EQ -> (ConApp) GHC.Types.True []
  (VanillaId) $cmin17DAB =
  (FUN)
  [(VanillaId) xHAB ,(VanillaId) yIAB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering (VarArg) (VanillaId) xHAB (VarArg) (VanillaId) yIAB = (VanillaId) wildJAB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) yIAB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xHAB
  (VanillaId) $cmax17CAB =
  (FUN)
  [(VanillaId) xKAB ,(VanillaId) yLAB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering (VarArg) (VanillaId) xKAB (VarArg) (VanillaId) yLAB = (VanillaId) wildMAB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) xKAB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) yLAB
  (VanillaId) $c>=17BAB =
  (FUN)
  [(VanillaId) xNAB ,(VanillaId) yOAB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering (VarArg) (VanillaId) xNAB (VarArg) (VanillaId) yOAB = (VanillaId) wildPAB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
  (VanillaId) $c>17AAB =
  (FUN)
  [(VanillaId) xQAB ,(VanillaId) yRAB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering (VarArg) (VanillaId) xQAB (VarArg) (VanillaId) yRAB = (VanillaId) wildSAB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
  (VanillaId) $c<=17__ =
  (FUN)
  [(VanillaId) xTAB ,(VanillaId) yUAB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering (VarArg) (VanillaId) xTAB (VarArg) (VanillaId) yUAB = (VanillaId) wildVAB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
  (VanillaId) $c<17-_ =
  (FUN)
  [(VanillaId) xWAB ,(VanillaId) yXAB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering (VarArg) (VanillaId) xWAB (VarArg) (VanillaId) yXAB = (VanillaId) wildYAB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
  (VanillaId) $ccompare179_ =
  (FUN)
  [(VanillaId) dsZAB ,(VanillaId) ds1aAB]
    (Case) (App) (VanillaId) dsZAB = (VanillaId) wildbAB
      (AlgAlt)
        (DataAlt) GHC.Types.LT
          -> (Case) (App) (VanillaId) ds1aAB = (VanillaId) wild1cAB
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.LT []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.EQ []
        (DataAlt) GHC.Types.EQ
          -> (Case) (App) (VanillaId) ds1aAB = (VanillaId) wild1dAB
               (AlgAlt)
                 (DEFAULT) _
                   -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Ordering] APPFL.Classes.$fOrdOrdering (VarArg) (VanillaId) wild1dAB (VarArg) (DCWorkerId) GHC.Types.EQ
                 (DataAlt) GHC.Types.EQ -> (ConApp) GHC.Types.EQ []
        (DataAlt) GHC.Types.GT
          -> (Case) (App) (VanillaId) ds1aAB = (VanillaId) wild1eAB
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.GT []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.EQ []
(StgNonRec)
  (VanillaId) $c>=18fAB =
  (FUN)
  [(VanillaId) dsgAB ,(VanillaId) ds1hAB]
    (Case) (App) (VanillaId) dsgAB = (VanillaId) wildiAB
      (AlgAlt)
        (DataAlt) GHC.Types.W# (VanillaId) w1jAB
          -> (Case) (App) (VanillaId) ds1hAB = (VanillaId) wild1kAB
               (AlgAlt)
                 (DataAlt) GHC.Types.W# (VanillaId) w2lAB
                   -> (Case) (Op) (Prim) geWord# [(VarArg) (VanillaId) w1jAB ,(VarArg) (VanillaId) w2lAB] = (VanillaId) satmAB
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satmAB
(StgNonRec)
  (VanillaId) $c>18nAB =
  (FUN)
  [(VanillaId) dsoAB ,(VanillaId) ds1pAB]
    (Case) (App) (VanillaId) dsoAB = (VanillaId) wildqAB
      (AlgAlt)
        (DataAlt) GHC.Types.W# (VanillaId) w1rAB
          -> (Case) (App) (VanillaId) ds1pAB = (VanillaId) wild1sAB
               (AlgAlt)
                 (DataAlt) GHC.Types.W# (VanillaId) w2tAB
                   -> (Case) (Op) (Prim) gtWord# [(VarArg) (VanillaId) w1rAB ,(VarArg) (VanillaId) w2tAB] = (VanillaId) satuAB
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satuAB
(StgNonRec)
  (VanillaId) $c<=18vAB =
  (FUN)
  [(VanillaId) dswAB ,(VanillaId) ds1xAB]
    (Case) (App) (VanillaId) dswAB = (VanillaId) wildyAB
      (AlgAlt)
        (DataAlt) GHC.Types.W# (VanillaId) w1zAB
          -> (Case) (App) (VanillaId) ds1xAB = (VanillaId) wild10AB
               (AlgAlt)
                 (DataAlt) GHC.Types.W# (VanillaId) w21AB
                   -> (Case) (Op) (Prim) leWord# [(VarArg) (VanillaId) w1zAB ,(VarArg) (VanillaId) w21AB] = (VanillaId) sat2AB
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat2AB
(StgNonRec)
  (VanillaId) $c<183AB =
  (FUN)
  [(VanillaId) ds4AB ,(VanillaId) ds15AB]
    (Case) (App) (VanillaId) ds4AB = (VanillaId) wild6AB
      (AlgAlt)
        (DataAlt) GHC.Types.W# (VanillaId) w17AB
          -> (Case) (App) (VanillaId) ds15AB = (VanillaId) wild18AB
               (AlgAlt)
                 (DataAlt) GHC.Types.W# (VanillaId) w29AB
                   -> (Case) (Op) (Prim) ltWord# [(VarArg) (VanillaId) w17AB ,(VarArg) (VanillaId) w29AB] = (VanillaId) sat-AB
                        (PrimAlt)
                          (DEFAULT) _
                            -> (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat-AB
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Word] APPFL.Classes.$fOrdWord =
  (CONish) APPFL.Classes.D:Ord [(VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [GHC.Types.Word] APPFL.Classes.$fEqWord ,(VarArg) (VanillaId) $ccompare18_AB ,(VarArg) (VanillaId) $c<183AB ,(VarArg) (VanillaId) $c<=18vAB ,(VarArg) (VanillaId) $c>18nAB ,(VarArg) (VanillaId) $c>=18fAB ,(VarArg) (VanillaId) $cmax18ABB ,(VarArg) (VanillaId) $cmin18BBB]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Ord
  (VanillaId) $cmin18BBB =
  (FUN)
  [(VanillaId) xCBB ,(VanillaId) yDBB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Word] APPFL.Classes.$fOrdWord (VarArg) (VanillaId) xCBB (VarArg) (VanillaId) yDBB = (VanillaId) wildEBB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) yDBB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xCBB
  (VanillaId) $cmax18ABB =
  (FUN)
  [(VanillaId) xFBB ,(VanillaId) yGBB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Word] APPFL.Classes.$fOrdWord (VarArg) (VanillaId) xFBB (VarArg) (VanillaId) yGBB = (VanillaId) wildHBB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) xFBB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) yGBB
  (VanillaId) $ccompare18_AB =
  (FUN)
  [(VanillaId) etaIBB ,(VanillaId) eta1JBB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.$p1Ord (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Word] APPFL.Classes.$fOrdWord = (VanillaId) satKBB
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satKBB (VarArg) (VanillaId) etaIBB (VarArg) (VanillaId) eta1JBB = (VanillaId) wildLBB
               (AlgAlt)
                 (DataAlt) GHC.Types.False
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [GHC.Types.Word] APPFL.Classes.$fOrdWord (VarArg) (VanillaId) etaIBB (VarArg) (VanillaId) eta1JBB = (VanillaId) wild1MBB
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.GT []
                          (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.LT []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.EQ []
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Eq typs: [List aNBB] APPFL.Classes.$fEq[] =
  (FUN)
  [(VanillaId) $dEq5OBB]
    (Let) let
      (StgNonRec)
        (VanillaId) satPBB =
        (FUN)
        [(VanillaId) etaH ,(VanillaId) etaG]
          (App) (VanillaId) $c/=19QBB (VarArg) (VanillaId) $dEq5OBB (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
    in (Let) let
         (StgNonRec)
           (VanillaId) satRBB =
           (THUNK) (App) (VanillaId) $c==19SBB (VarArg) (VanillaId) $dEq5OBB
       in (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) satRBB ,(VarArg) (VanillaId) satPBB]
  (VanillaId) $c/=19QBB =
  (FUN)
  [(VanillaId) $dEq5TBB ,(VanillaId) etaUBB ,(VanillaId) eta1VBB]
    (Case) (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [List aNBB] APPFL.Classes.$fEq[] (VarArg) (VanillaId) $dEq5TBB = (VanillaId) satWBB
      (AlgAlt)
        (DEFAULT) _
          -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) satWBB (VarArg) (VanillaId) etaUBB (VarArg) (VanillaId) eta1VBB = (VanillaId) wildXBB
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.True -> (ConApp) GHC.Types.False []
  (VanillaId) $c==19SBB =
  (FUN)
  [(VanillaId) $dEq5YBB]
    (Let) let
      (StgNonRec)
        (VanillaId) $dEq6ZBB =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [List aNBB] APPFL.Classes.$fEq[] (VarArg) (VanillaId) $dEq5YBB
    in (Let) let
         (StgNonRec)
           (VanillaId) sataBB =
           (FUN)
           [(VanillaId) dsbBB ,(VanillaId) ds1cBB]
             (Case) (App) (VanillaId) dsbBB = (VanillaId) wilddBB
               (AlgAlt)
                 (DataAlt) Nil
                   -> (Case) (App) (VanillaId) ds1cBB = (VanillaId) wild1eBB
                        (AlgAlt)
                          (DataAlt) Nil -> (ConApp) GHC.Types.True []
                          (DataAlt) Cons (VanillaId) ipvfBB (VanillaId) ipv1gBB
                            -> (ConApp) GHC.Types.False []
                 (DataAlt) Cons (VanillaId) xhBB (VanillaId) xsiBB
                   -> (Case) (App) (VanillaId) ds1cBB = (VanillaId) wild1jBB
                        (AlgAlt)
                          (DataAlt) Nil -> (ConApp) GHC.Types.False []
                          (DataAlt) Cons (VanillaId) ykBB (VanillaId) yslBB
                            -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq5YBB (VarArg) (VanillaId) xhBB (VarArg) (VanillaId) ykBB = (VanillaId) wild2mBB
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                                   (DataAlt) GHC.Types.True
                                     -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq6ZBB (VarArg) (VanillaId) xsiBB (VarArg) (VanillaId) yslBB
       in (App) (VanillaId) sataBB
  (VanillaId) $dEqnBB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [List aNBB] APPFL.Classes.$fEq[] (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Char] APPFL.Classes.$fEqChar
  (VanillaId) $s$c==oBB =
  (FUN)
  [(VanillaId) dspBB ,(VanillaId) ds1qBB]
    (Case) (App) (VanillaId) dspBB = (VanillaId) wildrBB
      (AlgAlt)
        (DataAlt) Nil
          -> (Case) (App) (VanillaId) ds1qBB = (VanillaId) wild1sBB
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) GHC.Types.True []
                 (DataAlt) Cons (VanillaId) ipvtBB (VanillaId) ipv1uBB
                   -> (ConApp) GHC.Types.False []
        (DataAlt) Cons (VanillaId) xvBB (VanillaId) xswBB
          -> (Case) (App) (VanillaId) ds1qBB = (VanillaId) wild1xBB
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) GHC.Types.False []
                 (DataAlt) Cons (VanillaId) yyBB (VanillaId) yszBB
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Char] APPFL.Classes.$fEqChar (VarArg) (VanillaId) xvBB (VarArg) (VanillaId) yyBB = (VanillaId) wild20BB
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEqnBB (VarArg) (VanillaId) xswBB (VarArg) (VanillaId) yszBB
  (VanillaId) a1BB =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (App) (VanillaId) $c/=19QBB (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Char] APPFL.Classes.$fEqChar (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
  (VanillaId) a12BB =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (App) (VanillaId) $c/=19QBB (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Int] APPFL.Classes.$fEqInt (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
  (VanillaId) a23BB =
  (THUNK)
    (App) (VanillaId) $c==19SBB (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Char] APPFL.Classes.$fEqChar
  (VanillaId) $s$fEq[]4BB =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) a23BB ,(VarArg) (VanillaId) a1BB]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
  (VanillaId) a35BB =
  (THUNK)
    (App) (VanillaId) $c==19SBB (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Int] APPFL.Classes.$fEqInt
  (VanillaId) $s$fEq[]16BB =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) a35BB ,(VarArg) (VanillaId) a12BB]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
  (VanillaId) $dEq17BB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [List aNBB] APPFL.Classes.$fEq[] (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Char] APPFL.Classes.$fEqChar
  (VanillaId) a48BB =
  (THUNK) (App) (VanillaId) $c==19SBB (VarArg) (VanillaId) $dEq17BB
  (VanillaId) a59BB =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (App) (VanillaId) $c/=19QBB (VarArg) (VanillaId) $dEq17BB (VarArg) (VanillaId) etaH (VarArg) (VanillaId) etaG
  (VanillaId) $s$fEq[]2-BB =
  (CONish) APPFL.Classes.D:Eq [(VarArg) (VanillaId) a48BB ,(VarArg) (VanillaId) a59BB]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Eq
  (VanillaId) $dEq2_BB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [List aNBB] APPFL.Classes.$fEq[] (VarArg) (VanillaId) $dEq17BB
  (VanillaId) $s$c==1ACB =
  (FUN)
  [(VanillaId) dsBCB ,(VanillaId) ds1CCB]
    (Case) (App) (VanillaId) dsBCB = (VanillaId) wildDCB
      (AlgAlt)
        (DataAlt) Nil
          -> (Case) (App) (VanillaId) ds1CCB = (VanillaId) wild1ECB
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) GHC.Types.True []
                 (DataAlt) Cons (VanillaId) ipvFCB (VanillaId) ipv1GCB
                   -> (ConApp) GHC.Types.False []
        (DataAlt) Cons (VanillaId) xHCB (VanillaId) xsICB
          -> (Case) (App) (VanillaId) ds1CCB = (VanillaId) wild1JCB
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) GHC.Types.False []
                 (DataAlt) Cons (VanillaId) yKCB (VanillaId) ysLCB
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq17BB (VarArg) (VanillaId) xHCB (VarArg) (VanillaId) yKCB = (VanillaId) wild2MCB
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq2_BB (VarArg) (VanillaId) xsICB (VarArg) (VanillaId) ysLCB
  (VanillaId) $dEq3NCB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [List aNBB] APPFL.Classes.$fEq[] (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Int] APPFL.Classes.$fEqInt
  (VanillaId) $s$c==2OCB =
  (FUN)
  [(VanillaId) dsPCB ,(VanillaId) ds1QCB]
    (Case) (App) (VanillaId) dsPCB = (VanillaId) wildRCB
      (AlgAlt)
        (DataAlt) Nil
          -> (Case) (App) (VanillaId) ds1QCB = (VanillaId) wild1SCB
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) GHC.Types.True []
                 (DataAlt) Cons (VanillaId) ipvTCB (VanillaId) ipv1UCB
                   -> (ConApp) GHC.Types.False []
        (DataAlt) Cons (VanillaId) xVCB (VanillaId) xsWCB
          -> (Case) (App) (VanillaId) ds1QCB = (VanillaId) wild1XCB
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) GHC.Types.False []
                 (DataAlt) Cons (VanillaId) yYCB (VanillaId) ysZCB
                   -> (Case) (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Int] APPFL.Classes.$fEqInt (VarArg) (VanillaId) xVCB (VarArg) (VanillaId) yYCB = (VanillaId) wild2aCB
                        (AlgAlt)
                          (DataAlt) GHC.Types.False -> (ConApp) GHC.Types.False []
                          (DataAlt) GHC.Types.True
                            -> (App) (ClassOpId) Selectors: [== ,/=] APPFL.Classes.== (VarArg) (VanillaId) $dEq3NCB (VarArg) (VanillaId) xsWCB (VarArg) (VanillaId) ysZCB
(StgNonRec)
  (VanillaId) $dEq4bCB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Eq typs: [List aNBB] APPFL.Classes.$fEq[] (VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Int] APPFL.Classes.$fEqInt
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt =
  (CONish) APPFL.Classes.D:Ord [(VarArg) (DictFunId) tycon: APPFL.Classes.Eq typs: [Int] APPFL.Classes.$fEqInt ,(VarArg) (VanillaId) APPFL.Classes.compareInt ,(VarArg) (VanillaId) APPFL.Classes.ltInt ,(VarArg) (VanillaId) APPFL.Classes.leInt ,(VarArg) (VanillaId) APPFL.Classes.gtInt ,(VarArg) (VanillaId) APPFL.Classes.geInt ,(VarArg) (VanillaId) $cmax19cCB ,(VarArg) (VanillaId) $cmin19dCB]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Ord
  (VanillaId) $cmin19dCB =
  (FUN)
  [(VanillaId) xeCB ,(VanillaId) yfCB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt (VarArg) (VanillaId) xeCB (VarArg) (VanillaId) yfCB = (VanillaId) wildgCB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) yfCB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xeCB
  (VanillaId) $cmax19cCB =
  (FUN)
  [(VanillaId) xhCB ,(VanillaId) yiCB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt (VarArg) (VanillaId) xhCB (VarArg) (VanillaId) yiCB = (VanillaId) wildjCB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) xhCB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) yiCB
(StgRec)
  (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] =
  (FUN)
  [(VanillaId) $dEq5lCB ,(VanillaId) $dOrd7mCB]
    (Let) let
      (StgNonRec)
        (VanillaId) satnCB =
        (THUNK)
          (App) (VanillaId) $cmin20oCB (VarArg) (VanillaId) $dEq5lCB (VarArg) (VanillaId) $dOrd7mCB
    in (Let) let
         (StgNonRec)
           (VanillaId) satpCB =
           (THUNK)
             (App) (VanillaId) $cmax20qCB (VarArg) (VanillaId) $dEq5lCB (VarArg) (VanillaId) $dOrd7mCB
       in (Let) let
            (StgNonRec)
              (VanillaId) satrCB =
              (THUNK)
                (App) (VanillaId) $c>=19sCB (VarArg) (VanillaId) $dEq5lCB (VarArg) (VanillaId) $dOrd7mCB
          in (Let) let
               (StgNonRec)
                 (VanillaId) sattCB =
                 (THUNK)
                   (App) (VanillaId) $c>19uCB (VarArg) (VanillaId) $dEq5lCB (VarArg) (VanillaId) $dOrd7mCB
             in (Let) let
                  (StgNonRec)
                    (VanillaId) satvCB =
                    (THUNK)
                      (App) (VanillaId) $c<=19wCB (VarArg) (VanillaId) $dEq5lCB (VarArg) (VanillaId) $dOrd7mCB
                in (Let) let
                     (StgNonRec)
                       (VanillaId) satxCB =
                       (THUNK)
                         (App) (VanillaId) $c<19yCB (VarArg) (VanillaId) $dEq5lCB (VarArg) (VanillaId) $dOrd7mCB
                   in (Let) let
                        (StgNonRec)
                          (VanillaId) satzCB =
                          (THUNK)
                            (App) (VanillaId) $ccompare190CB (VarArg) (VanillaId) $dEq5lCB (VarArg) (VanillaId) $dOrd7mCB
                      in (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq5lCB ,(VarArg) (VanillaId) satzCB ,(VarArg) (VanillaId) satxCB ,(VarArg) (VanillaId) satvCB ,(VarArg) (VanillaId) sattCB ,(VarArg) (VanillaId) satrCB ,(VarArg) (VanillaId) satpCB ,(VarArg) (VanillaId) satnCB]
  (VanillaId) $cmin20oCB =
  (FUN)
  [(VanillaId) $dEq51CB ,(VanillaId) $dOrd72CB]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd83CB =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq51CB (VarArg) (VanillaId) $dOrd72CB
    in (Let) let
         (StgNonRec)
           (VanillaId) sat4CB =
           (FUN)
           [(VanillaId) x5CB ,(VanillaId) y6CB]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd83CB (VarArg) (VanillaId) x5CB (VarArg) (VanillaId) y6CB = (VanillaId) wild7CB
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) y6CB
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) x5CB
       in (App) (VanillaId) sat4CB
  (VanillaId) $cmax20qCB =
  (FUN)
  [(VanillaId) $dEq58CB ,(VanillaId) $dOrd79CB]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd8-CB =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq58CB (VarArg) (VanillaId) $dOrd79CB
    in (Let) let
         (StgNonRec)
           (VanillaId) sat_CB =
           (FUN)
           [(VanillaId) xADB ,(VanillaId) yBDB]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd8-CB (VarArg) (VanillaId) xADB (VarArg) (VanillaId) yBDB = (VanillaId) wildCDB
               (AlgAlt)
                 (DataAlt) GHC.Types.False -> (App) (VanillaId) xADB
                 (DataAlt) GHC.Types.True -> (App) (VanillaId) yBDB
       in (App) (VanillaId) sat_CB
  (VanillaId) $c>=19sCB =
  (FUN)
  [(VanillaId) $dEq5DDB ,(VanillaId) $dOrd7EDB]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd8FDB =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq5DDB (VarArg) (VanillaId) $dOrd7EDB
    in (Let) let
         (StgNonRec)
           (VanillaId) satGDB =
           (FUN)
           [(VanillaId) xHDB ,(VanillaId) yIDB]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8FDB (VarArg) (VanillaId) xHDB (VarArg) (VanillaId) yIDB = (VanillaId) wildJDB
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satGDB
  (VanillaId) $c>19uCB =
  (FUN)
  [(VanillaId) $dEq5KDB ,(VanillaId) $dOrd7LDB]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd8MDB =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq5KDB (VarArg) (VanillaId) $dOrd7LDB
    in (Let) let
         (StgNonRec)
           (VanillaId) satNDB =
           (FUN)
           [(VanillaId) xODB ,(VanillaId) yPDB]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8MDB (VarArg) (VanillaId) xODB (VarArg) (VanillaId) yPDB = (VanillaId) wildQDB
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satNDB
  (VanillaId) $c<=19wCB =
  (FUN)
  [(VanillaId) $dEq5RDB ,(VanillaId) $dOrd7SDB]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd8TDB =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq5RDB (VarArg) (VanillaId) $dOrd7SDB
    in (Let) let
         (StgNonRec)
           (VanillaId) satUDB =
           (FUN)
           [(VanillaId) xVDB ,(VanillaId) yWDB]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8TDB (VarArg) (VanillaId) xVDB (VarArg) (VanillaId) yWDB = (VanillaId) wildXDB
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.True []
                 (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
       in (App) (VanillaId) satUDB
  (VanillaId) $c<19yCB =
  (FUN)
  [(VanillaId) $dEq5YDB ,(VanillaId) $dOrd7ZDB]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd8aDB =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq5YDB (VarArg) (VanillaId) $dOrd7ZDB
    in (Let) let
         (StgNonRec)
           (VanillaId) satbDB =
           (FUN)
           [(VanillaId) xcDB ,(VanillaId) ydDB]
             (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8aDB (VarArg) (VanillaId) xcDB (VarArg) (VanillaId) ydDB = (VanillaId) wildeDB
               (AlgAlt)
                 (DEFAULT) _ -> (ConApp) GHC.Types.False []
                 (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
       in (App) (VanillaId) satbDB
  (VanillaId) $ccompare190CB =
  (FUN)
  [(VanillaId) $dEq5fDB ,(VanillaId) $dOrd7gDB]
    (Let) let
      (StgNonRec)
        (VanillaId) $dOrd8hDB =
        (THUNK)
          (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq5fDB (VarArg) (VanillaId) $dOrd7gDB
    in (Let) let
         (StgNonRec)
           (VanillaId) satiDB =
           (FUN)
           [(VanillaId) dsjDB ,(VanillaId) ds1kDB]
             (Case) (App) (VanillaId) dsjDB = (VanillaId) wildlDB
               (AlgAlt)
                 (DataAlt) Nil
                   -> (Case) (App) (VanillaId) ds1kDB = (VanillaId) wild1mDB
                        (AlgAlt)
                          (DataAlt) Nil -> (ConApp) GHC.Types.EQ []
                          (DataAlt) Cons (VanillaId) ds2nDB (VanillaId) ds3oDB
                            -> (ConApp) GHC.Types.LT []
                 (DataAlt) Cons (VanillaId) ds2pDB (VanillaId) ds3qDB
                   -> (Case) (App) (VanillaId) ds1kDB = (VanillaId) wild1rDB
                        (AlgAlt)
                          (DataAlt) Nil -> (ConApp) GHC.Types.GT []
                          (DataAlt) Cons (VanillaId) ysDB (VanillaId) ystDB
                            -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd7gDB (VarArg) (VanillaId) ds2pDB (VarArg) (VanillaId) ysDB = (VanillaId) wild2uDB
                                 (AlgAlt)
                                   (DEFAULT) _ -> (App) (VanillaId) wild2uDB
                                   (DataAlt) GHC.Types.EQ
                                     -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd8hDB (VarArg) (VanillaId) ds3qDB (VarArg) (VanillaId) ystDB
       in (App) (VanillaId) satiDB
  (VanillaId) $dOrdvDB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $s$ccomparewDB =
  (FUN)
  [(VanillaId) dsxDB ,(VanillaId) ds1yDB]
    (Case) (App) (VanillaId) dsxDB = (VanillaId) wildzDB
      (AlgAlt)
        (DataAlt) Nil
          -> (Case) (App) (VanillaId) ds1yDB = (VanillaId) wild10DB
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) GHC.Types.EQ []
                 (DataAlt) Cons (VanillaId) ds21DB (VanillaId) ds32DB
                   -> (ConApp) GHC.Types.LT []
        (DataAlt) Cons (VanillaId) ds23DB (VanillaId) ds34DB
          -> (Case) (App) (VanillaId) ds1yDB = (VanillaId) wild15DB
               (AlgAlt)
                 (DataAlt) Nil -> (ConApp) GHC.Types.GT []
                 (DataAlt) Cons (VanillaId) y6DB (VanillaId) ys7DB
                   -> (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt (VarArg) (VanillaId) ds23DB (VarArg) (VanillaId) y6DB = (VanillaId) wild28DB
                        (AlgAlt)
                          (DEFAULT) _ -> (App) (VanillaId) wild28DB
                          (DataAlt) GHC.Types.EQ
                            -> (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrdvDB (VarArg) (VanillaId) ds34DB (VarArg) (VanillaId) ys7DB
  (VanillaId) $dOrd19DB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $s$c<-DB =
  (FUN)
  [(VanillaId) x_DB ,(VanillaId) yAEB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd19DB (VarArg) (VanillaId) x_DB (VarArg) (VanillaId) yAEB = (VanillaId) wildBEB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.True []
  (VanillaId) a6CEB =
  (THUNK)
    (App) (VanillaId) $c<19yCB (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $dOrd2DEB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $s$c<=EEB =
  (FUN)
  [(VanillaId) xFEB ,(VanillaId) yGEB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd2DEB (VarArg) (VanillaId) xFEB (VarArg) (VanillaId) yGEB = (VanillaId) wildHEB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.False []
  (VanillaId) a7IEB =
  (THUNK)
    (App) (VanillaId) $c<=19wCB (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $dOrd3JEB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $s$c>KEB =
  (FUN)
  [(VanillaId) xLEB ,(VanillaId) yMEB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd3JEB (VarArg) (VanillaId) xLEB (VarArg) (VanillaId) yMEB = (VanillaId) wildNEB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.False []
        (DataAlt) GHC.Types.GT -> (ConApp) GHC.Types.True []
  (VanillaId) a8OEB =
  (THUNK)
    (App) (VanillaId) $c>19uCB (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $dOrd4PEB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $s$c>=QEB =
  (FUN)
  [(VanillaId) xREB ,(VanillaId) ySEB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.compare (VarArg) (VanillaId) $dOrd4PEB (VarArg) (VanillaId) xREB (VarArg) (VanillaId) ySEB = (VanillaId) wildTEB
      (AlgAlt)
        (DEFAULT) _ -> (ConApp) GHC.Types.True []
        (DataAlt) GHC.Types.LT -> (ConApp) GHC.Types.False []
  (VanillaId) a9UEB =
  (THUNK)
    (App) (VanillaId) $c>=19sCB (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $dOrd5VEB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $s$cmaxWEB =
  (FUN)
  [(VanillaId) xXEB ,(VanillaId) yYEB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd5VEB (VarArg) (VanillaId) xXEB (VarArg) (VanillaId) yYEB = (VanillaId) wildZEB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) xXEB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) yYEB
  (VanillaId) a10aEB =
  (THUNK)
    (App) (VanillaId) $cmax20qCB (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $dOrd6bEB =
  (THUNK)
    (App) (DictFunId) tycon: APPFL.Classes.Ord typs: [List akCB] APPFL.Classes.$fOrd[] (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $s$cmincEB =
  (FUN)
  [(VanillaId) xdEB ,(VanillaId) yeEB]
    (Case) (App) (ClassOpId) Selectors: [$p1Ord ,compare ,< ,<= ,> ,>= ,max ,min] APPFL.Classes.<= (VarArg) (VanillaId) $dOrd6bEB (VarArg) (VanillaId) xdEB (VarArg) (VanillaId) yeEB = (VanillaId) wildfEB
      (AlgAlt)
        (DataAlt) GHC.Types.False -> (App) (VanillaId) yeEB
        (DataAlt) GHC.Types.True -> (App) (VanillaId) xdEB
  (VanillaId) a11gEB =
  (THUNK)
    (App) (VanillaId) $cmin20oCB (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) a12hEB =
  (THUNK)
    (App) (VanillaId) $ccompare190CB (VarArg) (VanillaId) $dEq4bCB (VarArg) (DictFunId) tycon: APPFL.Classes.Ord typs: [Int] APPFL.Classes.$fOrdInt
  (VanillaId) $s$fOrd[]iEB =
  (CONish) APPFL.Classes.D:Ord [(VarArg) (VanillaId) $dEq4bCB ,(VarArg) (VanillaId) a12hEB ,(VarArg) (VanillaId) a6CEB ,(VarArg) (VanillaId) a7IEB ,(VarArg) (VanillaId) a8OEB ,(VarArg) (VanillaId) a9UEB ,(VarArg) (VanillaId) a10aEB ,(VarArg) (VanillaId) a11gEB]
  Worker/Wrapper: (DCWorkerId) APPFL.Classes.D:Ord
(StgNonRec)
  (DCWorkerId) APPFL.Classes.D:Ord =
  (FUN)
  [(VanillaId) etajEB ,(VanillaId) etakEB ,(VanillaId) etalEB ,(VanillaId) etamEB ,(VanillaId) etanEB ,(VanillaId) etaeF ,(VanillaId) etaH ,(VanillaId) etaG]
    (ConApp) APPFL.Classes.D:Ord [(VarArg) (VanillaId) etajEB ,(VarArg) (VanillaId) etakEB ,(VarArg) (VanillaId) etalEB ,(VarArg) (VanillaId) etamEB ,(VarArg) (VanillaId) etanEB ,(VarArg) (VanillaId) etaeF ,(VarArg) (VanillaId) etaH ,(VarArg) (VanillaId) etaG]
(StgNonRec)
  (DCWorkerId) APPFL.Classes.D:Eq =
  (FUN)
  [(VanillaId) etaH ,(VanillaId) etaG]
    (ConApp) APPFL.Classes.D:Eq [(VarArg) (VanillaId) etaH ,(VarArg) (VanillaId) etaG]
(StgNonRec)
  (VanillaId) APPFL.CString.unpackNBytes# =
  (FUN)
  [(VanillaId) _addroEB ,(VanillaId) dspEB]
    (Case) (App) (VanillaId) dspEB = (VanillaId) ds1qEB
      (PrimAlt)
        (DEFAULT) _
          -> (LetNE) let
               (StgRec)
                 (VanillaId) unpackrEB =
                 (FUN)
                 [(VanillaId) accsEB ,(VanillaId) i#tEB]
                   (Case) (Op) (Prim) <# [(VarArg) (VanillaId) i#tEB ,(LitArg) (MachInt)0] = (VanillaId) satuEB
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) satuEB = (VanillaId) wildvEB
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) _addroEB ,(VarArg) (VanillaId) i#tEB] = (VanillaId) chwEB
                                       (PrimAlt)
                                         (DEFAULT) _
                                           -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) i#tEB ,(LitArg) (MachInt)1] = (VanillaId) satxEB
                                                (PrimAlt)
                                                  (DEFAULT) _
                                                    -> (Let) let
                                                         (StgNonRec)
                                                           (VanillaId) satyEB =
                                                           (CONish) GHC.Types.C# [(VarArg) (VanillaId) chwEB]
                                                           Worker/Wrapper: (DCWorkerId) GHC.Types.C#
                                                       in (Let) let
                                                            (StgNonRec)
                                                              (VanillaId) satzEB =
                                                              (CONish) Cons [(VarArg) (VanillaId) satyEB ,(VarArg) (VanillaId) accsEB]
                                                              Worker/Wrapper: (DCWorkerId) GHC.Types.:
                                                          in (App) (VanillaId) unpackrEB (VarArg) (VanillaId) satzEB (VarArg) (VanillaId) satxEB
                                (DataAlt) GHC.Types.True -> (App) (VanillaId) accsEB
             in (Case) (Op) (Prim) -# [(VarArg) (VanillaId) ds1qEB ,(LitArg) (MachInt)1] = (VanillaId) sat0EB
                  (PrimAlt)
                    (DEFAULT) _
                      -> (App) (VanillaId) unpackrEB (VarArg) (DCWorkerId) GHC.Types.[] (VarArg) (VanillaId) sat0EB
        (LitAlt) (MachInt)0 -> (ConApp) Nil []
(StgNonRec)
  (VanillaId) APPFL.CString.unpackCStringUtf8# =
  (FUN)
  [(VanillaId) addr1EB]
    (Let) let
      (StgRec)
        (VanillaId) unpack2EB =
        (FUN)
        [(VanillaId) nh3EB]
          (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addr1EB ,(VarArg) (VanillaId) nh3EB] = (VanillaId) ch4EB
            (PrimAlt)
              (DEFAULT) _
                -> (LetNE) let
                     (StgNonRec)
                       (VanillaId) $j5EB =
                       (FUN)
                       [(VanillaId) w6EB]
                         (Case) (Op) (Prim) leChar# [(VarArg) (VanillaId) ch4EB ,(LitArg) (MachChar)] = (VanillaId) sat7EB
                           (PrimAlt)
                             (DEFAULT) _
                               -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat7EB = (VanillaId) wild8EB
                                    (AlgAlt)
                                      (DataAlt) GHC.Types.False
                                        -> (Case) (Op) (Prim) leChar# [(VarArg) (VanillaId) ch4EB ,(LitArg) (MachChar)ß] = (VanillaId) sat9EB
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat9EB = (VanillaId) wild1-EB
                                                      (AlgAlt)
                                                        (DataAlt) GHC.Types.False
                                                          -> (Case) (Op) (Prim) leChar# [(VarArg) (VanillaId) ch4EB ,(LitArg) (MachChar)ï] = (VanillaId) sat_EB
                                                               (PrimAlt)
                                                                 (DEFAULT) _
                                                                   -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (VarArg) (VanillaId) sat_EB = (VanillaId) wild2AFB
                                                                        (AlgAlt)
                                                                          (DataAlt) GHC.Types.False
                                                                            -> (Let) let
                                                                                 (StgNonRec)
                                                                                   (VanillaId) satBFB =
                                                                                   (THUNK)
                                                                                     (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)4] = (VanillaId) satCFB
                                                                                       (PrimAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) unpack2EB (VarArg) (VanillaId) satCFB
                                                                               in (Let) let
                                                                                    (StgNonRec)
                                                                                      (VanillaId) satDFB =
                                                                                      (THUNK)
                                                                                        (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)3] = (VanillaId) satEFB
                                                                                          (PrimAlt)
                                                                                            (DEFAULT) _
                                                                                              -> (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addr1EB ,(VarArg) (VanillaId) satEFB] = (VanillaId) wild3FFB
                                                                                                   (PrimAlt)
                                                                                                     (DEFAULT) _
                                                                                                       -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)2] = (VanillaId) satGFB
                                                                                                            (PrimAlt)
                                                                                                              (DEFAULT) _
                                                                                                                -> (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addr1EB ,(VarArg) (VanillaId) satGFB] = (VanillaId) wild4HFB
                                                                                                                     (PrimAlt)
                                                                                                                       (DEFAULT) _
                                                                                                                         -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)1] = (VanillaId) satIFB
                                                                                                                              (PrimAlt)
                                                                                                                                (DEFAULT) _
                                                                                                                                  -> (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addr1EB ,(VarArg) (VanillaId) satIFB] = (VanillaId) wild5JFB
                                                                                                                                       (PrimAlt)
                                                                                                                                         (DEFAULT) _
                                                                                                                                           -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) wild3FFB] = (VanillaId) satKFB
                                                                                                                                                (PrimAlt)
                                                                                                                                                  (DEFAULT) _
                                                                                                                                                    -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satKFB ,(LitArg) (MachInt)128] = (VanillaId) satLFB
                                                                                                                                                         (PrimAlt)
                                                                                                                                                           (DEFAULT) _
                                                                                                                                                             -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) wild4HFB] = (VanillaId) satMFB
                                                                                                                                                                  (PrimAlt)
                                                                                                                                                                    (DEFAULT) _
                                                                                                                                                                      -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satMFB ,(LitArg) (MachInt)128] = (VanillaId) satNFB
                                                                                                                                                                           (PrimAlt)
                                                                                                                                                                             (DEFAULT) _
                                                                                                                                                                               -> (Case) (Op) (Prim) uncheckedIShiftL# [(VarArg) (VanillaId) satNFB ,(LitArg) (MachInt)6] = (VanillaId) satOFB
                                                                                                                                                                                    (PrimAlt)
                                                                                                                                                                                      (DEFAULT) _
                                                                                                                                                                                        -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) wild5JFB] = (VanillaId) satPFB
                                                                                                                                                                                             (PrimAlt)
                                                                                                                                                                                               (DEFAULT) _
                                                                                                                                                                                                 -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satPFB ,(LitArg) (MachInt)128] = (VanillaId) satQFB
                                                                                                                                                                                                      (PrimAlt)
                                                                                                                                                                                                        (DEFAULT) _
                                                                                                                                                                                                          -> (Case) (Op) (Prim) uncheckedIShiftL# [(VarArg) (VanillaId) satQFB ,(LitArg) (MachInt)12] = (VanillaId) satRFB
                                                                                                                                                                                                               (PrimAlt)
                                                                                                                                                                                                                 (DEFAULT) _
                                                                                                                                                                                                                   -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) ch4EB] = (VanillaId) satSFB
                                                                                                                                                                                                                        (PrimAlt)
                                                                                                                                                                                                                          (DEFAULT) _
                                                                                                                                                                                                                            -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satSFB ,(LitArg) (MachInt)240] = (VanillaId) satTFB
                                                                                                                                                                                                                                 (PrimAlt)
                                                                                                                                                                                                                                   (DEFAULT) _
                                                                                                                                                                                                                                     -> (Case) (Op) (Prim) uncheckedIShiftL# [(VarArg) (VanillaId) satTFB ,(LitArg) (MachInt)18] = (VanillaId) satUFB
                                                                                                                                                                                                                                          (PrimAlt)
                                                                                                                                                                                                                                            (DEFAULT) _
                                                                                                                                                                                                                                              -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) satUFB ,(VarArg) (VanillaId) satRFB] = (VanillaId) satVFB
                                                                                                                                                                                                                                                   (PrimAlt)
                                                                                                                                                                                                                                                     (DEFAULT) _
                                                                                                                                                                                                                                                       -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) satVFB ,(VarArg) (VanillaId) satOFB] = (VanillaId) satWFB
                                                                                                                                                                                                                                                            (PrimAlt)
                                                                                                                                                                                                                                                              (DEFAULT) _
                                                                                                                                                                                                                                                                -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) satWFB ,(VarArg) (VanillaId) satLFB] = (VanillaId) satXFB
                                                                                                                                                                                                                                                                     (PrimAlt)
                                                                                                                                                                                                                                                                       (DEFAULT) _
                                                                                                                                                                                                                                                                         -> (Case) (Op) (Prim) chr# [(VarArg) (VanillaId) satXFB] = (VanillaId) satYFB
                                                                                                                                                                                                                                                                              (PrimAlt)
                                                                                                                                                                                                                                                                                (DEFAULT) _
                                                                                                                                                                                                                                                                                  -> (ConApp) GHC.Types.C# [(VarArg) (VanillaId) satYFB]
                                                                                  in (ConApp) Cons [(VarArg) (VanillaId) satDFB ,(VarArg) (VanillaId) satBFB]
                                                                          (DataAlt) GHC.Types.True
                                                                            -> (Let) let
                                                                                 (StgNonRec)
                                                                                   (VanillaId) satZFB =
                                                                                   (THUNK)
                                                                                     (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)3] = (VanillaId) sataFB
                                                                                       (PrimAlt)
                                                                                         (DEFAULT) _
                                                                                           -> (App) (VanillaId) unpack2EB (VarArg) (VanillaId) sataFB
                                                                               in (Let) let
                                                                                    (StgNonRec)
                                                                                      (VanillaId) satbFB =
                                                                                      (THUNK)
                                                                                        (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)2] = (VanillaId) satcFB
                                                                                          (PrimAlt)
                                                                                            (DEFAULT) _
                                                                                              -> (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addr1EB ,(VarArg) (VanillaId) satcFB] = (VanillaId) wild3dFB
                                                                                                   (PrimAlt)
                                                                                                     (DEFAULT) _
                                                                                                       -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)1] = (VanillaId) sateFB
                                                                                                            (PrimAlt)
                                                                                                              (DEFAULT) _
                                                                                                                -> (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addr1EB ,(VarArg) (VanillaId) sateFB] = (VanillaId) wild4fFB
                                                                                                                     (PrimAlt)
                                                                                                                       (DEFAULT) _
                                                                                                                         -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) wild3dFB] = (VanillaId) satgFB
                                                                                                                              (PrimAlt)
                                                                                                                                (DEFAULT) _
                                                                                                                                  -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satgFB ,(LitArg) (MachInt)128] = (VanillaId) sathFB
                                                                                                                                       (PrimAlt)
                                                                                                                                         (DEFAULT) _
                                                                                                                                           -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) wild4fFB] = (VanillaId) satiFB
                                                                                                                                                (PrimAlt)
                                                                                                                                                  (DEFAULT) _
                                                                                                                                                    -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satiFB ,(LitArg) (MachInt)128] = (VanillaId) satjFB
                                                                                                                                                         (PrimAlt)
                                                                                                                                                           (DEFAULT) _
                                                                                                                                                             -> (Case) (Op) (Prim) uncheckedIShiftL# [(VarArg) (VanillaId) satjFB ,(LitArg) (MachInt)6] = (VanillaId) satkFB
                                                                                                                                                                  (PrimAlt)
                                                                                                                                                                    (DEFAULT) _
                                                                                                                                                                      -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) ch4EB] = (VanillaId) satlFB
                                                                                                                                                                           (PrimAlt)
                                                                                                                                                                             (DEFAULT) _
                                                                                                                                                                               -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satlFB ,(LitArg) (MachInt)224] = (VanillaId) satmFB
                                                                                                                                                                                    (PrimAlt)
                                                                                                                                                                                      (DEFAULT) _
                                                                                                                                                                                        -> (Case) (Op) (Prim) uncheckedIShiftL# [(VarArg) (VanillaId) satmFB ,(LitArg) (MachInt)12] = (VanillaId) satnFB
                                                                                                                                                                                             (PrimAlt)
                                                                                                                                                                                               (DEFAULT) _
                                                                                                                                                                                                 -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) satnFB ,(VarArg) (VanillaId) satkFB] = (VanillaId) satoFB
                                                                                                                                                                                                      (PrimAlt)
                                                                                                                                                                                                        (DEFAULT) _
                                                                                                                                                                                                          -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) satoFB ,(VarArg) (VanillaId) sathFB] = (VanillaId) satpFB
                                                                                                                                                                                                               (PrimAlt)
                                                                                                                                                                                                                 (DEFAULT) _
                                                                                                                                                                                                                   -> (Case) (Op) (Prim) chr# [(VarArg) (VanillaId) satpFB] = (VanillaId) satqFB
                                                                                                                                                                                                                        (PrimAlt)
                                                                                                                                                                                                                          (DEFAULT) _
                                                                                                                                                                                                                            -> (ConApp) GHC.Types.C# [(VarArg) (VanillaId) satqFB]
                                                                                  in (ConApp) Cons [(VarArg) (VanillaId) satbFB ,(VarArg) (VanillaId) satZFB]
                                                        (DataAlt) GHC.Types.True
                                                          -> (Let) let
                                                               (StgNonRec)
                                                                 (VanillaId) satrFB =
                                                                 (THUNK)
                                                                   (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)2] = (VanillaId) satsFB
                                                                     (PrimAlt)
                                                                       (DEFAULT) _
                                                                         -> (App) (VanillaId) unpack2EB (VarArg) (VanillaId) satsFB
                                                             in (Let) let
                                                                  (StgNonRec)
                                                                    (VanillaId) sattFB =
                                                                    (THUNK)
                                                                      (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)1] = (VanillaId) satuFB
                                                                        (PrimAlt)
                                                                          (DEFAULT) _
                                                                            -> (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addr1EB ,(VarArg) (VanillaId) satuFB] = (VanillaId) wild2vFB
                                                                                 (PrimAlt)
                                                                                   (DEFAULT) _
                                                                                     -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) wild2vFB] = (VanillaId) satwFB
                                                                                          (PrimAlt)
                                                                                            (DEFAULT) _
                                                                                              -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satwFB ,(LitArg) (MachInt)128] = (VanillaId) satxFB
                                                                                                   (PrimAlt)
                                                                                                     (DEFAULT) _
                                                                                                       -> (Case) (Op) (Prim) ord# [(VarArg) (VanillaId) ch4EB] = (VanillaId) satyFB
                                                                                                            (PrimAlt)
                                                                                                              (DEFAULT) _
                                                                                                                -> (Case) (Op) (Prim) -# [(VarArg) (VanillaId) satyFB ,(LitArg) (MachInt)192] = (VanillaId) satzFB
                                                                                                                     (PrimAlt)
                                                                                                                       (DEFAULT) _
                                                                                                                         -> (Case) (Op) (Prim) uncheckedIShiftL# [(VarArg) (VanillaId) satzFB ,(LitArg) (MachInt)6] = (VanillaId) sat0FB
                                                                                                                              (PrimAlt)
                                                                                                                                (DEFAULT) _
                                                                                                                                  -> (Case) (Op) (Prim) +# [(VarArg) (VanillaId) sat0FB ,(VarArg) (VanillaId) satxFB] = (VanillaId) sat1FB
                                                                                                                                       (PrimAlt)
                                                                                                                                         (DEFAULT) _
                                                                                                                                           -> (Case) (Op) (Prim) chr# [(VarArg) (VanillaId) sat1FB] = (VanillaId) sat2FB
                                                                                                                                                (PrimAlt)
                                                                                                                                                  (DEFAULT) _
                                                                                                                                                    -> (ConApp) GHC.Types.C# [(VarArg) (VanillaId) sat2FB]
                                                                in (ConApp) Cons [(VarArg) (VanillaId) sattFB ,(VarArg) (VanillaId) satrFB]
                                      (DataAlt) GHC.Types.True
                                        -> (Let) let
                                             (StgNonRec)
                                               (VanillaId) sat3FB =
                                               (THUNK)
                                                 (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nh3EB ,(LitArg) (MachInt)1] = (VanillaId) sat4FB
                                                   (PrimAlt)
                                                     (DEFAULT) _
                                                       -> (App) (VanillaId) unpack2EB (VarArg) (VanillaId) sat4FB
                                           in (Let) let
                                                (StgNonRec)
                                                  (VanillaId) sat5FB =
                                                  (CONish) GHC.Types.C# [(VarArg) (VanillaId) ch4EB]
                                                  Worker/Wrapper: (DCWorkerId) GHC.Types.C#
                                              in (ConApp) Cons [(VarArg) (VanillaId) sat5FB ,(VarArg) (VanillaId) sat3FB]
                   in (Case) (App) (VanillaId) ch4EB = (VanillaId) wild6FB
                        (PrimAlt)
                          (DEFAULT) _
                            -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)0 = (VanillaId) wild17FB
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False
                                     -> (App) (VanillaId) $j5EB (VarArg) (VanillaId) APPFL.Prim.void#
                                   (DataAlt) GHC.Types.True -> (ConApp) Nil []
                          (LitAlt) (MachChar) 
                            -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)1 = (VanillaId) wild18FB
                                 (AlgAlt)
                                   (DataAlt) GHC.Types.False
                                     -> (App) (VanillaId) $j5EB (VarArg) (VanillaId) APPFL.Prim.void#
                                   (DataAlt) GHC.Types.True -> (ConApp) Nil []
    in (App) (VanillaId) unpack2EB (LitArg) (MachInt)0
(StgNonRec)
  (VanillaId) APPFL.CString.unpackFoldrCString# =
  (FUN)
  [(VanillaId) addr9FB ,(VanillaId) f-FB ,(VanillaId) z_FB]
    (Let) let
      (StgRec)
        (VanillaId) unpackAGB =
        (FUN)
        [(VanillaId) nhBGB]
          (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addr9FB ,(VarArg) (VanillaId) nhBGB] = (VanillaId) chCGB
            (PrimAlt)
              (DEFAULT) _
                -> (Case) (App) (VanillaId) chCGB = (VanillaId) wildDGB
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)0 = (VanillaId) wild1EGB
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (Let) let
                                       (StgNonRec)
                                         (VanillaId) satFGB =
                                         (THUNK)
                                           (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nhBGB ,(LitArg) (MachInt)1] = (VanillaId) satGGB
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (App) (VanillaId) unpackAGB (VarArg) (VanillaId) satGGB
                                     in (Let) let
                                          (StgNonRec)
                                            (VanillaId) satHGB =
                                            (CONish) GHC.Types.C# [(VarArg) (VanillaId) wildDGB]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.C#
                                        in (App) (VanillaId) f-FB (VarArg) (VanillaId) satHGB (VarArg) (VanillaId) satFGB
                                (DataAlt) GHC.Types.True -> (App) (VanillaId) z_FB
                       (LitAlt) (MachChar) 
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)1 = (VanillaId) wild1IGB
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (Let) let
                                       (StgNonRec)
                                         (VanillaId) satJGB =
                                         (THUNK)
                                           (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nhBGB ,(LitArg) (MachInt)1] = (VanillaId) satKGB
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (App) (VanillaId) unpackAGB (VarArg) (VanillaId) satKGB
                                     in (Let) let
                                          (StgNonRec)
                                            (VanillaId) satLGB =
                                            (CONish) GHC.Types.C# [(LitArg) (MachChar) ]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.C#
                                        in (App) (VanillaId) f-FB (VarArg) (VanillaId) satLGB (VarArg) (VanillaId) satJGB
                                (DataAlt) GHC.Types.True -> (App) (VanillaId) z_FB
    in (App) (VanillaId) unpackAGB (LitArg) (MachInt)0
(StgNonRec)
  (VanillaId) APPFL.CString.unpackAppendCString# =
  (FUN)
  [(VanillaId) addrMGB ,(VanillaId) restNGB]
    (Let) let
      (StgRec)
        (VanillaId) unpackOGB =
        (FUN)
        [(VanillaId) nhPGB]
          (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addrMGB ,(VarArg) (VanillaId) nhPGB] = (VanillaId) chQGB
            (PrimAlt)
              (DEFAULT) _
                -> (Case) (App) (VanillaId) chQGB = (VanillaId) wildRGB
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)0 = (VanillaId) wild1SGB
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (Let) let
                                       (StgNonRec)
                                         (VanillaId) satTGB =
                                         (THUNK)
                                           (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nhPGB ,(LitArg) (MachInt)1] = (VanillaId) satUGB
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (App) (VanillaId) unpackOGB (VarArg) (VanillaId) satUGB
                                     in (Let) let
                                          (StgNonRec)
                                            (VanillaId) satVGB =
                                            (CONish) GHC.Types.C# [(VarArg) (VanillaId) wildRGB]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.C#
                                        in (ConApp) Cons [(VarArg) (VanillaId) satVGB ,(VarArg) (VanillaId) satTGB]
                                (DataAlt) GHC.Types.True -> (App) (VanillaId) restNGB
                       (LitAlt) (MachChar) 
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)1 = (VanillaId) wild1WGB
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (Let) let
                                       (StgNonRec)
                                         (VanillaId) satXGB =
                                         (THUNK)
                                           (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nhPGB ,(LitArg) (MachInt)1] = (VanillaId) satYGB
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (App) (VanillaId) unpackOGB (VarArg) (VanillaId) satYGB
                                     in (Let) let
                                          (StgNonRec)
                                            (VanillaId) satZGB =
                                            (CONish) GHC.Types.C# [(LitArg) (MachChar) ]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.C#
                                        in (ConApp) Cons [(VarArg) (VanillaId) satZGB ,(VarArg) (VanillaId) satXGB]
                                (DataAlt) GHC.Types.True -> (App) (VanillaId) restNGB
    in (App) (VanillaId) unpackOGB (LitArg) (MachInt)0
(StgNonRec)
  (VanillaId) APPFL.CString.unpackCString# =
  (FUN)
  [(VanillaId) addraGB]
    (Let) let
      (StgRec)
        (VanillaId) unpackbGB =
        (FUN)
        [(VanillaId) nhcGB]
          (Case) (Op) (Prim) indexCharOffAddr# [(VarArg) (VanillaId) addraGB ,(VarArg) (VanillaId) nhcGB] = (VanillaId) chdGB
            (PrimAlt)
              (DEFAULT) _
                -> (Case) (App) (VanillaId) chdGB = (VanillaId) wildeGB
                     (PrimAlt)
                       (DEFAULT) _
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)0 = (VanillaId) wild1fGB
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (Let) let
                                       (StgNonRec)
                                         (VanillaId) satgGB =
                                         (THUNK)
                                           (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nhcGB ,(LitArg) (MachInt)1] = (VanillaId) sathGB
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (App) (VanillaId) unpackbGB (VarArg) (VanillaId) sathGB
                                     in (Let) let
                                          (StgNonRec)
                                            (VanillaId) satiGB =
                                            (CONish) GHC.Types.C# [(VarArg) (VanillaId) wildeGB]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.C#
                                        in (ConApp) Cons [(VarArg) (VanillaId) satiGB ,(VarArg) (VanillaId) satgGB]
                                (DataAlt) GHC.Types.True -> (ConApp) Nil []
                       (LitAlt) (MachChar) 
                         -> (Case) (App) (VanillaId) APPFL.Types.isTrue# (LitArg) (MachInt)1 = (VanillaId) wild1jGB
                              (AlgAlt)
                                (DataAlt) GHC.Types.False
                                  -> (Let) let
                                       (StgNonRec)
                                         (VanillaId) satkGB =
                                         (THUNK)
                                           (Case) (Op) (Prim) +# [(VarArg) (VanillaId) nhcGB ,(LitArg) (MachInt)1] = (VanillaId) satlGB
                                             (PrimAlt)
                                               (DEFAULT) _
                                                 -> (App) (VanillaId) unpackbGB (VarArg) (VanillaId) satlGB
                                     in (Let) let
                                          (StgNonRec)
                                            (VanillaId) satmGB =
                                            (CONish) GHC.Types.C# [(LitArg) (MachChar) ]
                                            Worker/Wrapper: (DCWorkerId) GHC.Types.C#
                                        in (ConApp) Cons [(VarArg) (VanillaId) satmGB ,(VarArg) (VanillaId) satkGB]
                                (DataAlt) GHC.Types.True -> (ConApp) Nil []
    in (App) (VanillaId) unpackbGB (LitArg) (MachInt)0