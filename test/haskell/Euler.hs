module Euler
  ( euler0001, euler0002, euler0003, euler0004
  , euler0005, euler0006, euler0007, euler0008
  )
where

import qualified Data.Map as Map
import qualified Data.List as List


{--- Problem 1: Multiples of 3 and 5

If we list all the natural numbers below 10 that are multiples of 3 or
5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
-}

euler0001 :: Integer
euler0001 =
  let mults nums test = any ((0 ==) . (mod test)) nums
  in sum $ filter (mults [3,5]) [1 .. 999]



{--- Problem 2: Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will
be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
-}

fibs :: [Integer]
fibs = 1 : 1 : zipWith (+) fibs (tail fibs)

euler0002 :: Integer
euler0002 = sum $ filter even $ takeWhile (< 4000000) fibs



{--- Problem 3: Largest prime factor

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
-}

lgstPfactor :: Int -> Int
lgstPfactor n = aux 2 n
  where aux d p | d == p = p
                | p `mod` d == 0 = aux d (p `div` d)
                | otherwise = aux (d + 1) p

euler0003 :: Int
euler0003 = lgstPfactor 600851475143




{--- Problem 4: Largest palindrome product

A palindromic number reads the same both ways. The largest palindrome
made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
-}

numIsPal :: (Show a, Eq a) => a -> Bool
numIsPal n = isPal (show n)

isPal :: Eq a => [a] -> Bool
isPal str = str == (reverse str)

naive :: Int
naive = maximum $
        filter numIsPal $
        zipWith (*) (concat nums) (concat mults)
  where nums = map (\a -> replicate a a) [999, 998 .. 100]
        mults = map (\(x:_) -> [x, (x-1) .. 1]) nums

euler0004 :: Int
euler0004 = naive



{--- Problem 5: Smallest multiple

2520 is the smallest number that can be divided by each of the numbers
from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all
of the numbers from 1 to 20?
-}


pFactors :: Integral a => a -> [a]
pFactors n = aux n 2 []
  where aux 1 _ xs = xs
        aux p m xs | p `mod` m == 0 = aux (p `div` m) m (m:xs)
                   | otherwise = aux p (m + 1) xs

            
euler0005 :: Integer        
euler0005 = product $ nums 20
  where
    -- Basic idea is to find the prime factors for each number up to
    -- n. For each prime factor of each of those numbers, we want to
    -- record the maximum power of that factor in all the
    -- factorizations.  We want to know that there is a number with
    -- four twos in its factorization (16) and we don't care about the
    -- twos in any other factorization. When we have these numbers for
    -- each of the primes below n, we can multiply them all for the
    -- final result.
    nums :: Integral a => a -> [a]
    nums n = concatMap snd $ Map.toList $ aux Map.empty n
    -- The Map in this function is a prime -> [primes] Map. At a key
    -- k, the value is a list holding only the integral k n times
    -- where n is the current maximum number of occurences of k in a
    -- factorization
    aux mp 1 = mp
    aux mp n =
      -- we fold on the grouped list of prime factors (all factors,
      -- not uniques) inserting into the Map using a comparison
      -- function to only overwrite the list of factors if the new
      -- list is longer
      let newMp = foldr fun mp $ List.group $ pFactors n
          fun xx@(x:_) pmap = Map.insertWith' takeGreater x xx pmap
          takeGreater xs ys = if length xs > length ys then xs else ys
      in aux newMp (n - 1)


{--- Problem 6: Sum square difference

The sum of the squares of the first ten natural numbers is

1^2 + 2^2 + ... + 10^2 = 385

The square of the sum of the first ten natural numbers is

(1 + 2 + ... + 10)^2 = 55^2 = 3025

Hence the difference between the sum of the squares of the first ten
natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred
natural numbers and the square of the sum. 

-}

square :: Num a => a -> a
square n = n * n

diffSqSum :: (Enum a, Fractional a) => a -> a
diffSqSum n = (square $ (n * (n - 1) / 2 )) - (sum $ map square [1..n])

euler0006 :: Double
euler0006 = diffSqSum 100



{--- Problem 7: 10001st prime

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that
the 6th prime is 13. 

What is the 10 001st prime number?
-}


nPrimes :: Integral a => a -> [a]
nPrimes n = aux [2,3] 5 2
  where aux acc p m
          | m == n = acc
          | any
            ((0 ==) . (p `mod`))
            (takeWhile (<= (ceiling $ sqrt $ fromIntegral p)) acc) =
              aux acc (p + 2) m
          | otherwise = aux (List.insert p acc) (p + 2) (m + 1)

euler0007 :: Integer
euler0007 = last $ nPrimes 10001



{--- Problem 8: 

The four adjacent digits in the 1000-digit number that have the
greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the
greatest product. What is the value of this product?
-}

numStr :: String
numStr = "\
\73167176531330624919225119674426574742355349194934\
\96983520312774506326239578318016984801869478851843\
\85861560789112949495459501737958331952853208805511\
\12540698747158523863050715693290963295227443043557\
\66896648950445244523161731856403098711121722383113\
\62229893423380308135336276614282806444486645238749\
\30358907296290491560440772390713810515859307960866\
\70172427121883998797908792274921901699720888093776\
\65727333001053367881220235421809751254540594752243\
\52584907711670556013604839586446706324415722155397\
\53697817977846174064955149290862569321978468622482\
\83972241375657056057490261407972968652414535100474\
\82166370484403199890008895243450658541227588666881\
\16427171479924442928230863465674813919123162824586\
\17866458359124566529476545682848912883142607690042\
\24219022671055626321111109370544217506941658960408\
\07198403850962455444362981230987879927244284909188\
\84580156166097919133875499200524063689912560717606\
\05886116467109405077541002256983155200055935729725\
\71636269561882670428252483600823257530420752963450"

numerify :: String -> [Integer]
numerify = map (read . (:[]))

type Digits  = [Integer]
type MaxPair = (Integer, Digits)

solve :: Integer -> MaxPair -> Digits -> Digits -> MaxPair
solve _ tp _ [] = tp
solve prod mpr@(mx, _) (y:ys) (x:xs) =
  let overlap = take 12 ys
      tmp = case y of
             0 -> x * product overlap
             _ -> x * prod `div` y
      maxPr | tmp > mx  = (tmp, overlap ++ [x])
            | otherwise = mpr
  in solve tmp maxPr ys xs
solve _ _ _ _ =
  error
  "Why are there more digits in the first list than the second?"

euler0008 :: MaxPair
euler0008 = let nums = numerify numStr
                digits0 = take 13 nums
                prod0 = product digits0
            in solve prod0 (prod0,digits0) nums (drop 13 nums)
