-- divide boxed Ints
-- divInt :: Int -> Int -> Int
-- Integer Division
divInt = FUN(x y -> case x of {
	  	     	  I i# -> case y of {
			       	       I j# -> case idiv# i# j# of {
				       	       	    x# -> let {result = CON(I x#)} in result }}});

-- firstHalf a list, rounding down
-- firstHalf :: List a -> List a
firstHalf = FUN(xs -> let {l = THUNK(length xs);
      	       	       a = THUNK(divInt l two);
		       final = THUNK(take a xs)} in final);

-- Compare if two lists of ints are the same
-- eqList :: List a -> List a -> Bool
eqList = FUN(xs ys -> case xs of {
       	 	      	   Nil -> case ys of {
			       	       Nil -> true;
				       Cons h t -> false};
			   Cons h1 t1 -> case ys of {
			   	    	      Nil -> false; 
					      Cons h2 t2 -> let {expr = THUNK(eqInt h1 h2)} in case expr of {
					      	      	    	                                    True -> let {final = THUNK(eqList t1 t2)} in final;
								                                    False -> false}}});

--list5: [5,4,3,2,1]
list1 = CON(Cons one nil);
list2 = CON(Cons two list1);
list3 = CON(Cons three list2);
list4 = CON(Cons four list3);
list5 = CON(Cons five list4);

list6 = CON(Cons four nil);
list7 = CON(Cons five list6);

--test
result = THUNK(firstHalf list5);
output = THUNK(list7);
main = THUNK(eqList output result);
