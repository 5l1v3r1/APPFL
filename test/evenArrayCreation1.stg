--creates array of specified size with even numbers in backwards order
--[2n-2,2n-4,...,4,2,0,nil]
--createEvenBackArray :: Int -> Int ->  List Int -> List Int
createEvenBackArray = FUN(n m xs -> let {a = THUNK(eqInt n zero)} in case a of {
	      	       	                                          True -> xs;
								  False -> let {b = CON(Cons m xs);
								  	        e = THUNK(plusInt two m);
								                d = THUNK(subInt n one);
									        c = THUNK(createEvenBackArray d e b)} in c});

--initializes array creation
--cEBArr :: Int -> List Int
cEBArr = FUN(n -> let {a = THUNK(createEvenBackArray n zero nil)} in a);  

list1 = CON(Cons zero nil);
list2 = CON(Cons two list1);
list3 = CON(Cons four list2);

--Test
output = THUNK(cEBArr three);
main = THUNK(eqList list3 output);
