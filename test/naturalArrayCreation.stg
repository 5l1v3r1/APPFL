--creates array of specified size with whole numbers in backwards order
--[n-1,n-2,...,3,2,1,0,nil]
--createNormBackArray :: Int -> List Int -> List Int
createNormBackArray = FUN(n m xs -> let {a = THUNK(eqInt n zero)} in case a of {
	      	      	                                          True -> xs;
								  False -> let {b = CON(Cons m xs);
								      	        e = THUNK(plusInt m one); 
										d = THUNK(subInt n one);
									        c = THUNK(createNormBackArray d e b)} in c});

--initializes array creation
--cNBArr :: Int -> List Int
cNBArr = FUN(n -> let {a = THUNK(createNormBackArray n zero nil)} in a);  

list1 = CON(Cons zero nil);
list2 = CON(Cons one list1);
list3 = CON(Cons two list2);

--Test
output = THUNK(cNBArr three);
main = THUNK(eqList list3 output);
