data Int = I Int#;
one = CON(I 1);
three = CON(I 3);

multInt = FUN(x y ->
           case x of {
               I i# ->
                  case y of {
                      I j# -> case imul# i# j# of
                                 { x# -> let { result = CON (I x#) } in result }}});

subInt = FUN(x y ->
           case x of
              { I i# ->
                  case y of
                     { I j# -> case isub# i# j# of
                                 { x# -> let { result = CON (I x#) } in result }}});

fac = FUN(x ->
         case x of {
           I i# -> case wfac i# of { 
                      j# -> let {r = CON(I j#)} in r }});

wfac = FUN(i# ->
  case i# of {
    0 -> 1;
    j# -> case isub# i# 1 of {
       k# -> case wfac k# of {
         l# -> imul# i# l#  
       }
    }
 });                     
           
main = THUNK (fac three) 
