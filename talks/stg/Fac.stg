-- real STG:

Fac.fac [Occ=LoopBreaker] :: GHC.Types.Int -> GHC.Types.Int
[GblId, Arity=1, Str=DmdType, Unf=OtherCon []] =
    \r srt:SRT:[rjG :-> Fac.fac, rlH :-> GHC.Num.$fNumInt] [ds_sL0]
        case ds_sL0 of wild_sL1 {
          GHC.Types.I# ds1_sL2 [Occ=Once!] ->
              case ds1_sL2 of _ [Occ=Dead] {
                __DEFAULT ->
                    let {
                      sat_sL6 [Occ=Once] :: GHC.Types.Int
                      [LclId, Str=DmdType] =
                          \u srt:SRT:[rjG :-> Fac.fac, rlH :-> GHC.Num.$fNumInt] []
                              let {
                                sat_sL5 [Occ=Once] :: GHC.Types.Int
                                [LclId, Str=DmdType] =
                                    \u srt:SRT:[rlH :-> GHC.Num.$fNumInt] []
                                        let {
                                          sat_sL4 [Occ=Once] :: GHC.Types.Int
                                          [LclId, Str=DmdType] =
                                              NO_CCS GHC.Types.I#! [1];
                                        } in  GHC.Num.- GHC.Num.$fNumInt wild_sL1 sat_sL4;
                              } in  Fac.fac sat_sL5;
                    } in  GHC.Num.* GHC.Num.$fNumInt wild_sL1 sat_sL6;
                0 -> GHC.Types.I# [1];
              };
        };


-- simple STG:

fac = FUN (ds_sL0 ->
  case ds_sL0 of
  {
    I ds1_sL2 -> case ds1_sL2 of
                 {
                   d -> let {sat_sL6 = THUNK(
                         let {sat_sL5 = THUNK(
                           let {sat_sL4 = CON(I 1)} in subInt ds_sL0 sat_sL4
                         )}
                         in fac sat_sL5
                       )}
                       in multInt ds_sL0 sat_sL6;
                   0 -> one
                 }
  }
);

          
  
