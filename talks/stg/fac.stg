data Int = I Int#;
data Bool = False | True;
one = CON(I 1);
three = CON(I 3);
false = CON(False);
true = CON(True);


multInt = FUN(x y ->
           case x of {
               I i# ->
                  case y of {
                      I j# -> case imul# i# j# of
                                 { x# -> let { result = CON (I x#) } in result }}});

subInt = FUN(x y ->
           case x of
              { I i# ->
                  case y of
                     { I j# -> case isub# i# j# of
                                 { x# -> let { result = CON (I x#) } in result }}});

eqZero = FUN(x -> 
           case x of {
             I i# -> case ieq# i# 0 of {
                      0 -> false;
                      1 -> true}});

fac = FUN (x -> 
         case eqZero x of {
            True -> one;
            False -> let { s = THUNK(subInt x one);
                           rec = THUNK(fac s) }
                     in multInt x rec
         });
                 
main = THUNK (fac three) 
