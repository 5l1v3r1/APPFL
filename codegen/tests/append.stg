## append.stg

## Haskell
## 
## unit = ()
## 
## zero = 0
## one = 1
## 
## nil   = []
## list1 = one : nil
## list2 = one : list1
## list3 = zero : list2
## list4 = append list3 list3
## list5 = append list4 list4
## 
## append l1 l2 =
##     case l1 of
##       [] -> l2
##       hd : tl -> hd : append tl l2
## 
## myseq x y = case x of z -> y
## 
## forcelist list = 
##    case list of
##       [] -> unit
##       h : t -> seq h $ forcelist t
## 
## doit = seq (forcelist list5) list5


unit = CON(Unit);

zero = CON(I 0);
one = CON(I 1);

nil   = CON(Nil);
list1 = CON(Cons one nil);
list2 = CON(Cons one list1);
list3 = CON(Cons zero list2);
list4 = THUNK(append list3 list3);
list5 = THUNK(append list4 list4);

append = FUN(l1 l2 ->
            case l1 of
               { Nil -> l2;
                 Cons hd tl -> let { rec = THUNK(append tl l2);
                                     result = CON(Cons hd rec) }
                               in result });

seq = FUN(x y -> case x of { z -> y });

forcelist = FUN(list ->
   case list of {
      Nil -> unit;
      Cons h t -> let { rec = THUNK(forcelist t) } in seq h rec });

main  = THUNK(let { f = THUNK(forcelist list5)} in seq f list5);

