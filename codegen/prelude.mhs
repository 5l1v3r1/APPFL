data Unit = Unit;
data List a = Nil | Cons a (List a);
data Bool = False | True;
data Tupl2 a b = TP2 a b;
data Tupl3 a b c = TP3 a b c;
data Int = I Int#;

error = error;

plusInt (I a) (I b) = case iplus# a b of 
	      	      	   i -> I i;;

subInt (I a) (I b) = case isub# a b of 
       	     	     	  i -> I i;;

mulInt (I a) (I b) = case imul# a b of 
       	     	     	  i -> I i;;

modInt (I a) (I b) = case imod# a b of 
       	     	     	  i -> I i;;

eqInt (I a) (I b) = case ieq# a b of 
      	       	    	 0# -> False;
			 x -> True;;
eqInt x y = error;

append :: List a -> List a -> List a ;
append xs ys = case xs of
       	       	    Nil -> ys;
		    Cons a xs -> Cons a (append xs ys);;

compose f g x = f (g x);

foldr f sd xs = case xs of
      	             Nil -> sd;
		     Cons a xs -> f a (foldr f sd xs);;

foldl f ac xs = case xs of
      	      	     Nil -> ac;
		     Cons a xs -> foldl f (f ac a) xs;;

map f = foldr (compose Cons f) Nil;