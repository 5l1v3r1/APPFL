--creates array of specified size with zeros 
--createArray :: Int -> List Int -> List Int
createArray = FUN(n xs -> let {a = THUNK(eqInt n zero)} in case a of {
	      	       	                                        True -> xs;
								False -> let {b = CON(Cons zero xs);
								      	      d = THUNK(subInt n one); 
									      c = THUNK(createArray d b)} in c});

--initializes array creation
--cArr :: Int -> List Int
cArr = FUN(n -> let {a = THUNK(createArray n nil)} in a);  

list1 = CON(Cons zero nil);
list2 = CON(Cons zero list1);
list3 = CON(Cons zero list2);


--Test
output = THUNK(cArr three);
main = THUNK(eqList list3 output);
