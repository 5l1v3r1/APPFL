--removeAtIndex :: List a -> Int -> List a
removeAtIndex = FUN(xs n -> case xs of {
		      	   Nil -> nil;
			   Cons h1 t1 -> case eqInt n zero of {
			   	      	      False -> let {r = THUNK(subInt n one);
					      	       	    s = THUNK(removeAtIndex t1 r);
						            q = CON(Cons h1 s)} in q;
					      True -> t1}});

-- List, element, Index
--insertAtIndex :: List a -> a -> Int -> List a
insertAtIndex = FUN(xs a n ->  case eqInt n zero of { 
	      	       	       	    True -> let {r = CON(Cons a xs)} in r;
			    	    False -> case xs of {
				    	     	  Nil -> nil;
						  Cons h1 t1 -> let {r = THUNK(subInt n one);
				    	     	                     s = THUNK(insertAtIndex t1 a r);
		                                                     q = CON(Cons h1 s)} in q}});

-- retrieves value at index of array 
-- index1 :: List a -> Int -> a
index1 = FUN(xs n -> case xs of {
      	      	    	 Cons h1 t1 -> let {a = THUNK(eqInt n zero)} in case a of {
      	      	    	     		   	     	  True -> h1;
						          False -> let {c = THUNK(subInt n one);
							  	        d = THUNK(index1 t1 c)} in d}});


--switch :: List a -> Int -> Int -> List a
switch = FUN(xs a b -> let {r = THUNK(index1 xs a);
       	 	       	    s = THUNK(index1 xs b);
			    t = THUNK(insertAtIndex xs s a);
			    u = THUNK(plusInt one a);
			    v = THUNK(removeAtIndex t u);
			    w = THUNK(insertAtIndex v r b);
			    x = THUNK(plusInt one b);
			    y = THUNK(removeAtIndex w x)} in y);

list6 = CON(Cons one list5);
list5 = CON(Cons one list4);
list4 = CON(Cons two list3);
list3 = CON(Cons three list2);
list2 = CON(Cons four list1);
list1 = CON(Cons five nil);

list10 = CON(Cons one list11);
list11 = CON(Cons four list12);
list12 = CON(Cons two list13);
list13 = CON(Cons three list14);
list14 = CON(Cons one list15);
list15 = CON(Cons five nil);

--Test
result = THUNK(switch list6 four one);
output = THUNK(list10);
main = THUNK(eqList result output);
