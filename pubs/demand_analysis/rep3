From sestoft@id.dtu.dk Wed Sep 14 08:37:18 1994
Return-Path: <sestoft@id.dtu.dk>
Received: from iddth.id.dtu.dk by crl.nmsu.edu (4.1/SMI-4.1)
	id AA05581; Wed, 14 Sep 94 08:37:14 MDT
Received: from idrisc.id.dtu.dk by iddth.id.dtu.dk (5.65c+/1.34)
	id AA16569; Wed, 14 Sep 1994 16:36:38 +0200
Received: by idrisc.id.dtu.dk (5.57/1.34)
	id AA07636; Wed, 14 Sep 94 16:36:34 +0200
From: Peter Sestoft <sestoft@id.dtu.dk>
Message-Id: <9409141436.AA07636@idrisc.id.dtu.dk>
Subject: Comments on your PEPM paper
To: kei@crl.nmsu.edu (Kei Davis)
Date: Wed, 14 Sep 94 16:36:33 MET DST
Cc: harald@cs.mu.oz.au (Harald Soendergaard)
X-Mailer: ELM [version 2.2 PL14]
Status: RO

Dear Kei,

Here are my comments on your PEPM paper.

Peter

------------------------------------------------------------------------
Kei Davis: PERs from Projections for Binding-Time Analysis

The paper is well presented but somewhat terse.  With a little
previous knowledge of projection-based analysis, I found it mostly
readable, although I won't claim to have understood every detail.

The `Introduction and Background' is very neat, and Section 2 needs no
improvement.  Section 3 becomes very technical immediately; here it
would be helpful to give an example of the domain factorization, which
is a central point, *before* embarking on the formal definitions, and
perhaps to advertise also the examples of program analysis in Section
6, which is indispensable.

* Section 2.1: Where is the conception of Int as an infinite sum used?
Elsewhere, including Figure 1, infinite sums aren't permitted.  Is
this a problem?

* Section 4, the Central Result: I can't make sense of the assertion

	((R[Int] * R[Int]) -> R[Int])(plus^P,plus^S,plus^S).  

Namely, in the definition of R[T], the first argument must be a pair,
but plus^P as defined in Figure 5 is a *function* from pairs to pairs.

* Section 5: The projections considered are those called "admissible"
by Launchbury, I think. 

The admissible projections on recursively defined data could be called
"uniform" (on the recursive components of the same type).

* Section 6: I suppose that the projection SPINE BOT just says that
the whole spine is defined, and does not exclude infinite lists.  So
the analysis result for `length' says that provided the spine of xs is
static and provided length(xs) terminates, the result is static.  This
is the usual interpretation of binding-times, but worth saying
explicitly for readers who are used to finite data structures only.
 
* Section 7: Is the $\sqcap-basis$ uniquely determined?

* Section 8: Rather than [Consel:90:BindingTime] it seems relevant to
cite [Hughes:88:Backwards], and especially his Section 6.3 which
introduces a similar factorization of the abstract domain into a
`backwards' (~projection) and an `abstract interpretation' (~forwards)
part.  As far as I know, John hasn't further developed that work.

@Inproceedings{ Hughes:88:Backwards,
  AUTHOR        = "J. Hughes",
  TITLE         = "Backwards Analysis of Functional Programs",
  BOOKTITLE     = "Partial Evaluation and Mixed Computation",
  EDITOR        = "D. Bj{\o}rner and A.P. Ershov and N.D. Jones",
  PAGES         = "187-208",
  PUBLISHER     = "Amsterdam:\ North-Holland",
  YEAR          = "1988"}


MISPRINTS:

* Abstract: `that projections' --> `than projections' 

* Section 1: `safety condition satisfies, and' --> `safety condition,' 

  `technique far simpler technique' -->   `technique far simpler'

* Section 4: The `\alpha_1, \alpha_2,' in the proof outline for the
central result should be deleted.

* Section 5: `$FTran_{T_1}$' should be `$FProj_{T_1}$' (twice), in the
inference rule.

* Section 6: `denote usual' --> `denote the usual' 

-- 
Peter Sestoft   *   sestoft@id.dtu.dk   *   Department of Computer Science
Technical University of Denmark, Building 344      DK-2800 Lyngby, Denmark
Tel: +45 45 93 33 32 * Direct: +45 45 93 12 22/3749 * Fax: +45 42 88 45 30

