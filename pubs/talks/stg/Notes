Overview of STG

Demos of GHC generated STG 

Slide 1:

STG: One of the GHC intermediate languages

Simplified view of GHC pipeline (ignoring runtime)

Typechecker (big)

STG -> one of the backends

Slide 2:

STG syntax

STG is a simple functional programming language

Constructor

Literal (unboxed) 

atom: Variable or literal

Expressions:

function calls (atoms args only)

let 

case

case can pattern match or default 

Heap Objects:

function def

Saturated constructors (on atoms)

thunk: suspension (evaluated when needed)

top level definitions including a main.

+ there are also data types

that is the whole language.

Slide 3:

boxed and unboxed values

Let: 
box an integer
declare a function 

Case:
evaualate sub-expression (scrutinee) and then perform case analysis


Slide 4:

mult 2 ints in haskell and stg

haskell: just multiply boxed values

STG:

eval x 
unbox x 
eval y
unbox y
evaluate primitive unboxed multiply
rebox

gets tedious to write quickly -> Prelude


Slide 5:

factorial in haskell and stg

Haskell: use patern matching and recursion

STG:

use case 

eqZero is a Prelude function

terminal more fac.stg (show full code)

Slide 6:
--
Demos:

Now Real STG:

more Fac.hs

script:
more dump-stg.sh

./dump-stg.hs

ugly mess!

lots of info for codegenerator 

\ -> HEAP objs

\r HEAP object in this case A FUN() args in []

\u  no args THUNK()

\s single entry

GHC.Types.I#  CON() arguments in []

remove extra stuff:
view Fac.stg 

compare

not so different than example:

one pulled to top level
letrec -> nested lets 
eqZero function

here is orig:

more fac.stg

run through our compiler
./stg-run.sh

cleanup naming: 
more fac2.stg 

./stg2-run.sh

yeah it is the same

--
Optimize!

script:
more dump-stg-o.sh

./dump-stg-o.sh 

view Faco.stg

wrapper to unbox/box and unboxed helper

cleanup naming:

more faco.stg

./stgo-run.stg 

--

ministg

more fac.mstg (slightly different syntax)

./ministg-run.sh

file:///Users/dpx/workspace/appfl/talks/stg/trace/step0.html

--
Slide 7:

more about STG...
