build notes:
-------------------------------

Removing Haskell Platform - assumes installation from .tar.gz, not system package manager

# remove user files
rm -rf ~/.ghc ~/.cabal
# remove system files
sudo rm -rf /usr/local/haskell
# remove dead symlinks
sudo find /usr/local -xtype l -delete

-----------------------------------------------------------------------------------------

Installing Haskell Platform

tar xf haskell-platform-7.10.3-unknown-posix-x86_64.tar.gz

sudo ./install-haskell-platform.sh

cabal update

------------------------------

Requirements:

Haskell Platform 7.10.x (may work with 7.8.x as well but not currently used for development)
(Haskell Platform 8.x is not supported)
CMake > 2.8.12.2
recent gcc/clang (gcc 4.8.x tested on linux, xcode 6 tested on mac)

we require a few packages not in the haskell platform: language-c-quote, ghc-paths and pretty-show

$ cabal install language-c-quote ghc-paths pretty-show 

Argobots build requires autotools/autoconf/libtool:

for linux:

apt-get install autotools-dev autoconf libtool

for mac: 

curl -OL http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz
tar -xzf autoconf-2.69.tar.gz 
cd autoconf-2.69
./configure && make && sudo make install
 
curl -OL http://ftpmirror.gnu.org/automake/automake-1.14.tar.gz
tar -xzf automake-1.14.tar.gz
cd automake-1.14
./configure && make && sudo make install
 
curl -OL http://ftpmirror.gnu.org/libtool/libtool-2.4.2.tar.gz
tar -xzf libtool-2.4.2.tar.gz
cd libtool-2.4.2
./configure && make && sudo make install

cd /usr/local/bin
ln -s libtoolize glibtoolize

-----------------------------------------------------------------------------------------

to build full compiler:

$ make

If you happen to get a cabal error saying to run configure
(should only happen if you upgrade ghc/cabal) then:

$ make config && make

to run tests:

$ make test

to just build runtime (and copy Preludes etc):

$ make runtime

to build/test in parallel:

$ export BUILD_NTHREADS=4
$ make clean && make && make test

---------------------------------------
Using the compiler from inside ghci:

build runtime:

$ make runtime

start ghci: 

$ cd codegen
$  ghci -package ghc
Prelude> :l appfl
...
*Main>

To build and run a stg file:

*Main>  eval "../test/stg/one.stg"

To generate a.out (in codegen dir):

*Main> build "../test/stg/one.stg"

To generate c file (in same location as stg file
in this case ../test/stg/one.stg.c)

*Main> toc "../test/stg/one.stg"

This also works for .mhs files

----------------------------------------
Using the compiler from the command line:

build the stgc binary (starting at top level):

$ make

$ ./build/bin/appfl test/stg/one.stg -o one

this will also generate test/stg/one.stg.c

compile a .stg.c file:

$ gcc test/stg/one.stg.c -o one -L build/lib -I build/include -lruntime -std=gnu99

-----------------------------------------
Runtime flags to binaries:

-g         -- disable Garbage Collection
-t <float> -- set Garbage Collection Threshold
-e <int>   -- evaluation strategy (0->non-strict 1->strict)


