build notes:
-------------------------------

Requirements:

Haskell Platform 7.10.x (may work with 7.8.x as well but not currently used for development)
CMake > 2.8.12.2
recent gcc/clang (gcc 4.8.x tested on linux, xcode 6 tested on mac)

we require a few packages not in the haskell platform: language-c-quote and ghc-paths

$ cabal install language-c-quote ghc-paths


------------------------------

to build full compiler:

$ make

If you happen to get a cabal error saying to run configure
(should only happen if you upgrade ghc/cabal) then:

$ make config && make

to run tests:

$ make test

to just build runtime (and copy Preludes etc):

$ make runtime

to build/test in parallel:

$ export BUILD_NTHREADS=4
$ make clean && make && make test

---------------------------------------
Using the compiler from inside ghci:

build runtime:

$ make runtime

start ghci: 

$ cd codegen
$ ghci
Prelude> :l stgc
...
*Main>

To build and run a stg file:

*Main>  eval "../test/one.stg"

To generate a.out (in codegen dir):

*Main> build "../test/one.stg"

To generate c file (in same location as stg file
in this case ../test/one.stg.c)

*Main> toc "../test/one.stg"

This also works for .mhs files

----------------------------------------
Using the compiler from the command line:

build the stgc binary (starting at top level):

$ make

$ ./build/bin/stgc test/one.stg -o one

this will also generate test/one.stg.c

compile a .stg.c file:

$ gcc test/one.stg.c -o one -L build/lib -I build/include -lruntime -std=gnu99

-----------------------------------------
Runtime flags to binaries:

-g         -- disable Garbage Collection
-t <float> -- set Garbage Collection Threshold
-e <int>   -- evaluation strategy (0->non-strict 1->strict)  

