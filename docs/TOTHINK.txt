
------- Summer 2016 Student Projects ---------------------------------------

* Bridge gap GHC STG to our STG (David)

* ultra-paranoid heap and stack analysis and display (Rajat)

* change case syntax, backwards compatibility with old syntax likely harder than
** automatically transform the test suite
** change type checking (Kei?)

* make PAP first class
** known functions straightforward
** unknown functions requires
*** type information for sanity checking
*** pointer to underlying FUN in PAP instead of FVs (Kei)





------- DONE ----------------------------------------------------------------

- Change evaluation strategy such that stgEval is not a loop, just trivially
  jumps through its argument.

  -- Thus FUN, PAP, and CON just return self.  The true entry point of FUN is
     `hidden'.  BLACKHOLEs have actual code, currently to indicate an error,
     to do something else in the parallel implementation.  This was already
     implemented in a currently abandoned branch, to be resurrected.

Note:  THUNK InfoPtr is not yet changed to BLACKHOLE IntoPtr because garbage
collection would not work correctly.  When THUNK's FV's are stashed in a stack
frame then the BLACKHOLE can be safely GC'd.

- Make stack objects a type different than Obj.

- separate stgCurVal into stgCurValBoxed and stgCurValUnboxed

------- TODO ----------------------------------------------------------------

- STGEVAL is invoked only by stgApplyXXX.  STGCALL1 is only invoked by STGEVAL
  (check this).  STGJUMP1 is called...  The parameters to the latter two are
  'self'--this could be stgCurVal instead (?)

  -- CALLCONT is special in that because STGCALLs return only pointer values
     necessarily need to be saved.  When variables are referenced via stack
     frame objects then CALLCONT need not store any values at all.

- Use a bitmap in PAPs instead of boxed/unboxed count for the already-applied
  args.  This would allow the backing out of the maybe-too-clever permuting
  of formal parameters of the underlying functions.

- Use a bitmap in call continuations instead of storing just pointer values.

- Introduce a "stack frame" pseudo- (or actual) continuation instead of using
  the cmm stack.

  -- Instead of loading these values into C variables on function entry,
     refer to them in their stack frame.  

     --- Stack frame gets popped by STGRETURN() or STGJUMP(), OR, stack frame
         could be a proper continuation whose code pops the frame and jumps
         through the next continuation on the stack.

     --- Does this subsume call continuation?

     --- This gets tricky with stgApply

- Use bitmaps and code pointers in all entities on the STG stack instead of
  InfoTabs.

  -- All continuation types look the same?  (Code pointer, bitmap, payload;
     code pointer odd means there is no bitmap or payload?)

- Further investigate using gcc and LLVM's tail call mechanism to eliminate
  the use of the trampoline.  Then both STG calls and jumps become C calls.

  -- If feasible, what should the type signature be?  Simplest would be void
     f().  void f(Obj *self)?  Some fixed number of args whether they're used
     or not, with excess on the stack?  Because x86_64 can use a fair number
     of registers for arguments this could be quite a bit more
     efficient. What's more, Clang/LLVM appears to be quite smart about

     The problem is that we likely want arguments to be on a stack that the GC
     can see at (almost) all times.  How does ghc handle this with its own
     LLVM calling convention to maximize the number of arguments passed in
     registers?  Does it only pass pointers to objects that are already
     accessible via other roots?  When, then, is it safe to GC?

     An answer could be that a cmm function's local variables are stack
     allocated (that would be an STG stack frame for us).  LETs write these
     addresses directly to the stack frame (all at once? atomically?)  This
     means the CG needs to know how much space to allocate IF THEY'RE
     ALLOCATED BEFORE FUNCTION CALL (as part of the argument list) OR ON
     FUNCTION ENTRY (like C)--and this could be tricky to figure out given the
     current CG.  However, using the stack frame (as above), a new stack frame
     could be allocated for each LET, and if self-popping (as above) their
     management should be simple.

     Having LET-bound variables automatically rooted in the stack has a number
     of implications:

     --- Static objects need not be roots in GC

     --- CG for ECase is simplified: currently we assume that if the scrutinee
     	 might grow the heap then Alts cannot by inlined.  With heap objects
     	 referenced through their stack frame this is no longer an issue.
     	 (There is still the issue of whether the scrutinee code does a tail
     	 call--even by inspecting the code this can only be safely
     	 approximated.)

     --- Atomicity of heap allocation/creating/updating stack frame, as
         noted before.	   
