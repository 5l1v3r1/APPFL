! not working yet (let w/ expression that is function call)
unit = CON(Unit);
zero = CON(I 0);
one = CON(I 1);
append = FUN(l1 l2 ->
            case l1 of
               { Nil -> l2;
                 Cons hd tl -> let { rec = THUNK(append tl l2);
                                     result = CON(Cons hd rec) }
                               in result });
forcelist = FUN(list ->
   case list of {
      Nil -> unit;
      Cons h t -> let { rec = THUNK(forcelist t) } in seq h rec });

seq = FUN(x y -> case x of { z -> y });

list1 = CON(Cons one nil);
list2 = CON(Cons one list1);
list3 = CON(Cons zero list2);
list4 = THUNK(append list3 list3);
list5 = THUNK(append list4 list4);
main = THUNK(let { f = THUNK(forcelist list5)} in seq f list5)
